ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_ADC1_Init,"ax",%progbits
  18              		.align	1
  19              		.global	MX_ADC1_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_ADC1_Init:
  26              	.LFB333:
  27              		.file 1 "Src/adc.c"
   1:Src/adc.c     **** 
   2:Src/adc.c     **** #include "adc.h"
   3:Src/adc.c     **** #include "global.h"
   4:Src/adc.c     **** volatile s16 VOLT_ADC_Array[VOLT_SAMPNUM] = {0};								//ï¿½ï¿½Ñ¹Ä£ï¿½ï¿½ï¿½ÅºÅµï¿½ADCÔ­Ê¼Öµ
   5:Src/adc.c     **** volatile s16 TEMP_ADC_Array[TEMP_SAMPNUM] = {0};								//ï¿½Â¶ï¿½Ä£ï¿½ï¿½ï¿½ÅºÅµï¿½ADCÔ­Ê¼Öµ
   6:Src/adc.c     **** volatile s16 VOLT_ADC_Array_Index = 0;
   7:Src/adc.c     **** volatile s16 TEMP_ADC_Array_Index = 0;
   8:Src/adc.c     **** volatile s16 VOLT_Filter = 0;																		//ï¿½ï¿½Ñ¹(mV)
   9:Src/adc.c     **** volatile s16 TEMP_Filter = 0;																		//ï¿½Â¶ï¿½(0.1ï¿½ï¿½)
  10:Src/adc.c     **** volatile u8 Flag_VOLT_ADC_Array_Filled = 0;											//ï¿½ï¿½Ñ¹ADCï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  11:Src/adc.c     **** volatile u8 Flag_TEMP_ADC_Array_Filled = 0;											//ï¿½Â¶ï¿½ADCï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  12:Src/adc.c     **** uint32_t calibration_value[4] = {0};
  13:Src/adc.c     **** #define NUM_POS_AFILTER 32
  14:Src/adc.c     **** s32 Pos_ADC_Array[NUM_POS_AFILTER] = {0};                     //Ì¼Ä¤Î»ï¿½ï¿½ADCï¿½ï¿½Æ½ï¿½ï¿½ï¿½Ë²ï
  15:Src/adc.c     **** s32 Index_Pos_ADC_Array = 0;                                  //Ì¼Ä¤Î»ï¿½ï¿½ADCï¿½ï¿½Æ½ï¿½ï¿½ï¿½Ë²ï
  16:Src/adc.c     **** s32 sum_Pos_ADC_Array = 0;                                  //Ì¼Ä¤Î»ï¿½ï¿½ADCï¿½ï¿½Æ½ï¿½ï¿½ï¿½Ë²ï¿½
  17:Src/adc.c     **** volatile s32 MU_Value_base_0 = 0;
  18:Src/adc.c     **** #define YBP_ARRAY_BIT 3 //5
  19:Src/adc.c     **** #define YBP_ARRAY_SIZE (1<<YBP_ARRAY_BIT)
  20:Src/adc.c     **** volatile uint16_t index_YBP_Array = 0;
  21:Src/adc.c     **** volatile int16_t YBP_Array[YBP_ARRAY_SIZE] = {0};
  22:Src/adc.c     **** volatile int32_t YBP_Sum = 0;
  23:Src/adc.c     **** 
  24:Src/adc.c     **** #define FORCE_ARRAY_BIT 0
  25:Src/adc.c     **** #define FORCE_ARRAY_SIZE (1<<FORCE_ARRAY_BIT)
  26:Src/adc.c     **** volatile uint16_t index_force_Array = 0;
  27:Src/adc.c     **** volatile int16_t force_Array[FORCE_ARRAY_SIZE] = {0};
  28:Src/adc.c     **** volatile int32_t force_Sum = 0;
  29:Src/adc.c     **** 
  30:Src/adc.c     **** ADC_HandleTypeDef hadc1;
  31:Src/adc.c     **** ADC_HandleTypeDef hadc2;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 2


  32:Src/adc.c     **** 
  33:Src/adc.c     **** volatile int16_t g_Rt_Map[71] = {11,18,23,29,34,12,43,48,52,57,62,68,73,79,86,93,101,110,120,130,14
  34:Src/adc.c     **** };
  35:Src/adc.c     **** 
  36:Src/adc.c     **** 
  37:Src/adc.c     **** 
  38:Src/adc.c     **** 
  39:Src/adc.c     **** 
  40:Src/adc.c     **** /**
  41:Src/adc.c     ****   * @brief ADC1 Initialization Function
  42:Src/adc.c     ****   * @param None
  43:Src/adc.c     ****   * @retval None
  44:Src/adc.c     ****   */
  45:Src/adc.c     ****  void MX_ADC1_Init(void)
  46:Src/adc.c     **** {
  28              		.loc 1 46 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 104
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 9AB0     		sub	sp, sp, #104
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 112
  47:Src/adc.c     **** 
  48:Src/adc.c     **** 	int factor;
  49:Src/adc.c     ****   /* USER CODE BEGIN ADC1_Init 0 */
  50:Src/adc.c     **** 
  51:Src/adc.c     ****   /* USER CODE END ADC1_Init 0 */
  52:Src/adc.c     **** 
  53:Src/adc.c     ****   ADC_MultiModeTypeDef multimode = {0};
  40              		.loc 1 53 0
  41 0004 0024     		movs	r4, #0
  42 0006 1794     		str	r4, [sp, #92]
  43 0008 1894     		str	r4, [sp, #96]
  44 000a 1994     		str	r4, [sp, #100]
  54:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig = {0};
  45              		.loc 1 54 0
  46 000c 2022     		movs	r2, #32
  47 000e 2146     		mov	r1, r4
  48 0010 0FA8     		add	r0, sp, #60
  49 0012 FFF7FEFF 		bl	memset
  50              	.LVL0:
  55:Src/adc.c     ****   ADC_InjectionConfTypeDef sConfigInjected = {0};
  51              		.loc 1 55 0
  52 0016 3C22     		movs	r2, #60
  53 0018 2146     		mov	r1, r4
  54 001a 6846     		mov	r0, sp
  55 001c FFF7FEFF 		bl	memset
  56              	.LVL1:
  56:Src/adc.c     **** 
  57:Src/adc.c     ****   /* USER CODE BEGIN ADC1_Init 1 */
  58:Src/adc.c     **** 
  59:Src/adc.c     ****   /* USER CODE END ADC1_Init 1 */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 3


  60:Src/adc.c     ****   /** Common config
  61:Src/adc.c     ****   */
  62:Src/adc.c     ****   hadc1.Instance = ADC1;
  57              		.loc 1 62 0
  58 0020 3848     		ldr	r0, .L11
  59 0022 4FF0A043 		mov	r3, #1342177280
  60 0026 0360     		str	r3, [r0]
  63:Src/adc.c     ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  61              		.loc 1 63 0
  62 0028 4FF44033 		mov	r3, #196608
  63 002c 4360     		str	r3, [r0, #4]
  64:Src/adc.c     ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  64              		.loc 1 64 0
  65 002e 8460     		str	r4, [r0, #8]
  65:Src/adc.c     ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  66              		.loc 1 65 0
  67 0030 C460     		str	r4, [r0, #12]
  66:Src/adc.c     ****   hadc1.Init.GainCompensation = 0;
  68              		.loc 1 66 0
  69 0032 0461     		str	r4, [r0, #16]
  67:Src/adc.c     ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  70              		.loc 1 67 0
  71 0034 0123     		movs	r3, #1
  72 0036 4361     		str	r3, [r0, #20]
  68:Src/adc.c     ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  73              		.loc 1 68 0
  74 0038 0822     		movs	r2, #8
  75 003a 8261     		str	r2, [r0, #24]
  69:Src/adc.c     ****   hadc1.Init.LowPowerAutoWait = DISABLE;
  76              		.loc 1 69 0
  77 003c 0477     		strb	r4, [r0, #28]
  70:Src/adc.c     ****   hadc1.Init.ContinuousConvMode = ENABLE;
  78              		.loc 1 70 0
  79 003e 4377     		strb	r3, [r0, #29]
  71:Src/adc.c     ****   hadc1.Init.NbrOfConversion = 1;
  80              		.loc 1 71 0
  81 0040 0362     		str	r3, [r0, #32]
  72:Src/adc.c     ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
  82              		.loc 1 72 0
  83 0042 80F82430 		strb	r3, [r0, #36]
  73:Src/adc.c     ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  84              		.loc 1 73 0
  85 0046 C462     		str	r4, [r0, #44]
  74:Src/adc.c     ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  86              		.loc 1 74 0
  87 0048 0463     		str	r4, [r0, #48]
  75:Src/adc.c     ****   hadc1.Init.DMAContinuousRequests = DISABLE;
  88              		.loc 1 75 0
  89 004a 80F83840 		strb	r4, [r0, #56]
  76:Src/adc.c     ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  90              		.loc 1 76 0
  91 004e C463     		str	r4, [r0, #60]
  77:Src/adc.c     ****   hadc1.Init.OversamplingMode = DISABLE;
  92              		.loc 1 77 0
  93 0050 80F84040 		strb	r4, [r0, #64]
  78:Src/adc.c     ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
  94              		.loc 1 78 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 4


  95 0054 FFF7FEFF 		bl	HAL_ADC_Init
  96              	.LVL2:
  97 0058 0028     		cmp	r0, #0
  98 005a 47D1     		bne	.L7
  99              	.L2:
  79:Src/adc.c     ****   {
  80:Src/adc.c     ****     Error_Handler();
  81:Src/adc.c     ****   }
  82:Src/adc.c     ****   /** Configure the ADC multi-mode
  83:Src/adc.c     ****   */
  84:Src/adc.c     ****   multimode.Mode = ADC_MODE_INDEPENDENT;
 100              		.loc 1 84 0
 101 005c 1AA9     		add	r1, sp, #104
 102 005e 0023     		movs	r3, #0
 103 0060 41F80C3D 		str	r3, [r1, #-12]!
  85:Src/adc.c     ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 104              		.loc 1 85 0
 105 0064 2748     		ldr	r0, .L11
 106 0066 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 107              	.LVL3:
 108 006a 0028     		cmp	r0, #0
 109 006c 41D1     		bne	.L8
 110              	.L3:
  86:Src/adc.c     ****   {
  87:Src/adc.c     ****     Error_Handler();
  88:Src/adc.c     ****   }
  89:Src/adc.c     ****   /** Configure Regular Channel
  90:Src/adc.c     ****   */
  91:Src/adc.c     **** 	#if 1
  92:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_4;
 111              		.loc 1 92 0
 112 006e 264B     		ldr	r3, .L11+4
 113 0070 0F93     		str	r3, [sp, #60]
  93:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 114              		.loc 1 93 0
 115 0072 0623     		movs	r3, #6
 116 0074 1093     		str	r3, [sp, #64]
  94:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 117              		.loc 1 94 0
 118 0076 1193     		str	r3, [sp, #68]
  95:Src/adc.c     ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 119              		.loc 1 95 0
 120 0078 7F23     		movs	r3, #127
 121 007a 1293     		str	r3, [sp, #72]
  96:Src/adc.c     ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 122              		.loc 1 96 0
 123 007c 0423     		movs	r3, #4
 124 007e 1393     		str	r3, [sp, #76]
  97:Src/adc.c     ****   sConfig.Offset = 0;
 125              		.loc 1 97 0
 126 0080 0023     		movs	r3, #0
 127 0082 1493     		str	r3, [sp, #80]
  98:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 128              		.loc 1 98 0
 129 0084 0FA9     		add	r1, sp, #60
 130 0086 1F48     		ldr	r0, .L11
 131 0088 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 5


 132              	.LVL4:
 133 008c 0028     		cmp	r0, #0
 134 008e 33D1     		bne	.L9
 135              	.L4:
  99:Src/adc.c     ****   {
 100:Src/adc.c     ****     Error_Handler();
 101:Src/adc.c     ****   }
 102:Src/adc.c     **** 	#endif
 103:Src/adc.c     ****   /** Configure Injected Channel
 104:Src/adc.c     ****   */
 105:Src/adc.c     **** 
 106:Src/adc.c     **** 	#if 1 
 107:Src/adc.c     ****   sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 136              		.loc 1 107 0
 137 0090 1E4B     		ldr	r3, .L11+8
 138 0092 0093     		str	r3, [sp]
 108:Src/adc.c     ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 139              		.loc 1 108 0
 140 0094 0923     		movs	r3, #9
 141 0096 0193     		str	r3, [sp, #4]
 109:Src/adc.c     ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 142              		.loc 1 109 0
 143 0098 0323     		movs	r3, #3
 144 009a 0293     		str	r3, [sp, #8]
 110:Src/adc.c     ****   sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 145              		.loc 1 110 0
 146 009c 7F23     		movs	r3, #127
 147 009e 0393     		str	r3, [sp, #12]
 111:Src/adc.c     ****   sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 148              		.loc 1 111 0
 149 00a0 0423     		movs	r3, #4
 150 00a2 0493     		str	r3, [sp, #16]
 112:Src/adc.c     ****   sConfigInjected.InjectedOffset = 0;
 151              		.loc 1 112 0
 152 00a4 0023     		movs	r3, #0
 153 00a6 0593     		str	r3, [sp, #20]
 113:Src/adc.c     ****   sConfigInjected.InjectedNbrOfConversion = 1;
 154              		.loc 1 113 0
 155 00a8 0122     		movs	r2, #1
 156 00aa 0892     		str	r2, [sp, #32]
 114:Src/adc.c     ****   sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 157              		.loc 1 114 0
 158 00ac 8DF82430 		strb	r3, [sp, #36]
 115:Src/adc.c     ****   sConfigInjected.AutoInjectedConv = DISABLE;
 159              		.loc 1 115 0
 160 00b0 8DF82530 		strb	r3, [sp, #37]
 116:Src/adc.c     ****   sConfigInjected.QueueInjectedContext = DISABLE;
 161              		.loc 1 116 0
 162 00b4 8DF82630 		strb	r3, [sp, #38]
 117:Src/adc.c     ****   sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 163              		.loc 1 117 0
 164 00b8 8022     		movs	r2, #128
 165 00ba 0A92     		str	r2, [sp, #40]
 118:Src/adc.c     ****   sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 166              		.loc 1 118 0
 167 00bc 0B92     		str	r2, [sp, #44]
 119:Src/adc.c     ****   sConfigInjected.InjecOversamplingMode = DISABLE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 6


 168              		.loc 1 119 0
 169 00be 8DF83030 		strb	r3, [sp, #48]
 120:Src/adc.c     **** 	
 121:Src/adc.c     ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 170              		.loc 1 121 0
 171 00c2 6946     		mov	r1, sp
 172 00c4 0F48     		ldr	r0, .L11
 173 00c6 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 174              	.LVL5:
 175 00ca C0B9     		cbnz	r0, .L10
 176              	.L5:
 122:Src/adc.c     ****   {
 123:Src/adc.c     ****     Error_Handler();
 124:Src/adc.c     ****   }
 125:Src/adc.c     **** 	#endif
 126:Src/adc.c     **** 	
 127:Src/adc.c     **** //  if (HAL_ADCEx_EnableInjectedQueue(&hadc1) != HAL_OK)
 128:Src/adc.c     **** //  {
 129:Src/adc.c     **** //    Error_Handler();
 130:Src/adc.c     **** //  }
 131:Src/adc.c     ****   /* USER CODE BEGIN ADC1_Init 2 */
 132:Src/adc.c     **** 
 133:Src/adc.c     ****   /* USER CODE END ADC1_Init 2 */
 134:Src/adc.c     **** 
 135:Src/adc.c     **** 	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 177              		.loc 1 135 0
 178 00cc 0D4C     		ldr	r4, .L11
 179 00ce 7F21     		movs	r1, #127
 180 00d0 2046     		mov	r0, r4
 181 00d2 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 182              	.LVL6:
 136:Src/adc.c     **** 	factor = HAL_ADCEx_Calibration_GetValue(&hadc1,ADC_SINGLE_ENDED);
 183              		.loc 1 136 0
 184 00d6 7F21     		movs	r1, #127
 185 00d8 2046     		mov	r0, r4
 186 00da FFF7FEFF 		bl	HAL_ADCEx_Calibration_GetValue
 187              	.LVL7:
 137:Src/adc.c     **** 	HAL_ADCEx_Calibration_SetValue(&hadc1,ADC_SINGLE_ENDED,factor);
 188              		.loc 1 137 0
 189 00de 0246     		mov	r2, r0
 190 00e0 7F21     		movs	r1, #127
 191 00e2 2046     		mov	r0, r4
 192              	.LVL8:
 193 00e4 FFF7FEFF 		bl	HAL_ADCEx_Calibration_SetValue
 194              	.LVL9:
 138:Src/adc.c     **** 	
 139:Src/adc.c     **** 	
 140:Src/adc.c     **** 	
 141:Src/adc.c     **** }
 195              		.loc 1 141 0
 196 00e8 1AB0     		add	sp, sp, #104
 197              	.LCFI2:
 198              		.cfi_remember_state
 199              		.cfi_def_cfa_offset 8
 200              		@ sp needed
 201 00ea 10BD     		pop	{r4, pc}
 202              	.L7:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 7


 203              	.LCFI3:
 204              		.cfi_restore_state
 205              	.LBB2:
  80:Src/adc.c     ****   }
 206              		.loc 1 80 0
 207 00ec FFF7FEFF 		bl	Error_Handler
 208              	.LVL10:
 209 00f0 B4E7     		b	.L2
 210              	.L8:
 211              	.LBE2:
 212              	.LBB3:
  87:Src/adc.c     ****   }
 213              		.loc 1 87 0
 214 00f2 FFF7FEFF 		bl	Error_Handler
 215              	.LVL11:
 216 00f6 BAE7     		b	.L3
 217              	.L9:
 218              	.LBE3:
 219              	.LBB4:
 100:Src/adc.c     ****   }
 220              		.loc 1 100 0
 221 00f8 FFF7FEFF 		bl	Error_Handler
 222              	.LVL12:
 223 00fc C8E7     		b	.L4
 224              	.L10:
 225              	.LBE4:
 226              	.LBB5:
 123:Src/adc.c     ****   }
 227              		.loc 1 123 0
 228 00fe FFF7FEFF 		bl	Error_Handler
 229              	.LVL13:
 230 0102 E3E7     		b	.L5
 231              	.L12:
 232              		.align	2
 233              	.L11:
 234 0104 00000000 		.word	hadc1
 235 0108 1000C010 		.word	281018384
 236 010c 02003004 		.word	70254594
 237              	.LBE5:
 238              		.cfi_endproc
 239              	.LFE333:
 241              		.section	.text.MX_ADC2_Init,"ax",%progbits
 242              		.align	1
 243              		.global	MX_ADC2_Init
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu fpv4-sp-d16
 249              	MX_ADC2_Init:
 250              	.LFB334:
 142:Src/adc.c     **** 
 143:Src/adc.c     **** /**
 144:Src/adc.c     ****   * @brief ADC2 Initialization Function
 145:Src/adc.c     ****   * @param None
 146:Src/adc.c     ****   * @retval None
 147:Src/adc.c     ****   */
 148:Src/adc.c     ****  void MX_ADC2_Init(void)
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 8


 149:Src/adc.c     **** {
 251              		.loc 1 149 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 64
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255 0000 10B5     		push	{r4, lr}
 256              	.LCFI4:
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 4, -8
 259              		.cfi_offset 14, -4
 260 0002 90B0     		sub	sp, sp, #64
 261              	.LCFI5:
 262              		.cfi_def_cfa_offset 72
 150:Src/adc.c     **** 	int factor;
 151:Src/adc.c     **** 
 152:Src/adc.c     ****   /* USER CODE BEGIN ADC2_Init 0 */
 153:Src/adc.c     **** 
 154:Src/adc.c     ****   /* USER CODE END ADC2_Init 0 */
 155:Src/adc.c     **** 
 156:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig = {0};
 157:Src/adc.c     **** ADC_InjectionConfTypeDef sConfigInjected = {0};
 263              		.loc 1 157 0
 264 0004 3C22     		movs	r2, #60
 265 0006 0021     		movs	r1, #0
 266 0008 01A8     		add	r0, sp, #4
 267 000a FFF7FEFF 		bl	memset
 268              	.LVL14:
 158:Src/adc.c     ****   /* USER CODE BEGIN ADC2_Init 1 */
 159:Src/adc.c     **** 
 160:Src/adc.c     ****   /* USER CODE END ADC2_Init 1 */
 161:Src/adc.c     ****   /** Common config
 162:Src/adc.c     ****   */
 163:Src/adc.c     ****   hadc2.Instance = ADC2;
 269              		.loc 1 163 0
 270 000e 2A48     		ldr	r0, .L19
 271 0010 2A4B     		ldr	r3, .L19+4
 272 0012 0360     		str	r3, [r0]
 164:Src/adc.c     ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 273              		.loc 1 164 0
 274 0014 4FF44033 		mov	r3, #196608
 275 0018 4360     		str	r3, [r0, #4]
 165:Src/adc.c     ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 276              		.loc 1 165 0
 277 001a 0023     		movs	r3, #0
 278 001c 8360     		str	r3, [r0, #8]
 166:Src/adc.c     ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 279              		.loc 1 166 0
 280 001e C360     		str	r3, [r0, #12]
 167:Src/adc.c     ****   hadc2.Init.GainCompensation = 0;
 281              		.loc 1 167 0
 282 0020 0361     		str	r3, [r0, #16]
 168:Src/adc.c     ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 283              		.loc 1 168 0
 284 0022 4361     		str	r3, [r0, #20]
 169:Src/adc.c     ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 285              		.loc 1 169 0
 286 0024 0422     		movs	r2, #4
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 9


 287 0026 8261     		str	r2, [r0, #24]
 170:Src/adc.c     ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 288              		.loc 1 170 0
 289 0028 0377     		strb	r3, [r0, #28]
 171:Src/adc.c     ****   hadc2.Init.ContinuousConvMode = DISABLE;
 290              		.loc 1 171 0
 291 002a 4377     		strb	r3, [r0, #29]
 172:Src/adc.c     ****   hadc2.Init.NbrOfConversion = 1;
 292              		.loc 1 172 0
 293 002c 0122     		movs	r2, #1
 294 002e 0262     		str	r2, [r0, #32]
 173:Src/adc.c     ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 295              		.loc 1 173 0
 296 0030 80F82430 		strb	r3, [r0, #36]
 174:Src/adc.c     ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 297              		.loc 1 174 0
 298 0034 C362     		str	r3, [r0, #44]
 175:Src/adc.c     ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 299              		.loc 1 175 0
 300 0036 0363     		str	r3, [r0, #48]
 176:Src/adc.c     ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 301              		.loc 1 176 0
 302 0038 80F83830 		strb	r3, [r0, #56]
 177:Src/adc.c     ****   hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 303              		.loc 1 177 0
 304 003c C363     		str	r3, [r0, #60]
 178:Src/adc.c     ****   hadc2.Init.OversamplingMode = DISABLE;
 305              		.loc 1 178 0
 306 003e 80F84030 		strb	r3, [r0, #64]
 179:Src/adc.c     ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 307              		.loc 1 179 0
 308 0042 FFF7FEFF 		bl	HAL_ADC_Init
 309              	.LVL15:
 310 0046 80BB     		cbnz	r0, .L17
 311              	.L14:
 180:Src/adc.c     ****   {
 181:Src/adc.c     ****     Error_Handler();
 182:Src/adc.c     ****   }
 183:Src/adc.c     ****   /** Configure Regular Channel
 184:Src/adc.c     ****   */
 185:Src/adc.c     **** //  sConfig.Channel = ADC_CHANNEL_2;
 186:Src/adc.c     **** //  sConfig.Rank = ADC_REGULAR_RANK_1;
 187:Src/adc.c     **** //  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 188:Src/adc.c     **** //  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 189:Src/adc.c     **** //  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 190:Src/adc.c     **** //  sConfig.Offset = 0;
 191:Src/adc.c     **** //  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 192:Src/adc.c     **** //  {
 193:Src/adc.c     **** //    Error_Handler();
 194:Src/adc.c     **** //  }
 195:Src/adc.c     **** 	
 196:Src/adc.c     **** 	 sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 312              		.loc 1 196 0
 313 0048 1D4B     		ldr	r3, .L19+8
 314 004a 0193     		str	r3, [sp, #4]
 197:Src/adc.c     ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 315              		.loc 1 197 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 10


 316 004c 0923     		movs	r3, #9
 317 004e 0293     		str	r3, [sp, #8]
 198:Src/adc.c     ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 318              		.loc 1 198 0
 319 0050 0323     		movs	r3, #3
 320 0052 0393     		str	r3, [sp, #12]
 199:Src/adc.c     ****   sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 321              		.loc 1 199 0
 322 0054 7F23     		movs	r3, #127
 323 0056 0493     		str	r3, [sp, #16]
 200:Src/adc.c     ****   sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 324              		.loc 1 200 0
 325 0058 0423     		movs	r3, #4
 326 005a 0593     		str	r3, [sp, #20]
 201:Src/adc.c     ****   sConfigInjected.InjectedOffset = 0;
 327              		.loc 1 201 0
 328 005c 0023     		movs	r3, #0
 329 005e 0693     		str	r3, [sp, #24]
 202:Src/adc.c     ****   sConfigInjected.InjectedNbrOfConversion = 1;
 330              		.loc 1 202 0
 331 0060 0122     		movs	r2, #1
 332 0062 0992     		str	r2, [sp, #36]
 203:Src/adc.c     ****   sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 333              		.loc 1 203 0
 334 0064 8DF82830 		strb	r3, [sp, #40]
 204:Src/adc.c     ****   sConfigInjected.AutoInjectedConv = DISABLE;
 335              		.loc 1 204 0
 336 0068 8DF82930 		strb	r3, [sp, #41]
 205:Src/adc.c     ****   sConfigInjected.QueueInjectedContext = DISABLE;
 337              		.loc 1 205 0
 338 006c 8DF82A30 		strb	r3, [sp, #42]
 206:Src/adc.c     ****   sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 339              		.loc 1 206 0
 340 0070 8022     		movs	r2, #128
 341 0072 0B92     		str	r2, [sp, #44]
 207:Src/adc.c     ****   sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 342              		.loc 1 207 0
 343 0074 0C92     		str	r2, [sp, #48]
 208:Src/adc.c     ****   sConfigInjected.InjecOversamplingMode = DISABLE;
 344              		.loc 1 208 0
 345 0076 8DF83430 		strb	r3, [sp, #52]
 209:Src/adc.c     ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 346              		.loc 1 209 0
 347 007a 01A9     		add	r1, sp, #4
 348 007c 0E48     		ldr	r0, .L19
 349 007e FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 350              	.LVL16:
 351 0082 A8B9     		cbnz	r0, .L18
 352              	.L15:
 210:Src/adc.c     ****   {
 211:Src/adc.c     ****     Error_Handler();
 212:Src/adc.c     ****   }
 213:Src/adc.c     ****   /* USER CODE BEGIN ADC2_Init 2 */
 214:Src/adc.c     **** 
 215:Src/adc.c     ****   /* USER CODE END ADC2_Init 2 */
 216:Src/adc.c     **** 
 217:Src/adc.c     **** 	
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 11


 218:Src/adc.c     **** 	HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED);
 353              		.loc 1 218 0
 354 0084 0C4C     		ldr	r4, .L19
 355 0086 7F21     		movs	r1, #127
 356 0088 2046     		mov	r0, r4
 357 008a FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 358              	.LVL17:
 219:Src/adc.c     **** 	factor = HAL_ADCEx_Calibration_GetValue(&hadc2,ADC_SINGLE_ENDED);
 359              		.loc 1 219 0
 360 008e 7F21     		movs	r1, #127
 361 0090 2046     		mov	r0, r4
 362 0092 FFF7FEFF 		bl	HAL_ADCEx_Calibration_GetValue
 363              	.LVL18:
 220:Src/adc.c     **** 	HAL_ADCEx_Calibration_SetValue(&hadc2,ADC_SINGLE_ENDED,factor);
 364              		.loc 1 220 0
 365 0096 0246     		mov	r2, r0
 366 0098 7F21     		movs	r1, #127
 367 009a 2046     		mov	r0, r4
 368              	.LVL19:
 369 009c FFF7FEFF 		bl	HAL_ADCEx_Calibration_SetValue
 370              	.LVL20:
 221:Src/adc.c     **** 	
 222:Src/adc.c     **** 		HAL_ADCEx_InjectedStart(&hadc2);
 371              		.loc 1 222 0
 372 00a0 2046     		mov	r0, r4
 373 00a2 FFF7FEFF 		bl	HAL_ADCEx_InjectedStart
 374              	.LVL21:
 223:Src/adc.c     **** }
 375              		.loc 1 223 0
 376 00a6 10B0     		add	sp, sp, #64
 377              	.LCFI6:
 378              		.cfi_remember_state
 379              		.cfi_def_cfa_offset 8
 380              		@ sp needed
 381 00a8 10BD     		pop	{r4, pc}
 382              	.L17:
 383              	.LCFI7:
 384              		.cfi_restore_state
 385              	.LBB6:
 181:Src/adc.c     ****   }
 386              		.loc 1 181 0
 387 00aa FFF7FEFF 		bl	Error_Handler
 388              	.LVL22:
 389 00ae CBE7     		b	.L14
 390              	.L18:
 391              	.LBE6:
 392              	.LBB7:
 211:Src/adc.c     ****   }
 393              		.loc 1 211 0
 394 00b0 FFF7FEFF 		bl	Error_Handler
 395              	.LVL23:
 396 00b4 E6E7     		b	.L15
 397              	.L20:
 398 00b6 00BF     		.align	2
 399              	.L19:
 400 00b8 00000000 		.word	hadc2
 401 00bc 00010050 		.word	1342177536
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 12


 402 00c0 04006008 		.word	140509188
 403              	.LBE7:
 404              		.cfi_endproc
 405              	.LFE334:
 407              		.section	.text.get_average_forceSensor_adc,"ax",%progbits
 408              		.align	1
 409              		.global	get_average_forceSensor_adc
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 413              		.fpu fpv4-sp-d16
 415              	get_average_forceSensor_adc:
 416              	.LFB336:
 224:Src/adc.c     **** 
 225:Src/adc.c     **** 
 226:Src/adc.c     **** 
 227:Src/adc.c     **** 
 228:Src/adc.c     **** 
 229:Src/adc.c     **** void start_temperature_adc(void)
 230:Src/adc.c     **** {
 231:Src/adc.c     **** 	HAL_ADC_Start(&hadc1);
 232:Src/adc.c     **** 	g_CmdMap[CMD_TEMP] = get_temperature_value(hadc1.Instance->DR);
 233:Src/adc.c     **** }
 234:Src/adc.c     **** 
 235:Src/adc.c     **** 
 236:Src/adc.c     **** 
 237:Src/adc.c     **** 
 238:Src/adc.c     **** 
 239:Src/adc.c     **** 
 240:Src/adc.c     **** 
 241:Src/adc.c     **** //ADC2->JDR3  g_CmdMap[CMD_YBP_ADC_12BIT]  g_CmdMap[CMD_FORCE_ACT_RAW_PU]  g_CmdMap[CMD_FORCE_ACT_P
 242:Src/adc.c     **** void get_average_forceSensor_adc(void)
 243:Src/adc.c     **** {
 417              		.loc 1 243 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 422 0000 10B4     		push	{r4}
 423              	.LCFI8:
 424              		.cfi_def_cfa_offset 4
 425              		.cfi_offset 4, -4
 426              	.LVL24:
 244:Src/adc.c     **** 	s16 data_in=0,data_out=0;	
 245:Src/adc.c     **** 	data_in = ADC2->JDR2;
 427              		.loc 1 245 0
 428 0002 144B     		ldr	r3, .L23
 429 0004 D3F88420 		ldr	r2, [r3, #132]
 430 0008 12B2     		sxth	r2, r2
 431              	.LVL25:
 246:Src/adc.c     **** 	data_out = YBP_Array[index_YBP_Array];
 432              		.loc 1 246 0
 433 000a 1349     		ldr	r1, .L23+4
 434 000c 0B88     		ldrh	r3, [r1]
 435 000e 9BB2     		uxth	r3, r3
 436 0010 124C     		ldr	r4, .L23+8
 437 0012 34F81300 		ldrh	r0, [r4, r3, lsl #1]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 13


 438 0016 00B2     		sxth	r0, r0
 439              	.LVL26:
 247:Src/adc.c     **** 	YBP_Array[index_YBP_Array] = data_in;
 440              		.loc 1 247 0
 441 0018 0B88     		ldrh	r3, [r1]
 442 001a 9BB2     		uxth	r3, r3
 443 001c 24F81320 		strh	r2, [r4, r3, lsl #1]	@ movhi
 248:Src/adc.c     **** 	index_YBP_Array= (index_YBP_Array + 1)%YBP_ARRAY_SIZE;
 444              		.loc 1 248 0
 445 0020 0B88     		ldrh	r3, [r1]
 446 0022 0133     		adds	r3, r3, #1
 447 0024 5C42     		rsbs	r4, r3, #0
 448 0026 03F00703 		and	r3, r3, #7
 449 002a 04F00704 		and	r4, r4, #7
 450 002e 58BF     		it	pl
 451 0030 6342     		rsbpl	r3, r4, #0
 452 0032 9BB2     		uxth	r3, r3
 453 0034 0B80     		strh	r3, [r1]	@ movhi
 249:Src/adc.c     **** 	YBP_Sum = YBP_Sum - data_out + data_in;
 454              		.loc 1 249 0
 455 0036 0A4B     		ldr	r3, .L23+12
 456 0038 1968     		ldr	r1, [r3]
 457 003a 091A     		subs	r1, r1, r0
 458 003c 0A44     		add	r2, r2, r1
 459              	.LVL27:
 460 003e 1A60     		str	r2, [r3]
 250:Src/adc.c     **** 	g_CmdMap[CMD_YBP_ADC_12BIT] = YBP_Sum>>YBP_ARRAY_BIT;	
 461              		.loc 1 250 0
 462 0040 1B68     		ldr	r3, [r3]
 463 0042 43F3CF03 		sbfx	r3, r3, #3, #16
 464 0046 074A     		ldr	r2, .L23+16
 465 0048 A2F86830 		strh	r3, [r2, #104]	@ movhi
 251:Src/adc.c     **** }
 466              		.loc 1 251 0
 467 004c 5DF8044B 		ldr	r4, [sp], #4
 468              	.LCFI9:
 469              		.cfi_restore 4
 470              		.cfi_def_cfa_offset 0
 471 0050 7047     		bx	lr
 472              	.L24:
 473 0052 00BF     		.align	2
 474              	.L23:
 475 0054 00010050 		.word	1342177536
 476 0058 00000000 		.word	.LANCHOR0
 477 005c 00000000 		.word	.LANCHOR1
 478 0060 00000000 		.word	.LANCHOR2
 479 0064 00000000 		.word	g_CmdMap
 480              		.cfi_endproc
 481              	.LFE336:
 483              		.global	__aeabi_ldivmod
 484              		.section	.text.get_average_force_data,"ax",%progbits
 485              		.align	1
 486              		.global	get_average_force_data
 487              		.syntax unified
 488              		.thumb
 489              		.thumb_func
 490              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 14


 492              	get_average_force_data:
 493              	.LFB337:
 252:Src/adc.c     **** void get_average_force_data(void)
 253:Src/adc.c     **** {
 494              		.loc 1 253 0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498 0000 38B5     		push	{r3, r4, r5, lr}
 499              	.LCFI10:
 500              		.cfi_def_cfa_offset 16
 501              		.cfi_offset 3, -16
 502              		.cfi_offset 4, -12
 503              		.cfi_offset 5, -8
 504              		.cfi_offset 14, -4
 505              	.LVL28:
 254:Src/adc.c     **** 	s16 force_act_raw_pu = 0,data_in=0,data_out=0;
 255:Src/adc.c     **** 	if(g_CmdMap[SYS_YBP_ADC_DIR] == 0)
 506              		.loc 1 255 0
 507 0002 2C4B     		ldr	r3, .L32
 508 0004 B3F89A32 		ldrh	r3, [r3, #666]
 509 0008 1BB2     		sxth	r3, r3
 510 000a 002B     		cmp	r3, #0
 511 000c 39D1     		bne	.L26
 256:Src/adc.c     **** 	{
 257:Src/adc.c     **** 		force_act_raw_pu = ((int64_t)(g_CmdMap[CMD_YBP_ADC_12BIT] - g_CmdMap[SYS_YBP_BASE_VALUE_12BIT])*1
 512              		.loc 1 257 0
 513 000e 294B     		ldr	r3, .L32
 514 0010 B3F86810 		ldrh	r1, [r3, #104]
 515 0014 09B2     		sxth	r1, r1
 516 0016 B3F89622 		ldrh	r2, [r3, #662]
 517 001a 12B2     		sxth	r2, r2
 518 001c 891A     		subs	r1, r1, r2
 519 001e CD17     		asrs	r5, r1, #31
 520 0020 AC03     		lsls	r4, r5, #14
 521 0022 B3F89822 		ldrh	r2, [r3, #664]
 522 0026 12B2     		sxth	r2, r2
 523 0028 D317     		asrs	r3, r2, #31
 524 002a 8803     		lsls	r0, r1, #14
 525 002c 44EA9141 		orr	r1, r4, r1, lsr #18
 526 0030 FFF7FEFF 		bl	__aeabi_ldivmod
 527              	.LVL29:
 528 0034 00B2     		sxth	r0, r0
 529              	.LVL30:
 530              	.L27:
 258:Src/adc.c     **** 	}
 259:Src/adc.c     **** 	else
 260:Src/adc.c     **** 	{
 261:Src/adc.c     **** 		force_act_raw_pu = ((int64_t)(g_CmdMap[SYS_YBP_BASE_VALUE_12BIT] - g_CmdMap[CMD_YBP_ADC_12BIT])*1
 262:Src/adc.c     **** 	}
 263:Src/adc.c     **** 	//
 264:Src/adc.c     **** 	if(g_CmdMap[CMD_FORCE_DIR] == 0)
 531              		.loc 1 264 0
 532 0036 1F4B     		ldr	r3, .L32
 533 0038 5B8D     		ldrh	r3, [r3, #42]
 534 003a 1BB2     		sxth	r3, r3
 535 003c 002B     		cmp	r3, #0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 15


 536 003e 35D0     		beq	.L31
 265:Src/adc.c     **** 	{
 266:Src/adc.c     **** 		g_CmdMap[CMD_FORCE_ACT_RAW_PU] = force_act_raw_pu;
 267:Src/adc.c     **** 	}
 268:Src/adc.c     **** 	else
 269:Src/adc.c     **** 	{
 270:Src/adc.c     **** 		g_CmdMap[CMD_FORCE_ACT_RAW_PU] = 0-force_act_raw_pu;
 537              		.loc 1 270 0
 538 0040 4042     		negs	r0, r0
 539              	.LVL31:
 540 0042 00B2     		sxth	r0, r0
 541 0044 1B4B     		ldr	r3, .L32
 542 0046 A3F85A00 		strh	r0, [r3, #90]	@ movhi
 543              	.L29:
 271:Src/adc.c     **** 	}	
 272:Src/adc.c     **** 	data_in = g_CmdMap[CMD_FORCE_ACT_RAW_PU];
 544              		.loc 1 272 0
 545 004a 1A4C     		ldr	r4, .L32
 546 004c B4F85A30 		ldrh	r3, [r4, #90]
 547              	.LVL32:
 273:Src/adc.c     **** 	data_out = force_Array[index_force_Array];
 548              		.loc 1 273 0
 549 0050 194A     		ldr	r2, .L32+4
 550 0052 1188     		ldrh	r1, [r2]
 551 0054 89B2     		uxth	r1, r1
 552 0056 194D     		ldr	r5, .L32+8
 553 0058 35F81110 		ldrh	r1, [r5, r1, lsl #1]
 554 005c 08B2     		sxth	r0, r1
 555              	.LVL33:
 274:Src/adc.c     **** 	force_Array[index_force_Array] = data_in;
 556              		.loc 1 274 0
 557 005e 1188     		ldrh	r1, [r2]
 558              	.LVL34:
 559 0060 89B2     		uxth	r1, r1
 560 0062 25F81130 		strh	r3, [r5, r1, lsl #1]	@ movhi
 275:Src/adc.c     **** 	index_force_Array= (index_force_Array + 1)%FORCE_ARRAY_SIZE;
 561              		.loc 1 275 0
 562 0066 1188     		ldrh	r1, [r2]
 563 0068 0021     		movs	r1, #0
 564 006a 1180     		strh	r1, [r2]	@ movhi
 276:Src/adc.c     **** 	force_Sum = force_Sum - data_out + data_in;
 565              		.loc 1 276 0
 566 006c 144A     		ldr	r2, .L32+12
 567 006e 1168     		ldr	r1, [r2]
 568 0070 091A     		subs	r1, r1, r0
 569 0072 01FA83F3 		sxtah	r3, r1, r3
 570              	.LVL35:
 571 0076 1360     		str	r3, [r2]
 277:Src/adc.c     **** 	g_CmdMap[CMD_FORCE_ACT_PU] = force_Sum>>FORCE_ARRAY_BIT;
 572              		.loc 1 277 0
 573 0078 1368     		ldr	r3, [r2]
 574 007a 1BB2     		sxth	r3, r3
 575 007c A4F85230 		strh	r3, [r4, #82]	@ movhi
 278:Src/adc.c     **** }
 576              		.loc 1 278 0
 577 0080 38BD     		pop	{r3, r4, r5, pc}
 578              	.LVL36:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 16


 579              	.L26:
 261:Src/adc.c     **** 	}
 580              		.loc 1 261 0
 581 0082 0C4B     		ldr	r3, .L32
 582 0084 B3F89612 		ldrh	r1, [r3, #662]
 583 0088 09B2     		sxth	r1, r1
 584 008a B3F86820 		ldrh	r2, [r3, #104]
 585 008e 12B2     		sxth	r2, r2
 586 0090 891A     		subs	r1, r1, r2
 587 0092 CD17     		asrs	r5, r1, #31
 588 0094 AC03     		lsls	r4, r5, #14
 589 0096 B3F89822 		ldrh	r2, [r3, #664]
 590 009a 12B2     		sxth	r2, r2
 591 009c D317     		asrs	r3, r2, #31
 592 009e 8803     		lsls	r0, r1, #14
 593 00a0 44EA9141 		orr	r1, r4, r1, lsr #18
 594 00a4 FFF7FEFF 		bl	__aeabi_ldivmod
 595              	.LVL37:
 596 00a8 00B2     		sxth	r0, r0
 597              	.LVL38:
 598 00aa C4E7     		b	.L27
 599              	.L31:
 266:Src/adc.c     **** 	}
 600              		.loc 1 266 0
 601 00ac 014B     		ldr	r3, .L32
 602 00ae A3F85A00 		strh	r0, [r3, #90]	@ movhi
 603 00b2 CAE7     		b	.L29
 604              	.L33:
 605              		.align	2
 606              	.L32:
 607 00b4 00000000 		.word	g_CmdMap
 608 00b8 00000000 		.word	.LANCHOR3
 609 00bc 00000000 		.word	.LANCHOR4
 610 00c0 00000000 		.word	.LANCHOR5
 611              		.cfi_endproc
 612              	.LFE337:
 614              		.section	.text.ADC1_2_IRQHandler,"ax",%progbits
 615              		.align	1
 616              		.global	ADC1_2_IRQHandler
 617              		.syntax unified
 618              		.thumb
 619              		.thumb_func
 620              		.fpu fpv4-sp-d16
 622              	ADC1_2_IRQHandler:
 623              	.LFB338:
 279:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ø¹ï¿½
 280:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 281:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½Ä£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 282:Src/adc.c     **** void ADC1_2_IRQHandler(void)////ADC3_JEOCï¿½Ð¶ï¿½     Ö´ï¿½ï¿½Æµï¿½ï¿½ï¿½ï¿½PWMÆµï¿½ï¿½ï¿½ï¿½Í¬
 283:Src/adc.c     **** { 
 624              		.loc 1 283 0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628 0000 08B5     		push	{r3, lr}
 629              	.LCFI11:
 630              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 17


 631              		.cfi_offset 3, -8
 632              		.cfi_offset 14, -4
 284:Src/adc.c     ****   if( __HAL_ADC_GET_IT_SOURCE(&hadc1,ADC_IT_JEOS)!=RESET)
 633              		.loc 1 284 0
 634 0002 0A4B     		ldr	r3, .L38
 635 0004 1B68     		ldr	r3, [r3]
 636 0006 5B68     		ldr	r3, [r3, #4]
 637 0008 13F0400F 		tst	r3, #64
 638 000c 00D1     		bne	.L37
 639              	.L34:
 285:Src/adc.c     **** 	 {
 286:Src/adc.c     **** 		 HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 287:Src/adc.c     **** //		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 288:Src/adc.c     **** 			ADC1->ISR |= (u32)ADC_FLAG_JEOC; 
 289:Src/adc.c     **** 			ServoPro_Fast();
 290:Src/adc.c     **** //			get_average_forceSensor_adc();
 291:Src/adc.c     **** //		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 292:Src/adc.c     **** 	 }
 293:Src/adc.c     **** }
 640              		.loc 1 293 0
 641 000e 08BD     		pop	{r3, pc}
 642              	.L37:
 286:Src/adc.c     **** //		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 643              		.loc 1 286 0
 644 0010 4021     		movs	r1, #64
 645 0012 4FF09040 		mov	r0, #1207959552
 646 0016 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 647              	.LVL39:
 288:Src/adc.c     **** 			ServoPro_Fast();
 648              		.loc 1 288 0
 649 001a 4FF0A042 		mov	r2, #1342177280
 650 001e 1368     		ldr	r3, [r2]
 651 0020 43F02003 		orr	r3, r3, #32
 652 0024 1360     		str	r3, [r2]
 289:Src/adc.c     **** //			get_average_forceSensor_adc();
 653              		.loc 1 289 0
 654 0026 FFF7FEFF 		bl	ServoPro_Fast
 655              	.LVL40:
 656              		.loc 1 293 0
 657 002a F0E7     		b	.L34
 658              	.L39:
 659              		.align	2
 660              	.L38:
 661 002c 00000000 		.word	hadc1
 662              		.cfi_endproc
 663              	.LFE338:
 665              		.section	.text.Get_VOLT_Filter,"ax",%progbits
 666              		.align	1
 667              		.global	Get_VOLT_Filter
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 671              		.fpu fpv4-sp-d16
 673              	Get_VOLT_Filter:
 674              	.LFB339:
 294:Src/adc.c     **** s32 Get_VOLT_Filter(void) //Flag_VOLT_ADC_Array_Filled==1Ê±Ö´ï¿½ï¿½
 295:Src/adc.c     **** {
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 18


 675              		.loc 1 295 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679              		@ link register save eliminated.
 680              	.LVL41:
 296:Src/adc.c     **** 	s16 i = 0;
 297:Src/adc.c     **** 	s32 sum = 0;
 298:Src/adc.c     **** 	Flag_TEMP_ADC_Array_Filled = 0;
 681              		.loc 1 298 0
 682 0000 0023     		movs	r3, #0
 683 0002 0E4A     		ldr	r2, .L43
 684 0004 1370     		strb	r3, [r2]
 299:Src/adc.c     **** 	sum = 0;
 685              		.loc 1 299 0
 686 0006 1A46     		mov	r2, r3
 300:Src/adc.c     **** 	for(i=0;i<VOLT_SAMPNUM;i++)
 687              		.loc 1 300 0
 688 0008 06E0     		b	.L41
 689              	.LVL42:
 690              	.L42:
 301:Src/adc.c     **** 	{
 302:Src/adc.c     **** 		sum = sum + VOLT_ADC_Array[i];
 691              		.loc 1 302 0 discriminator 3
 692 000a 0D49     		ldr	r1, .L43+4
 693 000c 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 694 0010 02FA81F2 		sxtah	r2, r2, r1
 695              	.LVL43:
 300:Src/adc.c     **** 	for(i=0;i<VOLT_SAMPNUM;i++)
 696              		.loc 1 300 0 discriminator 3
 697 0014 0133     		adds	r3, r3, #1
 698              	.LVL44:
 699 0016 1BB2     		sxth	r3, r3
 700              	.LVL45:
 701              	.L41:
 300:Src/adc.c     **** 	for(i=0;i<VOLT_SAMPNUM;i++)
 702              		.loc 1 300 0 is_stmt 0 discriminator 1
 703 0018 132B     		cmp	r3, #19
 704 001a F6DD     		ble	.L42
 303:Src/adc.c     **** 	}
 304:Src/adc.c     **** 	VOLT_Filter = (800*sum)/(VOLT_SAMPNUM*905);
 705              		.loc 1 304 0 is_stmt 1
 706 001c 4FF44873 		mov	r3, #800
 707              	.LVL46:
 708 0020 03FB02F2 		mul	r2, r3, r2
 709              	.LVL47:
 710 0024 074B     		ldr	r3, .L43+8
 711 0026 83FB0213 		smull	r1, r3, r3, r2
 712 002a D217     		asrs	r2, r2, #31
 713 002c C2EB6333 		rsb	r3, r2, r3, asr #13
 714 0030 1BB2     		sxth	r3, r3
 715 0032 054A     		ldr	r2, .L43+12
 716 0034 1380     		strh	r3, [r2]	@ movhi
 305:Src/adc.c     **** 	return VOLT_Filter;
 717              		.loc 1 305 0
 718 0036 1088     		ldrh	r0, [r2]
 306:Src/adc.c     **** }
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 19


 719              		.loc 1 306 0
 720 0038 00B2     		sxth	r0, r0
 721 003a 7047     		bx	lr
 722              	.L44:
 723              		.align	2
 724              	.L43:
 725 003c 00000000 		.word	.LANCHOR6
 726 0040 00000000 		.word	.LANCHOR7
 727 0044 5960DD73 		.word	1943887961
 728 0048 00000000 		.word	.LANCHOR8
 729              		.cfi_endproc
 730              	.LFE339:
 732              		.section	.text.pos_linearity_ini,"ax",%progbits
 733              		.align	1
 734              		.global	pos_linearity_ini
 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 738              		.fpu fpv4-sp-d16
 740              	pos_linearity_ini:
 741              	.LFB340:
 307:Src/adc.c     **** //ADC ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½ï¿½ï¿½ï¿½ï¿½Ä¬ï¿½Ï²ï¿½ï¿½ï¿½ 700-3700 ï¿½ï¿½ 0 - 16384ï¿½ï¿½ï¿½Ô
 308:Src/adc.c     **** void pos_linearity_ini(void)
 309:Src/adc.c     **** {
 742              		.loc 1 309 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746              		@ link register save eliminated.
 747              	.LVL48:
 310:Src/adc.c     **** 	s16 i = 0;
 311:Src/adc.c     **** 	for(i=0;i<NUM_LINEARITY_SEG;i++)
 748              		.loc 1 311 0
 749 0000 0022     		movs	r2, #0
 750              	.LVL49:
 751 0002 BD2A     		cmp	r2, #189
 752 0004 23DC     		bgt	.L51
 309:Src/adc.c     **** 	s16 i = 0;
 753              		.loc 1 309 0
 754 0006 30B4     		push	{r4, r5}
 755              	.LCFI12:
 756              		.cfi_def_cfa_offset 8
 757              		.cfi_offset 4, -8
 758              		.cfi_offset 5, -4
 759              	.L47:
 312:Src/adc.c     **** 	{
 313:Src/adc.c     **** 		L_Slop_Array[i] = (((int32_t)(g_CmdMap[POS_LINEARITY_PU(i+1)] - g_CmdMap[POS_LINEARITY_PU(i)]))<<
 760              		.loc 1 313 0 discriminator 3
 761 0008 02F1B901 		add	r1, r2, #185
 762 000c 4900     		lsls	r1, r1, #1
 763 000e 4B1C     		adds	r3, r1, #1
 764 0010 0F48     		ldr	r0, .L52
 765 0012 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 766 0016 1BB2     		sxth	r3, r3
 767 0018 02F1B804 		add	r4, r2, #184
 768 001c 6400     		lsls	r4, r4, #1
 769 001e 651C     		adds	r5, r4, #1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 20


 770 0020 30F81550 		ldrh	r5, [r0, r5, lsl #1]
 771 0024 2DB2     		sxth	r5, r5
 772 0026 5B1B     		subs	r3, r3, r5
 773 0028 9B02     		lsls	r3, r3, #10
 774 002a 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 775 002e 09B2     		sxth	r1, r1
 776 0030 30F81400 		ldrh	r0, [r0, r4, lsl #1]
 777 0034 00B2     		sxth	r0, r0
 778 0036 091A     		subs	r1, r1, r0
 779 0038 93FBF1F3 		sdiv	r3, r3, r1
 780 003c 0549     		ldr	r1, .L52+4
 781 003e 41F82230 		str	r3, [r1, r2, lsl #2]
 311:Src/adc.c     **** 	{
 782              		.loc 1 311 0 discriminator 3
 783 0042 0132     		adds	r2, r2, #1
 784              	.LVL50:
 785 0044 12B2     		sxth	r2, r2
 786              	.LVL51:
 787 0046 BD2A     		cmp	r2, #189
 788 0048 DEDD     		ble	.L47
 314:Src/adc.c     **** 	}
 315:Src/adc.c     **** }
 789              		.loc 1 315 0
 790 004a 30BC     		pop	{r4, r5}
 791              	.LCFI13:
 792              		.cfi_restore 5
 793              		.cfi_restore 4
 794              		.cfi_def_cfa_offset 0
 795 004c 7047     		bx	lr
 796              	.L51:
 797 004e 7047     		bx	lr
 798              	.L53:
 799              		.align	2
 800              	.L52:
 801 0050 00000000 		.word	g_CmdMap
 802 0054 00000000 		.word	L_Slop_Array
 803              		.cfi_endproc
 804              	.LFE340:
 806              		.section	.text.Pos_Correct,"ax",%progbits
 807              		.align	1
 808              		.global	Pos_Correct
 809              		.syntax unified
 810              		.thumb
 811              		.thumb_func
 812              		.fpu fpv4-sp-d16
 814              	Pos_Correct:
 815              	.LFB341:
 316:Src/adc.c     **** ////ADC ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½ï¿½ï¿½ï¿½ï¿½Ä¬ï¿½Ï²ï¿½ï¿½ï¿½ 700-3700 ï¿½ï¿½ 0 - 16384ï¿½ï¿½ï¿
 317:Src/adc.c     **** //void pos_linearity_set_default(void)
 318:Src/adc.c     **** //{
 319:Src/adc.c     **** //	s16 i = 0;
 320:Src/adc.c     **** //	for(i = 0;i < 31;i++)
 321:Src/adc.c     **** //	{
 322:Src/adc.c     **** //			g_CmdMap[POS_LINEARITY_ADC(i)]	= 700 + 90*i;	//Ì¼Ä¤ADCï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµã£¬ADCï¿½ï¿½Öµ
 323:Src/adc.c     **** //			g_CmdMap[POS_LINEARITY_PU(i)] 	= 0 + 16384*i/30;	//Ì¼Ä¤ADCï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµã£¬Êµï¿½ï¿½ï¿½Ð³
 324:Src/adc.c     **** //	}
 325:Src/adc.c     **** //	for(i=0;i<=29;i++)
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 21


 326:Src/adc.c     **** //	{
 327:Src/adc.c     **** //		L_Slop_Array[i] = (((int32_t)(g_CmdMap[POS_LINEARITY_PU(i+1)] - g_CmdMap[POS_LINEARITY_PU(i)]))
 328:Src/adc.c     **** //	}
 329:Src/adc.c     **** //}
 330:Src/adc.c     **** s16 Pos_Corrected_last = 0;
 331:Src/adc.c     **** s16 MU_Value_error_cnt = 0;
 332:Src/adc.c     **** s16 index_pos_array = 0;
 333:Src/adc.c     **** s16 pos_array[128] = {0};
 334:Src/adc.c     **** s32 pos_sum = 0;
 335:Src/adc.c     **** s16 pos_filterd = 0;
 336:Src/adc.c     **** s16 pos_valid = 0;
 337:Src/adc.c     **** int32_t Pos_Correct(int32_t Pos_Org)
 338:Src/adc.c     **** {
 816              		.loc 1 338 0
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 0
 819              		@ frame_needed = 0, uses_anonymous_args = 0
 820              		@ link register save eliminated.
 821              	.LVL52:
 822 0000 30B4     		push	{r4, r5}
 823              	.LCFI14:
 824              		.cfi_def_cfa_offset 8
 825              		.cfi_offset 4, -8
 826              		.cfi_offset 5, -4
 827              	.LVL53:
 339:Src/adc.c     **** 	s32 slopTotall = 0;
 340:Src/adc.c     **** 	s16 in_data,out_data;
 341:Src/adc.c     **** 	int32_t Pos_Corrected = 0;
 342:Src/adc.c     **** 	int32_t Index_A,Index_B = 0;
 343:Src/adc.c     **** 	s16 i = 0;
 344:Src/adc.c     **** 	if(Pos_Org>=g_CmdMap[POS_LINEARITY_ADC(0)] && Pos_Org<g_CmdMap[POS_LINEARITY_ADC(NUM_LINEARITY_SEG
 828              		.loc 1 344 0
 829 0002 4E4B     		ldr	r3, .L68
 830 0004 B3F8E032 		ldrh	r3, [r3, #736]
 831 0008 1BB2     		sxth	r3, r3
 832 000a 8342     		cmp	r3, r0
 833 000c 5ADC     		bgt	.L55
 834              		.loc 1 344 0 is_stmt 0 discriminator 1
 835 000e 4B4B     		ldr	r3, .L68
 836 0010 B3F8D835 		ldrh	r3, [r3, #1496]
 837 0014 1BB2     		sxth	r3, r3
 838 0016 8342     		cmp	r3, r0
 839 0018 54DD     		ble	.L55
 345:Src/adc.c     **** 	{
 346:Src/adc.c     **** 		//ï¿½ï¿½ï¿½Ö·ï¿½
 347:Src/adc.c     **** 		Index_A = 0;Index_B = NUM_LINEARITY_SEG;
 840              		.loc 1 347 0 is_stmt 1
 841 001a BE21     		movs	r1, #190
 842 001c 0024     		movs	r4, #0
 843 001e 00E0     		b	.L57
 844              	.LVL54:
 845              	.L63:
 348:Src/adc.c     **** 		while(1)
 349:Src/adc.c     **** 		{
 350:Src/adc.c     **** 			if(Index_B-Index_A == 1)
 351:Src/adc.c     **** 			{
 352:Src/adc.c     **** 				break;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 22


 353:Src/adc.c     **** 			}
 354:Src/adc.c     **** 			i = (Index_A + Index_B)/2;
 355:Src/adc.c     **** 			if(Pos_Org<=g_CmdMap[POS_LINEARITY_ADC(i)])
 356:Src/adc.c     **** 			{
 357:Src/adc.c     **** 				Index_B = i;
 846              		.loc 1 357 0
 847 0020 1946     		mov	r1, r3
 848              	.LVL55:
 849              	.L57:
 350:Src/adc.c     **** 			{
 850              		.loc 1 350 0
 851 0022 0B1B     		subs	r3, r1, r4
 852 0024 012B     		cmp	r3, #1
 853 0026 0FD0     		beq	.L56
 354:Src/adc.c     **** 			if(Pos_Org<=g_CmdMap[POS_LINEARITY_ADC(i)])
 854              		.loc 1 354 0
 855 0028 6318     		adds	r3, r4, r1
 856 002a 03EBD373 		add	r3, r3, r3, lsr #31
 857 002e 43F34F03 		sbfx	r3, r3, #1, #16
 355:Src/adc.c     **** 			{
 858              		.loc 1 355 0
 859 0032 03F1B802 		add	r2, r3, #184
 860 0036 5200     		lsls	r2, r2, #1
 861 0038 404D     		ldr	r5, .L68
 862 003a 35F81220 		ldrh	r2, [r5, r2, lsl #1]
 863 003e 12B2     		sxth	r2, r2
 864 0040 8242     		cmp	r2, r0
 865 0042 EDDA     		bge	.L63
 358:Src/adc.c     **** 			}
 359:Src/adc.c     **** 			else
 360:Src/adc.c     **** 			{
 361:Src/adc.c     **** 				Index_A = i;
 866              		.loc 1 361 0
 867 0044 1C46     		mov	r4, r3
 868              	.LVL56:
 869 0046 ECE7     		b	.L57
 870              	.LVL57:
 871              	.L56:
 362:Src/adc.c     **** 			}
 363:Src/adc.c     **** 		}
 364:Src/adc.c     **** 		Pos_Corrected = (((int32_t)(Pos_Org - g_CmdMap[POS_LINEARITY_ADC(Index_A)])* L_Slop_Array[Index_A
 872              		.loc 1 364 0
 873 0048 04F1B803 		add	r3, r4, #184
 874 004c 5B00     		lsls	r3, r3, #1
 875 004e 3B49     		ldr	r1, .L68
 876              	.LVL58:
 877 0050 31F81320 		ldrh	r2, [r1, r3, lsl #1]
 878 0054 12B2     		sxth	r2, r2
 879 0056 801A     		subs	r0, r0, r2
 880              	.LVL59:
 881 0058 394A     		ldr	r2, .L68+4
 882 005a 52F82420 		ldr	r2, [r2, r4, lsl #2]
 883 005e 02FB00F2 		mul	r2, r2, r0
 884 0062 0133     		adds	r3, r3, #1
 885 0064 31F81300 		ldrh	r0, [r1, r3, lsl #1]
 886 0068 00B2     		sxth	r0, r0
 887 006a 00EBA220 		add	r0, r0, r2, asr #10
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 23


 888              	.LVL60:
 889              	.L59:
 365:Src/adc.c     **** 	}
 366:Src/adc.c     **** 	else if(Pos_Org<g_CmdMap[POS_LINEARITY_ADC(0)])
 367:Src/adc.c     **** 	{
 368:Src/adc.c     **** 		Pos_Corrected = Pos_Org-g_CmdMap[POS_LINEARITY_ADC(0)]; 
 369:Src/adc.c     **** 				if( Pos_Corrected < - 16384)
 370:Src/adc.c     **** 		{
 371:Src/adc.c     **** 			Pos_Corrected = -16384;
 372:Src/adc.c     **** 		}
 373:Src/adc.c     **** 	}	
 374:Src/adc.c     **** 	else
 375:Src/adc.c     **** 	{
 376:Src/adc.c     **** 			slopTotall = (((int32_t)(g_CmdMap[POS_LINEARITY_PU(NUM_LINEARITY_SEG)] - g_CmdMap[POS_LINEARITY_
 377:Src/adc.c     **** 			Pos_Corrected = (((int32_t)(Pos_Org - g_CmdMap[POS_LINEARITY_ADC(NUM_LINEARITY_SEG)])* slopTotal
 378:Src/adc.c     **** 			if( Pos_Corrected> 32767 )
 379:Src/adc.c     **** 			{
 380:Src/adc.c     **** 				Pos_Corrected = 32767;
 381:Src/adc.c     **** 			}
 382:Src/adc.c     **** 		
 383:Src/adc.c     **** 	}
 384:Src/adc.c     **** 	in_data = Pos_Corrected;
 890              		.loc 1 384 0
 891 006e 03B2     		sxth	r3, r0
 385:Src/adc.c     **** 	out_data = pos_array[index_pos_array];
 892              		.loc 1 385 0
 893 0070 344C     		ldr	r4, .L68+8
 894 0072 B4F90020 		ldrsh	r2, [r4]
 895 0076 3449     		ldr	r1, .L68+12
 896 0078 31F91250 		ldrsh	r5, [r1, r2, lsl #1]
 897              	.LVL61:
 386:Src/adc.c     **** 	pos_array[index_pos_array] = in_data;
 898              		.loc 1 386 0
 899 007c 21F81230 		strh	r3, [r1, r2, lsl #1]	@ movhi
 387:Src/adc.c     **** 	index_pos_array= (index_pos_array + 1)%128;
 900              		.loc 1 387 0
 901 0080 0132     		adds	r2, r2, #1
 902 0082 5142     		rsbs	r1, r2, #0
 903 0084 02F07F02 		and	r2, r2, #127
 904 0088 01F07F01 		and	r1, r1, #127
 905 008c 58BF     		it	pl
 906 008e 4A42     		rsbpl	r2, r1, #0
 907 0090 2280     		strh	r2, [r4]	@ movhi
 388:Src/adc.c     **** 	pos_sum = pos_sum - out_data + in_data;
 908              		.loc 1 388 0
 909 0092 2E49     		ldr	r1, .L68+16
 910 0094 0A68     		ldr	r2, [r1]
 911 0096 521B     		subs	r2, r2, r5
 912 0098 1344     		add	r3, r3, r2
 913 009a 0B60     		str	r3, [r1]
 389:Src/adc.c     **** 	pos_filterd = pos_sum>>7;
 914              		.loc 1 389 0
 915 009c 43F3CF13 		sbfx	r3, r3, #7, #16
 916 00a0 2B4A     		ldr	r2, .L68+20
 917 00a2 1380     		strh	r3, [r2]	@ movhi
 390:Src/adc.c     **** 	if(ABS(Pos_Corrected-pos_filterd)>8192)
 918              		.loc 1 390 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 24


 919 00a4 C31A     		subs	r3, r0, r3
 920 00a6 002B     		cmp	r3, #0
 921 00a8 B8BF     		it	lt
 922 00aa 5B42     		rsblt	r3, r3, #0
 923 00ac B3F5005F 		cmp	r3, #8192
 924 00b0 3BDC     		bgt	.L67
 391:Src/adc.c     **** 	{
 392:Src/adc.c     **** 		
 393:Src/adc.c     **** 		MU_Value_error_cnt++;
 394:Src/adc.c     **** 	//	if(MU_Value_error_cnt>10) while(1);
 395:Src/adc.c     **** 		return pos_valid;
 396:Src/adc.c     **** 	}
 397:Src/adc.c     **** 	else
 398:Src/adc.c     **** 	{
 399:Src/adc.c     **** 		pos_valid = Pos_Corrected - g_CmdMap[SYS_POS_OFFSET];
 925              		.loc 1 399 0
 926 00b2 224B     		ldr	r3, .L68
 927 00b4 B3F87E32 		ldrh	r3, [r3, #638]
 928 00b8 C01A     		subs	r0, r0, r3
 929              	.LVL62:
 930 00ba 00B2     		sxth	r0, r0
 931 00bc 254B     		ldr	r3, .L68+24
 932 00be 1880     		strh	r0, [r3]	@ movhi
 933              	.L54:
 400:Src/adc.c     **** 		return pos_valid;
 401:Src/adc.c     **** 	}	
 402:Src/adc.c     **** }
 934              		.loc 1 402 0
 935 00c0 30BC     		pop	{r4, r5}
 936              	.LCFI15:
 937              		.cfi_remember_state
 938              		.cfi_restore 5
 939              		.cfi_restore 4
 940              		.cfi_def_cfa_offset 0
 941              	.LVL63:
 942 00c2 7047     		bx	lr
 943              	.LVL64:
 944              	.L55:
 945              	.LCFI16:
 946              		.cfi_restore_state
 366:Src/adc.c     **** 	{
 947              		.loc 1 366 0
 948 00c4 1D4B     		ldr	r3, .L68
 949 00c6 B3F8E032 		ldrh	r3, [r3, #736]
 950 00ca 1BB2     		sxth	r3, r3
 951 00cc 8342     		cmp	r3, r0
 952 00ce 09DD     		ble	.L60
 368:Src/adc.c     **** 				if( Pos_Corrected < - 16384)
 953              		.loc 1 368 0
 954 00d0 1A4B     		ldr	r3, .L68
 955 00d2 B3F8E032 		ldrh	r3, [r3, #736]
 956 00d6 1BB2     		sxth	r3, r3
 957 00d8 C01A     		subs	r0, r0, r3
 958              	.LVL65:
 369:Src/adc.c     **** 		{
 959              		.loc 1 369 0
 960 00da 10F5804F 		cmn	r0, #16384
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 25


 961 00de C6DA     		bge	.L59
 371:Src/adc.c     **** 		}
 962              		.loc 1 371 0
 963 00e0 1D48     		ldr	r0, .L68+28
 964              	.LVL66:
 965 00e2 C4E7     		b	.L59
 966              	.LVL67:
 967              	.L60:
 376:Src/adc.c     **** 			Pos_Corrected = (((int32_t)(Pos_Org - g_CmdMap[POS_LINEARITY_ADC(NUM_LINEARITY_SEG)])* slopTotal
 968              		.loc 1 376 0
 969 00e4 154A     		ldr	r2, .L68
 970 00e6 B2F8DA35 		ldrh	r3, [r2, #1498]
 971 00ea 1BB2     		sxth	r3, r3
 972 00ec B2F8E212 		ldrh	r1, [r2, #738]
 973 00f0 09B2     		sxth	r1, r1
 974 00f2 5B1A     		subs	r3, r3, r1
 975 00f4 9B02     		lsls	r3, r3, #10
 976 00f6 B2F8D815 		ldrh	r1, [r2, #1496]
 977 00fa 09B2     		sxth	r1, r1
 978 00fc B2F8E042 		ldrh	r4, [r2, #736]
 979 0100 24B2     		sxth	r4, r4
 980 0102 091B     		subs	r1, r1, r4
 981 0104 93FBF1F3 		sdiv	r3, r3, r1
 982              	.LVL68:
 377:Src/adc.c     **** 			if( Pos_Corrected> 32767 )
 983              		.loc 1 377 0
 984 0108 B2F8D815 		ldrh	r1, [r2, #1496]
 985 010c 09B2     		sxth	r1, r1
 986 010e 401A     		subs	r0, r0, r1
 987              	.LVL69:
 988 0110 03FB00F0 		mul	r0, r3, r0
 989 0114 B2F8DA35 		ldrh	r3, [r2, #1498]
 990              	.LVL70:
 991 0118 1BB2     		sxth	r3, r3
 992 011a 03EBA020 		add	r0, r3, r0, asr #10
 993              	.LVL71:
 378:Src/adc.c     **** 			{
 994              		.loc 1 378 0
 995 011e B0F5004F 		cmp	r0, #32768
 996 0122 A4DB     		blt	.L59
 380:Src/adc.c     **** 			}
 997              		.loc 1 380 0
 998 0124 47F6FF70 		movw	r0, #32767
 999              	.LVL72:
 1000 0128 A1E7     		b	.L59
 1001              	.LVL73:
 1002              	.L67:
 393:Src/adc.c     **** 	//	if(MU_Value_error_cnt>10) while(1);
 1003              		.loc 1 393 0
 1004 012a 0C4A     		ldr	r2, .L68+32
 1005 012c 1388     		ldrh	r3, [r2]
 1006 012e 0133     		adds	r3, r3, #1
 1007 0130 1380     		strh	r3, [r2]	@ movhi
 395:Src/adc.c     **** 	}
 1008              		.loc 1 395 0
 1009 0132 084B     		ldr	r3, .L68+24
 1010 0134 B3F90000 		ldrsh	r0, [r3]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 26


 1011              	.LVL74:
 1012 0138 C2E7     		b	.L54
 1013              	.L69:
 1014 013a 00BF     		.align	2
 1015              	.L68:
 1016 013c 00000000 		.word	g_CmdMap
 1017 0140 00000000 		.word	L_Slop_Array
 1018 0144 00000000 		.word	.LANCHOR9
 1019 0148 00000000 		.word	.LANCHOR10
 1020 014c 00000000 		.word	.LANCHOR11
 1021 0150 00000000 		.word	.LANCHOR12
 1022 0154 00000000 		.word	.LANCHOR14
 1023 0158 00C0FFFF 		.word	-16384
 1024 015c 00000000 		.word	.LANCHOR13
 1025              		.cfi_endproc
 1026              	.LFE341:
 1028              		.section	.text.Get_Pos_Rod,"ax",%progbits
 1029              		.align	1
 1030              		.global	Get_Pos_Rod
 1031              		.syntax unified
 1032              		.thumb
 1033              		.thumb_func
 1034              		.fpu fpv4-sp-d16
 1036              	Get_Pos_Rod:
 1037              	.LFB342:
 403:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½ï¿½Æ¸ï¿½Ä©ï¿½ï¿½Î»ï¿½Ã£ï¿½ï¿½ï¿½Ïµï¿½ï¿½Ä©ï¿½Ë´Å±ï¿½ï¿½Åºï¿½ ï¿½ï¿½ Ì¼Ä¤Î»ï¿½ï¿½
 404:Src/adc.c     **** void Get_Pos_Rod(void)
 405:Src/adc.c     **** {
 1038              		.loc 1 405 0
 1039              		.cfi_startproc
 1040              		@ args = 0, pretend = 0, frame = 0
 1041              		@ frame_needed = 0, uses_anonymous_args = 0
 1042 0000 2DE97048 		push	{r4, r5, r6, fp, lr}
 1043              	.LCFI17:
 1044              		.cfi_def_cfa_offset 20
 1045              		.cfi_offset 4, -20
 1046              		.cfi_offset 5, -16
 1047              		.cfi_offset 6, -12
 1048              		.cfi_offset 11, -8
 1049              		.cfi_offset 14, -4
 1050 0004 83B0     		sub	sp, sp, #12
 1051              	.LCFI18:
 1052              		.cfi_def_cfa_offset 32
 406:Src/adc.c     **** 	s32 pos_noCorrect;
 407:Src/adc.c     **** 	if(g_CmdMap[SYS_MU_COMM_TO_PC] == 1)     //MU Ð¾Æ¬ï¿½ê¶¨Ä£Ê½
 1053              		.loc 1 407 0
 1054 0006 534B     		ldr	r3, .L79
 1055 0008 B3F81832 		ldrh	r3, [r3, #536]
 1056 000c 1BB2     		sxth	r3, r3
 1057 000e 012B     		cmp	r3, #1
 1058 0010 14D0     		beq	.L77
 408:Src/adc.c     **** 	{	
 409:Src/adc.c     **** 		Encode_Single_to_Multi_R(0,0,g_MechanicsAngle_15bit,&rod_pos_Muti_Encoder,0x8000,0x40000);
 410:Src/adc.c     **** 		g_CmdMap[CMD_POS_ACT_PU] = ((int64_t)rod_pos_Muti_Encoder*g_CmdMap[SCREW_UM_RES]/(32767*(int64_t)
 411:Src/adc.c     **** 	}
 412:Src/adc.c     **** 	else	
 413:Src/adc.c     **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 27


 414:Src/adc.c     **** 		if(*g_pMU_value_offset > vlaue_icmu_offset_overturn)  
 1059              		.loc 1 414 0
 1060 0012 514B     		ldr	r3, .L79+4
 1061 0014 1A68     		ldr	r2, [r3]
 1062 0016 1168     		ldr	r1, [r2]
 1063 0018 504B     		ldr	r3, .L79+8
 1064 001a 1B68     		ldr	r3, [r3]
 1065 001c 9942     		cmp	r1, r3
 1066 001e 57DD     		ble	.L74
 415:Src/adc.c     **** 		{
 416:Src/adc.c     **** 			if(MU_Value<range_icmu_vlaue_need_addMax)//range_icmu_vlaue_at_stroke
 1067              		.loc 1 416 0
 1068 0020 4F4B     		ldr	r3, .L79+12
 1069 0022 1968     		ldr	r1, [r3]
 1070 0024 4F4B     		ldr	r3, .L79+16
 1071 0026 1B68     		ldr	r3, [r3]
 1072 0028 9942     		cmp	r1, r3
 1073 002a 54DA     		bge	.L75
 417:Src/adc.c     **** 			{
 418:Src/adc.c     **** 				MU_Value = MAX_VALUE_ICMU+MU_Value;
 1074              		.loc 1 418 0
 1075 002c 4C49     		ldr	r1, .L79+12
 1076 002e 0B68     		ldr	r3, [r1]
 1077 0030 03F1FF13 		add	r3, r3, #16711935
 1078 0034 03F57F43 		add	r3, r3, #65280
 1079 0038 0B60     		str	r3, [r1]
 1080 003a 4CE0     		b	.L75
 1081              	.L77:
 409:Src/adc.c     **** 		g_CmdMap[CMD_POS_ACT_PU] = ((int64_t)rod_pos_Muti_Encoder*g_CmdMap[SCREW_UM_RES]/(32767*(int64_t)
 1082              		.loc 1 409 0
 1083 003c 4A4B     		ldr	r3, .L79+20
 1084 003e 1A68     		ldr	r2, [r3]
 1085 0040 4A4C     		ldr	r4, .L79+24
 1086 0042 4FF48023 		mov	r3, #262144
 1087 0046 0193     		str	r3, [sp, #4]
 1088 0048 4FF40043 		mov	r3, #32768
 1089 004c 0093     		str	r3, [sp]
 1090 004e 2346     		mov	r3, r4
 1091 0050 0021     		movs	r1, #0
 1092 0052 0846     		mov	r0, r1
 1093 0054 FFF7FEFF 		bl	Encode_Single_to_Multi_R
 1094              	.LVL75:
 410:Src/adc.c     **** 	}
 1095              		.loc 1 410 0
 1096 0058 2268     		ldr	r2, [r4]
 1097 005a D517     		asrs	r5, r2, #31
 1098 005c 3D4E     		ldr	r6, .L79
 1099 005e B6F84E02 		ldrh	r0, [r6, #590]
 1100 0062 00B2     		sxth	r0, r0
 1101 0064 C117     		asrs	r1, r0, #31
 1102 0066 02FB01F3 		mul	r3, r2, r1
 1103 006a 00FB0533 		mla	r3, r0, r5, r3
 1104 006e A2FB0001 		umull	r0, r1, r2, r0
 1105 0072 1944     		add	r1, r1, r3
 1106 0074 B6F85022 		ldrh	r2, [r6, #592]
 1107 0078 14B2     		sxth	r4, r2
 1108 007a E517     		asrs	r5, r4, #31
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 28


 1109 007c EE03     		lsls	r6, r5, #15
 1110 007e 4FEAC43B 		lsl	fp, r4, #15
 1111 0082 46EA544C 		orr	ip, r6, r4, lsr #17
 1112 0086 BBEB0402 		subs	r2, fp, r4
 1113 008a 6CEB0503 		sbc	r3, ip, r5
 1114 008e 1446     		mov	r4, r2
 1115 0090 1D46     		mov	r5, r3
 1116 0092 002A     		cmp	r2, #0
 1117 0094 73F10006 		sbcs	r6, r3, #0
 1118 0098 15DB     		blt	.L78
 1119              	.L72:
 1120 009a 220A     		lsrs	r2, r4, #8
 1121 009c 42EA0562 		orr	r2, r2, r5, lsl #24
 1122 00a0 2B12     		asrs	r3, r5, #8
 1123 00a2 FFF7FEFF 		bl	__aeabi_ldivmod
 1124              	.LVL76:
 1125 00a6 0446     		mov	r4, r0
 1126 00a8 8903     		lsls	r1, r1, #14
 1127 00aa 314B     		ldr	r3, .L79+28
 1128 00ac 1B68     		ldr	r3, [r3]
 1129 00ae 1A68     		ldr	r2, [r3]
 1130 00b0 D317     		asrs	r3, r2, #31
 1131 00b2 A003     		lsls	r0, r4, #14
 1132 00b4 41EA9441 		orr	r1, r1, r4, lsr #18
 1133 00b8 FFF7FEFF 		bl	__aeabi_ldivmod
 1134              	.LVL77:
 1135 00bc 00B2     		sxth	r0, r0
 1136 00be 254B     		ldr	r3, .L79
 1137 00c0 A3F84C00 		strh	r0, [r3, #76]	@ movhi
 1138 00c4 42E0     		b	.L70
 1139              	.L78:
 1140 00c6 12F1FF04 		adds	r4, r2, #255
 1141 00ca 43F10005 		adc	r5, r3, #0
 1142 00ce E4E7     		b	.L72
 1143              	.L74:
 419:Src/adc.c     **** 			}
 420:Src/adc.c     **** 			else
 421:Src/adc.c     **** 			{			
 422:Src/adc.c     **** 			}
 423:Src/adc.c     **** 		}
 424:Src/adc.c     **** 		else
 425:Src/adc.c     **** 		{
 426:Src/adc.c     **** 			MU_Value = MU_Value;
 1144              		.loc 1 426 0
 1145 00d0 234B     		ldr	r3, .L79+12
 1146 00d2 1968     		ldr	r1, [r3]
 1147 00d4 1960     		str	r1, [r3]
 1148              	.L75:
 427:Src/adc.c     **** 		}		
 428:Src/adc.c     **** 		
 429:Src/adc.c     **** 		#if 1
 430:Src/adc.c     **** 		MU_Value_base_0 = MU_Value-*g_pMU_value_offset;
 1149              		.loc 1 430 0
 1150 00d6 224B     		ldr	r3, .L79+12
 1151 00d8 1B68     		ldr	r3, [r3]
 1152 00da 1268     		ldr	r2, [r2]
 1153 00dc 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 29


 1154 00de 254A     		ldr	r2, .L79+32
 1155 00e0 1360     		str	r3, [r2]
 431:Src/adc.c     **** //		MU_Value_base_0 = MU_Value - 12803800;
 432:Src/adc.c     **** 		pos_nm_MU150 = (DISTANCE_NM_ICMU*(int64_t)(MU_Value_base_0-*g_pMU_0mm_offset))>>MU_DATA_SPI_RES;	
 1156              		.loc 1 432 0
 1157 00e2 1268     		ldr	r2, [r2]
 1158 00e4 244B     		ldr	r3, .L79+36
 1159 00e6 1B68     		ldr	r3, [r3]
 1160 00e8 1B68     		ldr	r3, [r3]
 1161 00ea D21A     		subs	r2, r2, r3
 1162 00ec D517     		asrs	r5, r2, #31
 1163 00ee 2349     		ldr	r1, .L79+40
 1164 00f0 A2FB01BC 		umull	fp, ip, r2, r1
 1165 00f4 01FB05CC 		mla	ip, r1, r5, ip
 1166 00f8 4FEA1B62 		lsr	r2, fp, #24
 1167 00fc 42EA0C22 		orr	r2, r2, ip, lsl #8
 1168 0100 1F4B     		ldr	r3, .L79+44
 1169 0102 1A60     		str	r2, [r3]
 433:Src/adc.c     **** //		pos_nm_MU150 = (DISTANCE_NM_ICMU*(int64_t)(MU_Value_base_0))>>MU_DATA_SPI_RES;		
 434:Src/adc.c     **** 		pos_noCorrect = ((int64_t)pos_nm_MU150<<14)/((int64_t)*g_pPos_ref_base_um*1000);
 1170              		.loc 1 434 0
 1171 0104 1D68     		ldr	r5, [r3]
 1172 0106 1A4B     		ldr	r3, .L79+28
 1173 0108 1B68     		ldr	r3, [r3]
 1174 010a 1C68     		ldr	r4, [r3]
 1175 010c 2046     		mov	r0, r4
 1176 010e E117     		asrs	r1, r4, #31
 1177 0110 4E01     		lsls	r6, r1, #5
 1178 0112 6201     		lsls	r2, r4, #5
 1179 0114 46EAD463 		orr	r3, r6, r4, lsr #27
 1180 0118 121B     		subs	r2, r2, r4
 1181 011a 63EB0103 		sbc	r3, r3, r1
 1182 011e 9C00     		lsls	r4, r3, #2
 1183 0120 44EA9274 		orr	r4, r4, r2, lsr #30
 1184 0124 9600     		lsls	r6, r2, #2
 1185 0126 3218     		adds	r2, r6, r0
 1186 0128 44EB0103 		adc	r3, r4, r1
 1187 012c D800     		lsls	r0, r3, #3
 1188 012e 40EA5270 		orr	r0, r0, r2, lsr #29
 1189 0132 D100     		lsls	r1, r2, #3
 1190 0134 0A46     		mov	r2, r1
 1191 0136 0346     		mov	r3, r0
 1192 0138 A803     		lsls	r0, r5, #14
 1193 013a A914     		asrs	r1, r5, #18
 1194 013c FFF7FEFF 		bl	__aeabi_ldivmod
 1195              	.LVL78:
 435:Src/adc.c     **** 		
 436:Src/adc.c     **** 		g_CmdMap[CMD_POS_ACT_PU] = Pos_Correct(pos_noCorrect);
 1196              		.loc 1 436 0
 1197 0140 FFF7FEFF 		bl	Pos_Correct
 1198              	.LVL79:
 1199 0144 00B2     		sxth	r0, r0
 1200 0146 034B     		ldr	r3, .L79
 1201 0148 A3F84C00 		strh	r0, [r3, #76]	@ movhi
 1202              	.L70:
 437:Src/adc.c     **** 		
 438:Src/adc.c     **** //		g_CmdMap[CMD_POS_ACT_PU] = pos_noCorrect;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 30


 439:Src/adc.c     **** 		
 440:Src/adc.c     **** 		#endif
 441:Src/adc.c     **** 		
 442:Src/adc.c     **** //		MU_Value_base_0 = MU_Value - 10003800;
 443:Src/adc.c     **** //		pos_nm_MU150 = (DISTANCE_NM_ICMU*(int64_t)(MU_Value_base_0))>>MU_DATA_SPI_RES;		
 444:Src/adc.c     **** //		pos_noCorrect = ((int64_t)pos_nm_MU150<<14)/((int64_t)*g_pPos_ref_base_um*1000);
 445:Src/adc.c     **** //		g_CmdMap[CMD_POS_ACT_PU] = pos_noCorrect;
 446:Src/adc.c     **** 	}
 447:Src/adc.c     **** 	
 448:Src/adc.c     **** 	
 449:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã´ï¿½ï¿½ï¿½ï¿½ï¿½(IC_Hause_MU ï¿½ï¿½Õ¤ï¿½ï¿½ï¿½ï¿½)
 450:Src/adc.c     **** 		
 451:Src/adc.c     **** 	
 452:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½Ì¼Ä¤ADCï¿½ï¿½ï¿½ï¿½	
 453:Src/adc.c     **** //	g_CmdMap[CMD_POS_ADC_12BIT] = sum_Pos_ADC_Array>>5;//(ADC1->JDR2 & 0x0000FFFF);
 454:Src/adc.c     **** //	g_CmdMap[CMD_POS_ACT_PU_ADC] = Pos_Correct(g_CmdMap[CMD_POS_ADC_12BIT]);	
 455:Src/adc.c     **** 	
 456:Src/adc.c     **** 	
 457:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½È¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½	
 458:Src/adc.c     **** //    ï¿½ï¿½ï¿½ï¿½ï¿½Æ¸ï¿½Êµï¿½ï¿½ï¿½Ð³ï¿½		
 459:Src/adc.c     **** //		Encode_Single_to_Multi_R(0,0,g_MechanicsAngle_15bit,&rod_pos_Muti_Encoder,0x8000,0x40000);	
 460:Src/adc.c     **** //		if(g_CmdMap[TAG_MOTOR_ENABLE] == 0 || PosAtDead_Flag == 1)
 461:Src/adc.c     **** //		{
 462:Src/adc.c     **** //			rod_pos_Muti_Encoder = 32767*((int64_t)(g_CmdMap[CMD_POS_ADC_12BIT_FILTER] - 300)*11*10000/330
 463:Src/adc.c     **** //		}
 464:Src/adc.c     **** //		g_CmdMap[CMD_POS_ACT_PU] = ((int64_t)rod_pos_Muti_Encoder*g_CmdMap[SCREW_UM_RES]/(32767*(int64_
 465:Src/adc.c     **** //	g_CmdMap[CMD_POS_ACT_PU] = g_CmdMap[CMD_POS_ACT_PU_ADC];	
 466:Src/adc.c     **** }
 1203              		.loc 1 466 0
 1204 014c 03B0     		add	sp, sp, #12
 1205              	.LCFI19:
 1206              		.cfi_def_cfa_offset 20
 1207              		@ sp needed
 1208 014e BDE87088 		pop	{r4, r5, r6, fp, pc}
 1209              	.L80:
 1210 0152 00BF     		.align	2
 1211              	.L79:
 1212 0154 00000000 		.word	g_CmdMap
 1213 0158 00000000 		.word	g_pMU_value_offset
 1214 015c 00000000 		.word	vlaue_icmu_offset_overturn
 1215 0160 00000000 		.word	MU_Value
 1216 0164 00000000 		.word	range_icmu_vlaue_need_addMax
 1217 0168 00000000 		.word	g_MechanicsAngle_15bit
 1218 016c 00000000 		.word	rod_pos_Muti_Encoder
 1219 0170 00000000 		.word	g_pPos_ref_base_um
 1220 0174 00000000 		.word	.LANCHOR15
 1221 0178 00000000 		.word	g_pMU_0mm_offset
 1222 017c 006CDC02 		.word	48000000
 1223 0180 00000000 		.word	pos_nm_MU150
 1224              		.cfi_endproc
 1225              	.LFE342:
 1227              		.section	.text.check_linearity,"ax",%progbits
 1228              		.align	1
 1229              		.global	check_linearity
 1230              		.syntax unified
 1231              		.thumb
 1232              		.thumb_func
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 31


 1233              		.fpu fpv4-sp-d16
 1235              	check_linearity:
 1236              	.LFB343:
 467:Src/adc.c     **** s16 check_linearity(void)
 468:Src/adc.c     **** {
 1237              		.loc 1 468 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 0
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
 1241              		@ link register save eliminated.
 1242              	.LVL80:
 469:Src/adc.c     **** 	s16 i = 0;
 470:Src/adc.c     **** 	if(g_CmdMap[POS_LINEARITY_ADC(0)]<0 || g_CmdMap[POS_LINEARITY_ADC(0)]>19000)
 1243              		.loc 1 470 0
 1244 0000 214B     		ldr	r3, .L97
 1245 0002 B3F8E032 		ldrh	r3, [r3, #736]
 1246 0006 13F4004F 		tst	r3, #32768
 1247 000a 2ED1     		bne	.L85
 1248              		.loc 1 470 0 is_stmt 0 discriminator 1
 1249 000c 1E4B     		ldr	r3, .L97
 1250 000e B3F8E032 		ldrh	r3, [r3, #736]
 1251 0012 1BB2     		sxth	r3, r3
 1252 0014 44F63822 		movw	r2, #19000
 1253 0018 9342     		cmp	r3, r2
 1254 001a 28DC     		bgt	.L86
 471:Src/adc.c     **** 	{
 472:Src/adc.c     **** 		return 0;
 473:Src/adc.c     **** 	}
 474:Src/adc.c     **** 	for(i = 1;i < NUM_LINEARITY_SEG;i++)
 1255              		.loc 1 474 0 is_stmt 1
 1256 001c 0123     		movs	r3, #1
 1257              	.LVL81:
 1258 001e BD2B     		cmp	r3, #189
 1259 0020 2FDC     		bgt	.L96
 468:Src/adc.c     **** 	s16 i = 0;
 1260              		.loc 1 468 0
 1261 0022 10B4     		push	{r4}
 1262              	.LCFI20:
 1263              		.cfi_def_cfa_offset 4
 1264              		.cfi_offset 4, -4
 1265              	.L84:
 475:Src/adc.c     **** 	{
 476:Src/adc.c     **** 			if(g_CmdMap[POS_LINEARITY_ADC(i)]<0|| g_CmdMap[POS_LINEARITY_ADC(i)]>19000)
 1266              		.loc 1 476 0
 1267 0024 1946     		mov	r1, r3
 1268 0026 03F1B802 		add	r2, r3, #184
 1269 002a 5200     		lsls	r2, r2, #1
 1270 002c 1648     		ldr	r0, .L97
 1271 002e 30F81200 		ldrh	r0, [r0, r2, lsl #1]
 1272 0032 10F4004F 		tst	r0, #32768
 1273 0036 1CD1     		bne	.L87
 1274              		.loc 1 476 0 is_stmt 0 discriminator 1
 1275 0038 1348     		ldr	r0, .L97
 1276 003a 30F81200 		ldrh	r0, [r0, r2, lsl #1]
 1277 003e 00B2     		sxth	r0, r0
 1278 0040 44F63824 		movw	r4, #19000
 1279 0044 A042     		cmp	r0, r4
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 32


 1280 0046 18DC     		bgt	.L88
 477:Src/adc.c     **** 			{
 478:Src/adc.c     **** 				return 0;
 479:Src/adc.c     **** 			}
 480:Src/adc.c     **** 			if(g_CmdMap[POS_LINEARITY_ADC(i-1)]>g_CmdMap[POS_LINEARITY_ADC(i)])
 1281              		.loc 1 480 0 is_stmt 1
 1282 0048 B731     		adds	r1, r1, #183
 1283 004a 4900     		lsls	r1, r1, #1
 1284 004c 0E48     		ldr	r0, .L97
 1285 004e 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 1286 0052 09B2     		sxth	r1, r1
 1287 0054 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 1288 0058 12B2     		sxth	r2, r2
 1289 005a 9142     		cmp	r1, r2
 1290 005c 0FDC     		bgt	.L89
 474:Src/adc.c     **** 	{
 1291              		.loc 1 474 0 discriminator 2
 1292 005e 0133     		adds	r3, r3, #1
 1293              	.LVL82:
 1294 0060 1BB2     		sxth	r3, r3
 1295              	.LVL83:
 1296 0062 BD2B     		cmp	r3, #189
 1297 0064 DEDD     		ble	.L84
 481:Src/adc.c     **** 			{
 482:Src/adc.c     **** 				return 0;
 483:Src/adc.c     **** 			}
 484:Src/adc.c     **** 	}
 485:Src/adc.c     **** 	return 1;
 1298              		.loc 1 485 0
 1299 0066 0120     		movs	r0, #1
 1300 0068 04E0     		b	.L82
 1301              	.LVL84:
 1302              	.L85:
 1303              	.LCFI21:
 1304              		.cfi_def_cfa_offset 0
 1305              		.cfi_restore 4
 472:Src/adc.c     **** 	}
 1306              		.loc 1 472 0
 1307 006a 0020     		movs	r0, #0
 1308 006c 7047     		bx	lr
 1309              	.L86:
 1310 006e 0020     		movs	r0, #0
 1311 0070 7047     		bx	lr
 1312              	.LVL85:
 1313              	.L87:
 1314              	.LCFI22:
 1315              		.cfi_def_cfa_offset 4
 1316              		.cfi_offset 4, -4
 478:Src/adc.c     **** 			}
 1317              		.loc 1 478 0
 1318 0072 0020     		movs	r0, #0
 1319              	.L82:
 486:Src/adc.c     **** }
 1320              		.loc 1 486 0
 1321 0074 5DF8044B 		ldr	r4, [sp], #4
 1322              	.LCFI23:
 1323              		.cfi_remember_state
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 33


 1324              		.cfi_restore 4
 1325              		.cfi_def_cfa_offset 0
 1326 0078 7047     		bx	lr
 1327              	.L88:
 1328              	.LCFI24:
 1329              		.cfi_restore_state
 478:Src/adc.c     **** 			}
 1330              		.loc 1 478 0
 1331 007a 0020     		movs	r0, #0
 1332 007c FAE7     		b	.L82
 1333              	.L89:
 482:Src/adc.c     **** 			}
 1334              		.loc 1 482 0
 1335 007e 0020     		movs	r0, #0
 1336 0080 F8E7     		b	.L82
 1337              	.L96:
 1338              	.LCFI25:
 1339              		.cfi_def_cfa_offset 0
 1340              		.cfi_restore 4
 485:Src/adc.c     **** }
 1341              		.loc 1 485 0
 1342 0082 0120     		movs	r0, #1
 1343              		.loc 1 486 0
 1344 0084 7047     		bx	lr
 1345              	.L98:
 1346 0086 00BF     		.align	2
 1347              	.L97:
 1348 0088 00000000 		.word	g_CmdMap
 1349              		.cfi_endproc
 1350              	.LFE343:
 1352              		.section	.text.get_temperature_value,"ax",%progbits
 1353              		.align	1
 1354              		.global	get_temperature_value
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1358              		.fpu fpv4-sp-d16
 1360              	get_temperature_value:
 1361              	.LFB344:
 487:Src/adc.c     **** 
 488:Src/adc.c     **** //g_CmdMap[CMD_TEMP] = get_temperature_value(ADC1->JDR2)
 489:Src/adc.c     **** int16_t get_temperature_value(int16_t para_val)
 490:Src/adc.c     **** {
 1362              		.loc 1 490 0
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 0
 1365              		@ frame_needed = 0, uses_anonymous_args = 0
 1366              		@ link register save eliminated.
 1367              	.LVL86:
 1368 0000 10B4     		push	{r4}
 1369              	.LCFI26:
 1370              		.cfi_def_cfa_offset 4
 1371              		.cfi_offset 4, -4
 1372              	.LVL87:
 491:Src/adc.c     **** 	int16_t index_A = 0,index_B = 70,index_Mid;
 492:Src/adc.c     **** 	para_val = 3300*para_val/NCT_VOLT;
 1373              		.loc 1 492 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 34


 1374 0002 40F6E444 		movw	r4, #3300
 1375 0006 04FB00F0 		mul	r0, r4, r0
 1376              	.LVL88:
 1377 000a 144C     		ldr	r4, .L106
 1378 000c 84FB0034 		smull	r3, r4, r4, r0
 1379 0010 2318     		adds	r3, r4, r0
 1380 0012 C417     		asrs	r4, r0, #31
 1381 0014 C4EBE324 		rsb	r4, r4, r3, asr #11
 1382 0018 24B2     		sxth	r4, r4
 1383              	.LVL89:
 491:Src/adc.c     **** 	int16_t index_A = 0,index_B = 70,index_Mid;
 1384              		.loc 1 491 0
 1385 001a 4620     		movs	r0, #70
 1386 001c 0022     		movs	r2, #0
 1387 001e 06E0     		b	.L102
 1388              	.LVL90:
 1389              	.L103:
 493:Src/adc.c     **** 	while(1)
 494:Src/adc.c     **** 	{
 495:Src/adc.c     **** 		index_Mid = (index_A+index_B)>>1;		
 496:Src/adc.c     **** 		if(para_val<=g_Rt_Map[index_Mid])
 497:Src/adc.c     **** 		{
 498:Src/adc.c     **** 			index_B = index_Mid;
 1390              		.loc 1 498 0
 1391 0020 1846     		mov	r0, r3
 1392              	.LVL91:
 1393              	.L100:
 499:Src/adc.c     **** 		}
 500:Src/adc.c     **** 		else if(para_val>g_Rt_Map[index_Mid])
 501:Src/adc.c     **** 		{
 502:Src/adc.c     **** 			index_A = index_Mid;		
 503:Src/adc.c     **** 		}
 504:Src/adc.c     **** 		if(index_B == (index_A+1) || index_B == index_A)
 1394              		.loc 1 504 0
 1395 0022 1146     		mov	r1, r2
 1396 0024 531C     		adds	r3, r2, #1
 1397              	.LVL92:
 1398 0026 9842     		cmp	r0, r3
 1399 0028 11D0     		beq	.L101
 1400              		.loc 1 504 0 is_stmt 0 discriminator 1
 1401 002a 8242     		cmp	r2, r0
 1402 002c 0FD0     		beq	.L101
 1403              	.LVL93:
 1404              	.L102:
 495:Src/adc.c     **** 		if(para_val<=g_Rt_Map[index_Mid])
 1405              		.loc 1 495 0 is_stmt 1
 1406 002e 1318     		adds	r3, r2, r0
 1407 0030 5B10     		asrs	r3, r3, #1
 1408              	.LVL94:
 496:Src/adc.c     **** 		{
 1409              		.loc 1 496 0
 1410 0032 0B49     		ldr	r1, .L106+4
 1411 0034 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 1412 0038 09B2     		sxth	r1, r1
 1413 003a A142     		cmp	r1, r4
 1414 003c F0DA     		bge	.L103
 500:Src/adc.c     **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 35


 1415              		.loc 1 500 0
 1416 003e 0849     		ldr	r1, .L106+4
 1417 0040 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 1418 0044 09B2     		sxth	r1, r1
 1419 0046 A142     		cmp	r1, r4
 1420 0048 EBDA     		bge	.L100
 502:Src/adc.c     **** 		}
 1421              		.loc 1 502 0
 1422 004a 1A46     		mov	r2, r3
 1423              	.LVL95:
 1424 004c E9E7     		b	.L100
 1425              	.LVL96:
 1426              	.L101:
 505:Src/adc.c     **** 		{
 506:Src/adc.c     **** 			break;
 507:Src/adc.c     **** 		}
 508:Src/adc.c     **** 	}
 509:Src/adc.c     **** 	return 2*index_A-40;
 1427              		.loc 1 509 0
 1428 004e A1F11400 		sub	r0, r1, #20
 1429              	.LVL97:
 1430 0052 4000     		lsls	r0, r0, #1
 510:Src/adc.c     **** }
 1431              		.loc 1 510 0
 1432 0054 00B2     		sxth	r0, r0
 1433 0056 5DF8044B 		ldr	r4, [sp], #4
 1434              	.LCFI27:
 1435              		.cfi_restore 4
 1436              		.cfi_def_cfa_offset 0
 1437              	.LVL98:
 1438 005a 7047     		bx	lr
 1439              	.L107:
 1440              		.align	2
 1441              	.L106:
 1442 005c EF09E09E 		.word	-1629484561
 1443 0060 00000000 		.word	.LANCHOR16
 1444              		.cfi_endproc
 1445              	.LFE344:
 1447              		.section	.text.start_temperature_adc,"ax",%progbits
 1448              		.align	1
 1449              		.global	start_temperature_adc
 1450              		.syntax unified
 1451              		.thumb
 1452              		.thumb_func
 1453              		.fpu fpv4-sp-d16
 1455              	start_temperature_adc:
 1456              	.LFB335:
 230:Src/adc.c     **** 	HAL_ADC_Start(&hadc1);
 1457              		.loc 1 230 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 0
 1460              		@ frame_needed = 0, uses_anonymous_args = 0
 1461 0000 10B5     		push	{r4, lr}
 1462              	.LCFI28:
 1463              		.cfi_def_cfa_offset 8
 1464              		.cfi_offset 4, -8
 1465              		.cfi_offset 14, -4
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 36


 231:Src/adc.c     **** 	g_CmdMap[CMD_TEMP] = get_temperature_value(hadc1.Instance->DR);
 1466              		.loc 1 231 0
 1467 0002 064C     		ldr	r4, .L110
 1468 0004 2046     		mov	r0, r4
 1469 0006 FFF7FEFF 		bl	HAL_ADC_Start
 1470              	.LVL99:
 232:Src/adc.c     **** }
 1471              		.loc 1 232 0
 1472 000a 2368     		ldr	r3, [r4]
 1473 000c 186C     		ldr	r0, [r3, #64]
 1474 000e 00B2     		sxth	r0, r0
 1475 0010 FFF7FEFF 		bl	get_temperature_value
 1476              	.LVL100:
 1477 0014 024B     		ldr	r3, .L110+4
 1478 0016 A3F85600 		strh	r0, [r3, #86]	@ movhi
 233:Src/adc.c     **** 
 1479              		.loc 1 233 0
 1480 001a 10BD     		pop	{r4, pc}
 1481              	.L111:
 1482              		.align	2
 1483              	.L110:
 1484 001c 00000000 		.word	hadc1
 1485 0020 00000000 		.word	g_CmdMap
 1486              		.cfi_endproc
 1487              	.LFE335:
 1489              		.section	.text.pos_linearity_set_default,"ax",%progbits
 1490              		.align	1
 1491              		.global	pos_linearity_set_default
 1492              		.syntax unified
 1493              		.thumb
 1494              		.thumb_func
 1495              		.fpu fpv4-sp-d16
 1497              	pos_linearity_set_default:
 1498              	.LFB345:
 511:Src/adc.c     **** void pos_linearity_set_default(void)
 512:Src/adc.c     **** {
 1499              		.loc 1 512 0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 0
 1502              		@ frame_needed = 0, uses_anonymous_args = 0
 1503              		@ link register save eliminated.
 1504              	.LVL101:
 513:Src/adc.c     **** 	s16 i = 0;
 514:Src/adc.c     **** 	s32 inc_per_seg = 16384/NUM_LINEARITY_SEG;
 515:Src/adc.c     **** 	for(i = 0;i < NUM_LINEARITY_SEG+1;i++)
 1505              		.loc 1 515 0
 1506 0000 0023     		movs	r3, #0
 1507 0002 10E0     		b	.L113
 1508              	.LVL102:
 1509              	.L114:
 516:Src/adc.c     **** 	{
 517:Src/adc.c     **** 			g_CmdMap[POS_LINEARITY_ADC(i)]	= inc_per_seg*i;	//
 1510              		.loc 1 517 0 discriminator 3
 1511 0004 99B2     		uxth	r1, r3
 1512 0006 B833     		adds	r3, r3, #184
 1513              	.LVL103:
 1514 0008 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 37


 1515 000a 01EB8102 		add	r2, r1, r1, lsl #2
 1516 000e 02EB0212 		add	r2, r2, r2, lsl #4
 1517 0012 0A44     		add	r2, r2, r1
 1518 0014 12B2     		sxth	r2, r2
 1519 0016 1948     		ldr	r0, .L122
 1520 0018 20F81320 		strh	r2, [r0, r3, lsl #1]	@ movhi
 518:Src/adc.c     **** 			g_CmdMap[POS_LINEARITY_PU(i)] 	= inc_per_seg*i;	//
 1521              		.loc 1 518 0 discriminator 3
 1522 001c 0133     		adds	r3, r3, #1
 1523 001e 20F81320 		strh	r2, [r0, r3, lsl #1]	@ movhi
 515:Src/adc.c     **** 	{
 1524              		.loc 1 515 0 discriminator 3
 1525 0022 4B1C     		adds	r3, r1, #1
 1526 0024 1BB2     		sxth	r3, r3
 1527              	.LVL104:
 1528              	.L113:
 515:Src/adc.c     **** 	{
 1529              		.loc 1 515 0 is_stmt 0 discriminator 1
 1530 0026 BE2B     		cmp	r3, #190
 1531 0028 ECDD     		ble	.L114
 519:Src/adc.c     **** 	}
 520:Src/adc.c     **** 	for(i=0;i<NUM_LINEARITY_SEG;i++)
 1532              		.loc 1 520 0 is_stmt 1
 1533 002a 0022     		movs	r2, #0
 1534              	.LVL105:
 1535 002c BD2A     		cmp	r2, #189
 1536 002e 23DC     		bgt	.L121
 512:Src/adc.c     **** 	s16 i = 0;
 1537              		.loc 1 512 0
 1538 0030 30B4     		push	{r4, r5}
 1539              	.LCFI29:
 1540              		.cfi_def_cfa_offset 8
 1541              		.cfi_offset 4, -8
 1542              		.cfi_offset 5, -4
 1543              	.L116:
 521:Src/adc.c     **** 	{
 522:Src/adc.c     **** 		L_Slop_Array[i] = (((int32_t)(g_CmdMap[POS_LINEARITY_PU(i+1)] - g_CmdMap[POS_LINEARITY_PU(i)]))<<
 1544              		.loc 1 522 0 discriminator 3
 1545 0032 02F1B901 		add	r1, r2, #185
 1546 0036 4900     		lsls	r1, r1, #1
 1547 0038 4B1C     		adds	r3, r1, #1
 1548 003a 1048     		ldr	r0, .L122
 1549 003c 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 1550 0040 1BB2     		sxth	r3, r3
 1551 0042 02F1B804 		add	r4, r2, #184
 1552 0046 6400     		lsls	r4, r4, #1
 1553 0048 651C     		adds	r5, r4, #1
 1554 004a 30F81550 		ldrh	r5, [r0, r5, lsl #1]
 1555 004e 2DB2     		sxth	r5, r5
 1556 0050 5B1B     		subs	r3, r3, r5
 1557 0052 9B02     		lsls	r3, r3, #10
 1558 0054 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 1559 0058 09B2     		sxth	r1, r1
 1560 005a 30F81400 		ldrh	r0, [r0, r4, lsl #1]
 1561 005e 00B2     		sxth	r0, r0
 1562 0060 091A     		subs	r1, r1, r0
 1563 0062 93FBF1F3 		sdiv	r3, r3, r1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 38


 1564 0066 0649     		ldr	r1, .L122+4
 1565 0068 41F82230 		str	r3, [r1, r2, lsl #2]
 520:Src/adc.c     **** 	{
 1566              		.loc 1 520 0 discriminator 3
 1567 006c 0132     		adds	r2, r2, #1
 1568              	.LVL106:
 1569 006e 12B2     		sxth	r2, r2
 1570              	.LVL107:
 1571 0070 BD2A     		cmp	r2, #189
 1572 0072 DEDD     		ble	.L116
 523:Src/adc.c     **** 	}
 524:Src/adc.c     **** }
 1573              		.loc 1 524 0
 1574 0074 30BC     		pop	{r4, r5}
 1575              	.LCFI30:
 1576              		.cfi_restore 5
 1577              		.cfi_restore 4
 1578              		.cfi_def_cfa_offset 0
 1579 0076 7047     		bx	lr
 1580              	.L121:
 1581 0078 7047     		bx	lr
 1582              	.L123:
 1583 007a 00BF     		.align	2
 1584              	.L122:
 1585 007c 00000000 		.word	g_CmdMap
 1586 0080 00000000 		.word	L_Slop_Array
 1587              		.cfi_endproc
 1588              	.LFE345:
 1590              		.global	pos_valid
 1591              		.global	pos_filterd
 1592              		.global	pos_sum
 1593              		.global	pos_array
 1594              		.global	index_pos_array
 1595              		.global	MU_Value_error_cnt
 1596              		.global	Pos_Corrected_last
 1597              		.global	g_Rt_Map
 1598              		.comm	hadc2,108,4
 1599              		.comm	hadc1,108,4
 1600              		.global	force_Sum
 1601              		.global	force_Array
 1602              		.global	index_force_Array
 1603              		.global	YBP_Sum
 1604              		.global	YBP_Array
 1605              		.global	index_YBP_Array
 1606              		.global	MU_Value_base_0
 1607              		.global	sum_Pos_ADC_Array
 1608              		.global	Index_Pos_ADC_Array
 1609              		.global	Pos_ADC_Array
 1610              		.global	calibration_value
 1611              		.global	Flag_TEMP_ADC_Array_Filled
 1612              		.global	Flag_VOLT_ADC_Array_Filled
 1613              		.global	TEMP_Filter
 1614              		.global	VOLT_Filter
 1615              		.global	TEMP_ADC_Array_Index
 1616              		.global	VOLT_ADC_Array_Index
 1617              		.global	TEMP_ADC_Array
 1618              		.global	VOLT_ADC_Array
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 39


 1619              		.section	.bss.Flag_TEMP_ADC_Array_Filled,"aw",%nobits
 1620              		.set	.LANCHOR6,. + 0
 1623              	Flag_TEMP_ADC_Array_Filled:
 1624 0000 00       		.space	1
 1625              		.section	.bss.Flag_VOLT_ADC_Array_Filled,"aw",%nobits
 1628              	Flag_VOLT_ADC_Array_Filled:
 1629 0000 00       		.space	1
 1630              		.section	.bss.Index_Pos_ADC_Array,"aw",%nobits
 1631              		.align	2
 1634              	Index_Pos_ADC_Array:
 1635 0000 00000000 		.space	4
 1636              		.section	.bss.MU_Value_base_0,"aw",%nobits
 1637              		.align	2
 1638              		.set	.LANCHOR15,. + 0
 1641              	MU_Value_base_0:
 1642 0000 00000000 		.space	4
 1643              		.section	.bss.MU_Value_error_cnt,"aw",%nobits
 1644              		.align	1
 1645              		.set	.LANCHOR13,. + 0
 1648              	MU_Value_error_cnt:
 1649 0000 0000     		.space	2
 1650              		.section	.bss.Pos_ADC_Array,"aw",%nobits
 1651              		.align	2
 1654              	Pos_ADC_Array:
 1655 0000 00000000 		.space	128
 1655      00000000 
 1655      00000000 
 1655      00000000 
 1655      00000000 
 1656              		.section	.bss.Pos_Corrected_last,"aw",%nobits
 1657              		.align	1
 1660              	Pos_Corrected_last:
 1661 0000 0000     		.space	2
 1662              		.section	.bss.TEMP_ADC_Array,"aw",%nobits
 1663              		.align	2
 1666              	TEMP_ADC_Array:
 1667 0000 00000000 		.space	40
 1667      00000000 
 1667      00000000 
 1667      00000000 
 1667      00000000 
 1668              		.section	.bss.TEMP_ADC_Array_Index,"aw",%nobits
 1669              		.align	1
 1672              	TEMP_ADC_Array_Index:
 1673 0000 0000     		.space	2
 1674              		.section	.bss.TEMP_Filter,"aw",%nobits
 1675              		.align	1
 1678              	TEMP_Filter:
 1679 0000 0000     		.space	2
 1680              		.section	.bss.VOLT_ADC_Array,"aw",%nobits
 1681              		.align	2
 1682              		.set	.LANCHOR7,. + 0
 1685              	VOLT_ADC_Array:
 1686 0000 00000000 		.space	40
 1686      00000000 
 1686      00000000 
 1686      00000000 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 40


 1686      00000000 
 1687              		.section	.bss.VOLT_ADC_Array_Index,"aw",%nobits
 1688              		.align	1
 1691              	VOLT_ADC_Array_Index:
 1692 0000 0000     		.space	2
 1693              		.section	.bss.VOLT_Filter,"aw",%nobits
 1694              		.align	1
 1695              		.set	.LANCHOR8,. + 0
 1698              	VOLT_Filter:
 1699 0000 0000     		.space	2
 1700              		.section	.bss.YBP_Array,"aw",%nobits
 1701              		.align	2
 1702              		.set	.LANCHOR1,. + 0
 1705              	YBP_Array:
 1706 0000 00000000 		.space	16
 1706      00000000 
 1706      00000000 
 1706      00000000 
 1707              		.section	.bss.YBP_Sum,"aw",%nobits
 1708              		.align	2
 1709              		.set	.LANCHOR2,. + 0
 1712              	YBP_Sum:
 1713 0000 00000000 		.space	4
 1714              		.section	.bss.calibration_value,"aw",%nobits
 1715              		.align	2
 1718              	calibration_value:
 1719 0000 00000000 		.space	16
 1719      00000000 
 1719      00000000 
 1719      00000000 
 1720              		.section	.bss.force_Array,"aw",%nobits
 1721              		.align	2
 1722              		.set	.LANCHOR4,. + 0
 1725              	force_Array:
 1726 0000 0000     		.space	2
 1727              		.section	.bss.force_Sum,"aw",%nobits
 1728              		.align	2
 1729              		.set	.LANCHOR5,. + 0
 1732              	force_Sum:
 1733 0000 00000000 		.space	4
 1734              		.section	.bss.index_YBP_Array,"aw",%nobits
 1735              		.align	1
 1736              		.set	.LANCHOR0,. + 0
 1739              	index_YBP_Array:
 1740 0000 0000     		.space	2
 1741              		.section	.bss.index_force_Array,"aw",%nobits
 1742              		.align	1
 1743              		.set	.LANCHOR3,. + 0
 1746              	index_force_Array:
 1747 0000 0000     		.space	2
 1748              		.section	.bss.index_pos_array,"aw",%nobits
 1749              		.align	1
 1750              		.set	.LANCHOR9,. + 0
 1753              	index_pos_array:
 1754 0000 0000     		.space	2
 1755              		.section	.bss.pos_array,"aw",%nobits
 1756              		.align	2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 41


 1757              		.set	.LANCHOR10,. + 0
 1760              	pos_array:
 1761 0000 00000000 		.space	256
 1761      00000000 
 1761      00000000 
 1761      00000000 
 1761      00000000 
 1762              		.section	.bss.pos_filterd,"aw",%nobits
 1763              		.align	1
 1764              		.set	.LANCHOR12,. + 0
 1767              	pos_filterd:
 1768 0000 0000     		.space	2
 1769              		.section	.bss.pos_sum,"aw",%nobits
 1770              		.align	2
 1771              		.set	.LANCHOR11,. + 0
 1774              	pos_sum:
 1775 0000 00000000 		.space	4
 1776              		.section	.bss.pos_valid,"aw",%nobits
 1777              		.align	1
 1778              		.set	.LANCHOR14,. + 0
 1781              	pos_valid:
 1782 0000 0000     		.space	2
 1783              		.section	.bss.sum_Pos_ADC_Array,"aw",%nobits
 1784              		.align	2
 1787              	sum_Pos_ADC_Array:
 1788 0000 00000000 		.space	4
 1789              		.section	.data.g_Rt_Map,"aw",%progbits
 1790              		.align	2
 1791              		.set	.LANCHOR16,. + 0
 1794              	g_Rt_Map:
 1795 0000 0B00     		.short	11
 1796 0002 1200     		.short	18
 1797 0004 1700     		.short	23
 1798 0006 1D00     		.short	29
 1799 0008 2200     		.short	34
 1800 000a 0C00     		.short	12
 1801 000c 2B00     		.short	43
 1802 000e 3000     		.short	48
 1803 0010 3400     		.short	52
 1804 0012 3900     		.short	57
 1805 0014 3E00     		.short	62
 1806 0016 4400     		.short	68
 1807 0018 4900     		.short	73
 1808 001a 4F00     		.short	79
 1809 001c 5600     		.short	86
 1810 001e 5D00     		.short	93
 1811 0020 6500     		.short	101
 1812 0022 6E00     		.short	110
 1813 0024 7800     		.short	120
 1814 0026 8200     		.short	130
 1815 0028 8D00     		.short	141
 1816 002a 9900     		.short	153
 1817 002c A700     		.short	167
 1818 002e B500     		.short	181
 1819 0030 C400     		.short	196
 1820 0032 D400     		.short	212
 1821 0034 E600     		.short	230
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 42


 1822 0036 F900     		.short	249
 1823 0038 0C01     		.short	268
 1824 003a 2201     		.short	290
 1825 003c 3801     		.short	312
 1826 003e 5001     		.short	336
 1827 0040 6801     		.short	360
 1828 0042 8301     		.short	387
 1829 0044 9E01     		.short	414
 1830 0046 BB01     		.short	443
 1831 0048 D901     		.short	473
 1832 004a F901     		.short	505
 1833 004c 1902     		.short	537
 1834 004e 3B02     		.short	571
 1835 0050 5F02     		.short	607
 1836 0052 8302     		.short	643
 1837 0054 A902     		.short	681
 1838 0056 D102     		.short	721
 1839 0058 F902     		.short	761
 1840 005a 2303     		.short	803
 1841 005c 4D03     		.short	845
 1842 005e 7903     		.short	889
 1843 0060 2300     		.short	35
 1844 0062 D503     		.short	981
 1845 0064 0404     		.short	1028
 1846 0066 3404     		.short	1076
 1847 0068 6504     		.short	1125
 1848 006a 9704     		.short	1175
 1849 006c CA04     		.short	1226
 1850 006e FE04     		.short	1278
 1851 0070 3205     		.short	1330
 1852 0072 6805     		.short	1384
 1853 0074 9D05     		.short	1437
 1854 0076 D405     		.short	1492
 1855 0078 0A06     		.short	1546
 1856 007a 4206     		.short	1602
 1857 007c 7906     		.short	1657
 1858 007e B106     		.short	1713
 1859 0080 E906     		.short	1769
 1860 0082 2107     		.short	1825
 1861 0084 5907     		.short	1881
 1862 0086 9107     		.short	1937
 1863 0088 C807     		.short	1992
 1864 008a 0008     		.short	2048
 1865 008c 3708     		.short	2103
 1866              		.text
 1867              	.Letext0:
 1868              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 1869              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 1870              		.file 4 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 1871              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 1872              		.file 6 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 1873              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1874              		.file 8 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 1875              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1876              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 1877              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_adc.h"
 1878              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_adc_ex.h"
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 43


 1879              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 1880              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_spi.h"
 1881              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 1882              		.file 16 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_uart.h"
 1883              		.file 17 "Inc/adc.h"
 1884              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 1885              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 1886              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-ea
 1887              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 1888              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 1889              		.file 23 "Inc/uart.h"
 1890              		.file 24 "Inc/pwm.h"
 1891              		.file 25 "Inc/spi_MEncoder.h"
 1892              		.file 26 "Inc/stm32_math_sin.h"
 1893              		.file 27 "Inc/pid.h"
 1894              		.file 28 "Inc/profile_joint.h"
 1895              		.file 29 "Inc/icmu.h"
 1896              		.file 30 "Inc/performance_test.h"
 1897              		.file 31 "Inc/global.h"
 1898              		.file 32 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_gpio.h"
 1899              		.file 33 "<built-in>"
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 44


DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:18     .text.MX_ADC1_Init:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:25     .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:234    .text.MX_ADC1_Init:00000104 $d
                            *COM*:0000006c hadc1
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:242    .text.MX_ADC2_Init:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:249    .text.MX_ADC2_Init:00000000 MX_ADC2_Init
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:400    .text.MX_ADC2_Init:000000b8 $d
                            *COM*:0000006c hadc2
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:408    .text.get_average_forceSensor_adc:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:415    .text.get_average_forceSensor_adc:00000000 get_average_forceSensor_adc
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:475    .text.get_average_forceSensor_adc:00000054 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:485    .text.get_average_force_data:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:492    .text.get_average_force_data:00000000 get_average_force_data
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:607    .text.get_average_force_data:000000b4 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:615    .text.ADC1_2_IRQHandler:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:622    .text.ADC1_2_IRQHandler:00000000 ADC1_2_IRQHandler
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:661    .text.ADC1_2_IRQHandler:0000002c $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:666    .text.Get_VOLT_Filter:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:673    .text.Get_VOLT_Filter:00000000 Get_VOLT_Filter
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:725    .text.Get_VOLT_Filter:0000003c $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:733    .text.pos_linearity_ini:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:740    .text.pos_linearity_ini:00000000 pos_linearity_ini
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:801    .text.pos_linearity_ini:00000050 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:807    .text.Pos_Correct:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:814    .text.Pos_Correct:00000000 Pos_Correct
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1016   .text.Pos_Correct:0000013c $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1029   .text.Get_Pos_Rod:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1036   .text.Get_Pos_Rod:00000000 Get_Pos_Rod
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1212   .text.Get_Pos_Rod:00000154 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1228   .text.check_linearity:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1235   .text.check_linearity:00000000 check_linearity
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1348   .text.check_linearity:00000088 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1353   .text.get_temperature_value:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1360   .text.get_temperature_value:00000000 get_temperature_value
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1442   .text.get_temperature_value:0000005c $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1448   .text.start_temperature_adc:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1455   .text.start_temperature_adc:00000000 start_temperature_adc
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1484   .text.start_temperature_adc:0000001c $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1490   .text.pos_linearity_set_default:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1497   .text.pos_linearity_set_default:00000000 pos_linearity_set_default
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1585   .text.pos_linearity_set_default:0000007c $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1781   .bss.pos_valid:00000000 pos_valid
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1767   .bss.pos_filterd:00000000 pos_filterd
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1774   .bss.pos_sum:00000000 pos_sum
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1760   .bss.pos_array:00000000 pos_array
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1753   .bss.index_pos_array:00000000 index_pos_array
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1648   .bss.MU_Value_error_cnt:00000000 MU_Value_error_cnt
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1660   .bss.Pos_Corrected_last:00000000 Pos_Corrected_last
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1794   .data.g_Rt_Map:00000000 g_Rt_Map
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1732   .bss.force_Sum:00000000 force_Sum
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1725   .bss.force_Array:00000000 force_Array
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1746   .bss.index_force_Array:00000000 index_force_Array
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1712   .bss.YBP_Sum:00000000 YBP_Sum
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1705   .bss.YBP_Array:00000000 YBP_Array
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1739   .bss.index_YBP_Array:00000000 index_YBP_Array
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 45


C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1641   .bss.MU_Value_base_0:00000000 MU_Value_base_0
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1787   .bss.sum_Pos_ADC_Array:00000000 sum_Pos_ADC_Array
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1634   .bss.Index_Pos_ADC_Array:00000000 Index_Pos_ADC_Array
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1654   .bss.Pos_ADC_Array:00000000 Pos_ADC_Array
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1718   .bss.calibration_value:00000000 calibration_value
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1623   .bss.Flag_TEMP_ADC_Array_Filled:00000000 Flag_TEMP_ADC_Array_Filled
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1628   .bss.Flag_VOLT_ADC_Array_Filled:00000000 Flag_VOLT_ADC_Array_Filled
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1678   .bss.TEMP_Filter:00000000 TEMP_Filter
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1698   .bss.VOLT_Filter:00000000 VOLT_Filter
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1672   .bss.TEMP_ADC_Array_Index:00000000 TEMP_ADC_Array_Index
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1691   .bss.VOLT_ADC_Array_Index:00000000 VOLT_ADC_Array_Index
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1666   .bss.TEMP_ADC_Array:00000000 TEMP_ADC_Array
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1685   .bss.VOLT_ADC_Array:00000000 VOLT_ADC_Array
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1624   .bss.Flag_TEMP_ADC_Array_Filled:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1629   .bss.Flag_VOLT_ADC_Array_Filled:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1631   .bss.Index_Pos_ADC_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1637   .bss.MU_Value_base_0:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1644   .bss.MU_Value_error_cnt:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1651   .bss.Pos_ADC_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1657   .bss.Pos_Corrected_last:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1663   .bss.TEMP_ADC_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1669   .bss.TEMP_ADC_Array_Index:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1675   .bss.TEMP_Filter:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1681   .bss.VOLT_ADC_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1688   .bss.VOLT_ADC_Array_Index:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1694   .bss.VOLT_Filter:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1701   .bss.YBP_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1708   .bss.YBP_Sum:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1715   .bss.calibration_value:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1721   .bss.force_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1728   .bss.force_Sum:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1735   .bss.index_YBP_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1742   .bss.index_force_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1749   .bss.index_pos_array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1756   .bss.pos_array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1763   .bss.pos_filterd:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1770   .bss.pos_sum:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1777   .bss.pos_valid:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1784   .bss.sum_Pos_ADC_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccRiwcja.s:1790   .data.g_Rt_Map:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADC_ConfigChannel
HAL_ADCEx_InjectedConfigChannel
HAL_ADCEx_Calibration_Start
HAL_ADCEx_Calibration_GetValue
HAL_ADCEx_Calibration_SetValue
Error_Handler
HAL_ADCEx_InjectedStart
g_CmdMap
__aeabi_ldivmod
HAL_GPIO_TogglePin
ServoPro_Fast
L_Slop_Array
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccRiwcja.s 			page 46


Encode_Single_to_Multi_R
g_pMU_value_offset
vlaue_icmu_offset_overturn
MU_Value
range_icmu_vlaue_need_addMax
g_MechanicsAngle_15bit
rod_pos_Muti_Encoder
g_pPos_ref_base_um
g_pMU_0mm_offset
pos_nm_MU150
HAL_ADC_Start
