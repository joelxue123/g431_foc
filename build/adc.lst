ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_ADC1_Init,"ax",%progbits
  18              		.align	1
  19              		.global	MX_ADC1_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_ADC1_Init:
  26              	.LFB333:
  27              		.file 1 "Src/adc.c"
   1:Src/adc.c     **** 
   2:Src/adc.c     **** #include "adc.h"
   3:Src/adc.c     **** #include "global.h"
   4:Src/adc.c     **** float bus_voltage_ = 0;
   5:Src/adc.c     **** volatile s16 VOLT_ADC_Array[VOLT_SAMPNUM] = {0};								//ï¿½ï¿½Ñ¹Ä£ï¿½ï¿½ï¿½ÅºÅµï¿½ADCÔ­Ê¼Öµ
   6:Src/adc.c     **** volatile s16 TEMP_ADC_Array[TEMP_SAMPNUM] = {0};								//ï¿½Â¶ï¿½Ä£ï¿½ï¿½ï¿½ÅºÅµï¿½ADCÔ­Ê¼Öµ
   7:Src/adc.c     **** volatile s16 VOLT_ADC_Array_Index = 0;
   8:Src/adc.c     **** volatile s16 TEMP_ADC_Array_Index = 0;
   9:Src/adc.c     **** volatile s16 VOLT_Filter = 0;																		//ï¿½ï¿½Ñ¹(mV)
  10:Src/adc.c     **** volatile s16 TEMP_Filter = 0;																		//ï¿½Â¶ï¿½(0.1ï¿½ï¿½)
  11:Src/adc.c     **** volatile u8 Flag_VOLT_ADC_Array_Filled = 0;											//ï¿½ï¿½Ñ¹ADCï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  12:Src/adc.c     **** volatile u8 Flag_TEMP_ADC_Array_Filled = 0;											//ï¿½Â¶ï¿½ADCï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  13:Src/adc.c     **** uint32_t calibration_value[4] = {0};
  14:Src/adc.c     **** #define NUM_POS_AFILTER 32
  15:Src/adc.c     **** s32 Pos_ADC_Array[NUM_POS_AFILTER] = {0};                     //Ì¼Ä¤Î»ï¿½ï¿½ADCï¿½ï¿½Æ½ï¿½ï¿½ï¿½Ë²ï
  16:Src/adc.c     **** s32 Index_Pos_ADC_Array = 0;                                  //Ì¼Ä¤Î»ï¿½ï¿½ADCï¿½ï¿½Æ½ï¿½ï¿½ï¿½Ë²ï
  17:Src/adc.c     **** s32 sum_Pos_ADC_Array = 0;                                  //Ì¼Ä¤Î»ï¿½ï¿½ADCï¿½ï¿½Æ½ï¿½ï¿½ï¿½Ë²ï¿½
  18:Src/adc.c     **** volatile s32 MU_Value_base_0 = 0;
  19:Src/adc.c     **** #define YBP_ARRAY_BIT 3 //5
  20:Src/adc.c     **** #define YBP_ARRAY_SIZE (1<<YBP_ARRAY_BIT)
  21:Src/adc.c     **** volatile uint16_t index_YBP_Array = 0;
  22:Src/adc.c     **** volatile int16_t YBP_Array[YBP_ARRAY_SIZE] = {0};
  23:Src/adc.c     **** volatile int32_t YBP_Sum = 0;
  24:Src/adc.c     **** 
  25:Src/adc.c     **** #define FORCE_ARRAY_BIT 0
  26:Src/adc.c     **** #define FORCE_ARRAY_SIZE (1<<FORCE_ARRAY_BIT)
  27:Src/adc.c     **** volatile uint16_t index_force_Array = 0;
  28:Src/adc.c     **** volatile int16_t force_Array[FORCE_ARRAY_SIZE] = {0};
  29:Src/adc.c     **** volatile int32_t force_Sum = 0;
  30:Src/adc.c     **** 
  31:Src/adc.c     **** ADC_HandleTypeDef hadc1;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 2


  32:Src/adc.c     **** ADC_HandleTypeDef hadc2;
  33:Src/adc.c     **** 
  34:Src/adc.c     **** volatile int16_t g_Rt_Map[71] = {11,18,23,29,34,12,43,48,52,57,62,68,73,79,86,93,101,110,120,130,14
  35:Src/adc.c     **** };
  36:Src/adc.c     **** 
  37:Src/adc.c     **** 
  38:Src/adc.c     **** 
  39:Src/adc.c     **** 
  40:Src/adc.c     **** 
  41:Src/adc.c     **** /**
  42:Src/adc.c     ****   * @brief ADC1 Initialization Function
  43:Src/adc.c     ****   * @param None
  44:Src/adc.c     ****   * @retval None
  45:Src/adc.c     ****   */
  46:Src/adc.c     ****  void MX_ADC1_Init(void)
  47:Src/adc.c     **** {
  28              		.loc 1 47 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 104
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 9AB0     		sub	sp, sp, #104
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 112
  48:Src/adc.c     **** 
  49:Src/adc.c     **** 	int factor;
  50:Src/adc.c     ****   /* USER CODE BEGIN ADC1_Init 0 */
  51:Src/adc.c     **** 
  52:Src/adc.c     ****   /* USER CODE END ADC1_Init 0 */
  53:Src/adc.c     **** 
  54:Src/adc.c     ****   ADC_MultiModeTypeDef multimode = {0};
  40              		.loc 1 54 0
  41 0004 0024     		movs	r4, #0
  42 0006 1794     		str	r4, [sp, #92]
  43 0008 1894     		str	r4, [sp, #96]
  44 000a 1994     		str	r4, [sp, #100]
  55:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig = {0};
  45              		.loc 1 55 0
  46 000c 2022     		movs	r2, #32
  47 000e 2146     		mov	r1, r4
  48 0010 0FA8     		add	r0, sp, #60
  49 0012 FFF7FEFF 		bl	memset
  50              	.LVL0:
  56:Src/adc.c     ****   ADC_InjectionConfTypeDef sConfigInjected = {0};
  51              		.loc 1 56 0
  52 0016 3C22     		movs	r2, #60
  53 0018 2146     		mov	r1, r4
  54 001a 6846     		mov	r0, sp
  55 001c FFF7FEFF 		bl	memset
  56              	.LVL1:
  57:Src/adc.c     **** 
  58:Src/adc.c     ****   /* USER CODE BEGIN ADC1_Init 1 */
  59:Src/adc.c     **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 3


  60:Src/adc.c     ****   /* USER CODE END ADC1_Init 1 */
  61:Src/adc.c     ****   /** Common config
  62:Src/adc.c     ****   */
  63:Src/adc.c     ****   hadc1.Instance = ADC1;
  57              		.loc 1 63 0
  58 0020 3848     		ldr	r0, .L11
  59 0022 4FF0A043 		mov	r3, #1342177280
  60 0026 0360     		str	r3, [r0]
  64:Src/adc.c     ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  61              		.loc 1 64 0
  62 0028 4FF44033 		mov	r3, #196608
  63 002c 4360     		str	r3, [r0, #4]
  65:Src/adc.c     ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  64              		.loc 1 65 0
  65 002e 8460     		str	r4, [r0, #8]
  66:Src/adc.c     ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  66              		.loc 1 66 0
  67 0030 C460     		str	r4, [r0, #12]
  67:Src/adc.c     ****   hadc1.Init.GainCompensation = 0;
  68              		.loc 1 67 0
  69 0032 0461     		str	r4, [r0, #16]
  68:Src/adc.c     ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  70              		.loc 1 68 0
  71 0034 0123     		movs	r3, #1
  72 0036 4361     		str	r3, [r0, #20]
  69:Src/adc.c     ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  73              		.loc 1 69 0
  74 0038 0822     		movs	r2, #8
  75 003a 8261     		str	r2, [r0, #24]
  70:Src/adc.c     ****   hadc1.Init.LowPowerAutoWait = DISABLE;
  76              		.loc 1 70 0
  77 003c 0477     		strb	r4, [r0, #28]
  71:Src/adc.c     ****   hadc1.Init.ContinuousConvMode = ENABLE;
  78              		.loc 1 71 0
  79 003e 4377     		strb	r3, [r0, #29]
  72:Src/adc.c     ****   hadc1.Init.NbrOfConversion = 1;
  80              		.loc 1 72 0
  81 0040 0362     		str	r3, [r0, #32]
  73:Src/adc.c     ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
  82              		.loc 1 73 0
  83 0042 80F82430 		strb	r3, [r0, #36]
  74:Src/adc.c     ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  84              		.loc 1 74 0
  85 0046 C462     		str	r4, [r0, #44]
  75:Src/adc.c     ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  86              		.loc 1 75 0
  87 0048 0463     		str	r4, [r0, #48]
  76:Src/adc.c     ****   hadc1.Init.DMAContinuousRequests = DISABLE;
  88              		.loc 1 76 0
  89 004a 80F83840 		strb	r4, [r0, #56]
  77:Src/adc.c     ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  90              		.loc 1 77 0
  91 004e C463     		str	r4, [r0, #60]
  78:Src/adc.c     ****   hadc1.Init.OversamplingMode = DISABLE;
  92              		.loc 1 78 0
  93 0050 80F84040 		strb	r4, [r0, #64]
  79:Src/adc.c     ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 4


  94              		.loc 1 79 0
  95 0054 FFF7FEFF 		bl	HAL_ADC_Init
  96              	.LVL2:
  97 0058 0028     		cmp	r0, #0
  98 005a 47D1     		bne	.L7
  99              	.L2:
  80:Src/adc.c     ****   {
  81:Src/adc.c     ****     Error_Handler();
  82:Src/adc.c     ****   }
  83:Src/adc.c     ****   /** Configure the ADC multi-mode
  84:Src/adc.c     ****   */
  85:Src/adc.c     ****   multimode.Mode = ADC_MODE_INDEPENDENT;
 100              		.loc 1 85 0
 101 005c 1AA9     		add	r1, sp, #104
 102 005e 0023     		movs	r3, #0
 103 0060 41F80C3D 		str	r3, [r1, #-12]!
  86:Src/adc.c     ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 104              		.loc 1 86 0
 105 0064 2748     		ldr	r0, .L11
 106 0066 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 107              	.LVL3:
 108 006a 0028     		cmp	r0, #0
 109 006c 41D1     		bne	.L8
 110              	.L3:
  87:Src/adc.c     ****   {
  88:Src/adc.c     ****     Error_Handler();
  89:Src/adc.c     ****   }
  90:Src/adc.c     ****   /** Configure Regular Channel
  91:Src/adc.c     ****   */
  92:Src/adc.c     **** 	#if 1
  93:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_4;
 111              		.loc 1 93 0
 112 006e 264B     		ldr	r3, .L11+4
 113 0070 0F93     		str	r3, [sp, #60]
  94:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 114              		.loc 1 94 0
 115 0072 0623     		movs	r3, #6
 116 0074 1093     		str	r3, [sp, #64]
  95:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 117              		.loc 1 95 0
 118 0076 1193     		str	r3, [sp, #68]
  96:Src/adc.c     ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 119              		.loc 1 96 0
 120 0078 7F23     		movs	r3, #127
 121 007a 1293     		str	r3, [sp, #72]
  97:Src/adc.c     ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 122              		.loc 1 97 0
 123 007c 0423     		movs	r3, #4
 124 007e 1393     		str	r3, [sp, #76]
  98:Src/adc.c     ****   sConfig.Offset = 0;
 125              		.loc 1 98 0
 126 0080 0023     		movs	r3, #0
 127 0082 1493     		str	r3, [sp, #80]
  99:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 128              		.loc 1 99 0
 129 0084 0FA9     		add	r1, sp, #60
 130 0086 1F48     		ldr	r0, .L11
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 5


 131 0088 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 132              	.LVL4:
 133 008c 0028     		cmp	r0, #0
 134 008e 33D1     		bne	.L9
 135              	.L4:
 100:Src/adc.c     ****   {
 101:Src/adc.c     ****     Error_Handler();
 102:Src/adc.c     ****   }
 103:Src/adc.c     **** 	#endif
 104:Src/adc.c     ****   /** Configure Injected Channel
 105:Src/adc.c     ****   */
 106:Src/adc.c     **** 
 107:Src/adc.c     **** 	#if 1 
 108:Src/adc.c     ****   sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 136              		.loc 1 108 0
 137 0090 1E4B     		ldr	r3, .L11+8
 138 0092 0093     		str	r3, [sp]
 109:Src/adc.c     ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 139              		.loc 1 109 0
 140 0094 0923     		movs	r3, #9
 141 0096 0193     		str	r3, [sp, #4]
 110:Src/adc.c     ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 142              		.loc 1 110 0
 143 0098 0323     		movs	r3, #3
 144 009a 0293     		str	r3, [sp, #8]
 111:Src/adc.c     ****   sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 145              		.loc 1 111 0
 146 009c 7F23     		movs	r3, #127
 147 009e 0393     		str	r3, [sp, #12]
 112:Src/adc.c     ****   sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 148              		.loc 1 112 0
 149 00a0 0423     		movs	r3, #4
 150 00a2 0493     		str	r3, [sp, #16]
 113:Src/adc.c     ****   sConfigInjected.InjectedOffset = 0;
 151              		.loc 1 113 0
 152 00a4 0023     		movs	r3, #0
 153 00a6 0593     		str	r3, [sp, #20]
 114:Src/adc.c     ****   sConfigInjected.InjectedNbrOfConversion = 1;
 154              		.loc 1 114 0
 155 00a8 0122     		movs	r2, #1
 156 00aa 0892     		str	r2, [sp, #32]
 115:Src/adc.c     ****   sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 157              		.loc 1 115 0
 158 00ac 8DF82430 		strb	r3, [sp, #36]
 116:Src/adc.c     ****   sConfigInjected.AutoInjectedConv = DISABLE;
 159              		.loc 1 116 0
 160 00b0 8DF82530 		strb	r3, [sp, #37]
 117:Src/adc.c     ****   sConfigInjected.QueueInjectedContext = DISABLE;
 161              		.loc 1 117 0
 162 00b4 8DF82630 		strb	r3, [sp, #38]
 118:Src/adc.c     ****   sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 163              		.loc 1 118 0
 164 00b8 8022     		movs	r2, #128
 165 00ba 0A92     		str	r2, [sp, #40]
 119:Src/adc.c     ****   sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 166              		.loc 1 119 0
 167 00bc 0B92     		str	r2, [sp, #44]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 6


 120:Src/adc.c     ****   sConfigInjected.InjecOversamplingMode = DISABLE;
 168              		.loc 1 120 0
 169 00be 8DF83030 		strb	r3, [sp, #48]
 121:Src/adc.c     **** 	
 122:Src/adc.c     ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 170              		.loc 1 122 0
 171 00c2 6946     		mov	r1, sp
 172 00c4 0F48     		ldr	r0, .L11
 173 00c6 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 174              	.LVL5:
 175 00ca C0B9     		cbnz	r0, .L10
 176              	.L5:
 123:Src/adc.c     ****   {
 124:Src/adc.c     ****     Error_Handler();
 125:Src/adc.c     ****   }
 126:Src/adc.c     **** 	#endif
 127:Src/adc.c     **** 	
 128:Src/adc.c     **** //  if (HAL_ADCEx_EnableInjectedQueue(&hadc1) != HAL_OK)
 129:Src/adc.c     **** //  {
 130:Src/adc.c     **** //    Error_Handler();
 131:Src/adc.c     **** //  }
 132:Src/adc.c     ****   /* USER CODE BEGIN ADC1_Init 2 */
 133:Src/adc.c     **** 
 134:Src/adc.c     ****   /* USER CODE END ADC1_Init 2 */
 135:Src/adc.c     **** 
 136:Src/adc.c     **** 	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 177              		.loc 1 136 0
 178 00cc 0D4C     		ldr	r4, .L11
 179 00ce 7F21     		movs	r1, #127
 180 00d0 2046     		mov	r0, r4
 181 00d2 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 182              	.LVL6:
 137:Src/adc.c     **** 	factor = HAL_ADCEx_Calibration_GetValue(&hadc1,ADC_SINGLE_ENDED);
 183              		.loc 1 137 0
 184 00d6 7F21     		movs	r1, #127
 185 00d8 2046     		mov	r0, r4
 186 00da FFF7FEFF 		bl	HAL_ADCEx_Calibration_GetValue
 187              	.LVL7:
 138:Src/adc.c     **** 	HAL_ADCEx_Calibration_SetValue(&hadc1,ADC_SINGLE_ENDED,factor);
 188              		.loc 1 138 0
 189 00de 0246     		mov	r2, r0
 190 00e0 7F21     		movs	r1, #127
 191 00e2 2046     		mov	r0, r4
 192              	.LVL8:
 193 00e4 FFF7FEFF 		bl	HAL_ADCEx_Calibration_SetValue
 194              	.LVL9:
 139:Src/adc.c     **** 	
 140:Src/adc.c     **** 	
 141:Src/adc.c     **** 	
 142:Src/adc.c     **** }
 195              		.loc 1 142 0
 196 00e8 1AB0     		add	sp, sp, #104
 197              	.LCFI2:
 198              		.cfi_remember_state
 199              		.cfi_def_cfa_offset 8
 200              		@ sp needed
 201 00ea 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 7


 202              	.L7:
 203              	.LCFI3:
 204              		.cfi_restore_state
 205              	.LBB2:
  81:Src/adc.c     ****   }
 206              		.loc 1 81 0
 207 00ec FFF7FEFF 		bl	Error_Handler
 208              	.LVL10:
 209 00f0 B4E7     		b	.L2
 210              	.L8:
 211              	.LBE2:
 212              	.LBB3:
  88:Src/adc.c     ****   }
 213              		.loc 1 88 0
 214 00f2 FFF7FEFF 		bl	Error_Handler
 215              	.LVL11:
 216 00f6 BAE7     		b	.L3
 217              	.L9:
 218              	.LBE3:
 219              	.LBB4:
 101:Src/adc.c     ****   }
 220              		.loc 1 101 0
 221 00f8 FFF7FEFF 		bl	Error_Handler
 222              	.LVL12:
 223 00fc C8E7     		b	.L4
 224              	.L10:
 225              	.LBE4:
 226              	.LBB5:
 124:Src/adc.c     ****   }
 227              		.loc 1 124 0
 228 00fe FFF7FEFF 		bl	Error_Handler
 229              	.LVL13:
 230 0102 E3E7     		b	.L5
 231              	.L12:
 232              		.align	2
 233              	.L11:
 234 0104 00000000 		.word	hadc1
 235 0108 1000C010 		.word	281018384
 236 010c 02003004 		.word	70254594
 237              	.LBE5:
 238              		.cfi_endproc
 239              	.LFE333:
 241              		.section	.text.MX_ADC2_Init,"ax",%progbits
 242              		.align	1
 243              		.global	MX_ADC2_Init
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu fpv4-sp-d16
 249              	MX_ADC2_Init:
 250              	.LFB334:
 143:Src/adc.c     **** 
 144:Src/adc.c     **** /**
 145:Src/adc.c     ****   * @brief ADC2 Initialization Function
 146:Src/adc.c     ****   * @param None
 147:Src/adc.c     ****   * @retval None
 148:Src/adc.c     ****   */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 8


 149:Src/adc.c     ****  void MX_ADC2_Init(void)
 150:Src/adc.c     **** {
 251              		.loc 1 150 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 64
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255 0000 10B5     		push	{r4, lr}
 256              	.LCFI4:
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 4, -8
 259              		.cfi_offset 14, -4
 260 0002 90B0     		sub	sp, sp, #64
 261              	.LCFI5:
 262              		.cfi_def_cfa_offset 72
 151:Src/adc.c     **** 	int factor;
 152:Src/adc.c     **** 
 153:Src/adc.c     ****   /* USER CODE BEGIN ADC2_Init 0 */
 154:Src/adc.c     **** 
 155:Src/adc.c     ****   /* USER CODE END ADC2_Init 0 */
 156:Src/adc.c     **** 
 157:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig = {0};
 158:Src/adc.c     **** ADC_InjectionConfTypeDef sConfigInjected = {0};
 263              		.loc 1 158 0
 264 0004 3C22     		movs	r2, #60
 265 0006 0021     		movs	r1, #0
 266 0008 01A8     		add	r0, sp, #4
 267 000a FFF7FEFF 		bl	memset
 268              	.LVL14:
 159:Src/adc.c     ****   /* USER CODE BEGIN ADC2_Init 1 */
 160:Src/adc.c     **** 
 161:Src/adc.c     ****   /* USER CODE END ADC2_Init 1 */
 162:Src/adc.c     ****   /** Common config
 163:Src/adc.c     ****   */
 164:Src/adc.c     ****   hadc2.Instance = ADC2;
 269              		.loc 1 164 0
 270 000e 2A48     		ldr	r0, .L19
 271 0010 2A4B     		ldr	r3, .L19+4
 272 0012 0360     		str	r3, [r0]
 165:Src/adc.c     ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 273              		.loc 1 165 0
 274 0014 4FF44033 		mov	r3, #196608
 275 0018 4360     		str	r3, [r0, #4]
 166:Src/adc.c     ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 276              		.loc 1 166 0
 277 001a 0023     		movs	r3, #0
 278 001c 8360     		str	r3, [r0, #8]
 167:Src/adc.c     ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 279              		.loc 1 167 0
 280 001e C360     		str	r3, [r0, #12]
 168:Src/adc.c     ****   hadc2.Init.GainCompensation = 0;
 281              		.loc 1 168 0
 282 0020 0361     		str	r3, [r0, #16]
 169:Src/adc.c     ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 283              		.loc 1 169 0
 284 0022 4361     		str	r3, [r0, #20]
 170:Src/adc.c     ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 285              		.loc 1 170 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 9


 286 0024 0422     		movs	r2, #4
 287 0026 8261     		str	r2, [r0, #24]
 171:Src/adc.c     ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 288              		.loc 1 171 0
 289 0028 0377     		strb	r3, [r0, #28]
 172:Src/adc.c     ****   hadc2.Init.ContinuousConvMode = DISABLE;
 290              		.loc 1 172 0
 291 002a 4377     		strb	r3, [r0, #29]
 173:Src/adc.c     ****   hadc2.Init.NbrOfConversion = 1;
 292              		.loc 1 173 0
 293 002c 0122     		movs	r2, #1
 294 002e 0262     		str	r2, [r0, #32]
 174:Src/adc.c     ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 295              		.loc 1 174 0
 296 0030 80F82430 		strb	r3, [r0, #36]
 175:Src/adc.c     ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 297              		.loc 1 175 0
 298 0034 C362     		str	r3, [r0, #44]
 176:Src/adc.c     ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 299              		.loc 1 176 0
 300 0036 0363     		str	r3, [r0, #48]
 177:Src/adc.c     ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 301              		.loc 1 177 0
 302 0038 80F83830 		strb	r3, [r0, #56]
 178:Src/adc.c     ****   hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 303              		.loc 1 178 0
 304 003c C363     		str	r3, [r0, #60]
 179:Src/adc.c     ****   hadc2.Init.OversamplingMode = DISABLE;
 305              		.loc 1 179 0
 306 003e 80F84030 		strb	r3, [r0, #64]
 180:Src/adc.c     ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 307              		.loc 1 180 0
 308 0042 FFF7FEFF 		bl	HAL_ADC_Init
 309              	.LVL15:
 310 0046 80BB     		cbnz	r0, .L17
 311              	.L14:
 181:Src/adc.c     ****   {
 182:Src/adc.c     ****     Error_Handler();
 183:Src/adc.c     ****   }
 184:Src/adc.c     ****   /** Configure Regular Channel
 185:Src/adc.c     ****   */
 186:Src/adc.c     **** //  sConfig.Channel = ADC_CHANNEL_2;
 187:Src/adc.c     **** //  sConfig.Rank = ADC_REGULAR_RANK_1;
 188:Src/adc.c     **** //  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 189:Src/adc.c     **** //  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 190:Src/adc.c     **** //  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 191:Src/adc.c     **** //  sConfig.Offset = 0;
 192:Src/adc.c     **** //  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 193:Src/adc.c     **** //  {
 194:Src/adc.c     **** //    Error_Handler();
 195:Src/adc.c     **** //  }
 196:Src/adc.c     **** 	
 197:Src/adc.c     **** 	 sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 312              		.loc 1 197 0
 313 0048 1D4B     		ldr	r3, .L19+8
 314 004a 0193     		str	r3, [sp, #4]
 198:Src/adc.c     ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 10


 315              		.loc 1 198 0
 316 004c 0923     		movs	r3, #9
 317 004e 0293     		str	r3, [sp, #8]
 199:Src/adc.c     ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 318              		.loc 1 199 0
 319 0050 0323     		movs	r3, #3
 320 0052 0393     		str	r3, [sp, #12]
 200:Src/adc.c     ****   sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 321              		.loc 1 200 0
 322 0054 7F23     		movs	r3, #127
 323 0056 0493     		str	r3, [sp, #16]
 201:Src/adc.c     ****   sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 324              		.loc 1 201 0
 325 0058 0423     		movs	r3, #4
 326 005a 0593     		str	r3, [sp, #20]
 202:Src/adc.c     ****   sConfigInjected.InjectedOffset = 0;
 327              		.loc 1 202 0
 328 005c 0023     		movs	r3, #0
 329 005e 0693     		str	r3, [sp, #24]
 203:Src/adc.c     ****   sConfigInjected.InjectedNbrOfConversion = 1;
 330              		.loc 1 203 0
 331 0060 0122     		movs	r2, #1
 332 0062 0992     		str	r2, [sp, #36]
 204:Src/adc.c     ****   sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 333              		.loc 1 204 0
 334 0064 8DF82830 		strb	r3, [sp, #40]
 205:Src/adc.c     ****   sConfigInjected.AutoInjectedConv = DISABLE;
 335              		.loc 1 205 0
 336 0068 8DF82930 		strb	r3, [sp, #41]
 206:Src/adc.c     ****   sConfigInjected.QueueInjectedContext = DISABLE;
 337              		.loc 1 206 0
 338 006c 8DF82A30 		strb	r3, [sp, #42]
 207:Src/adc.c     ****   sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 339              		.loc 1 207 0
 340 0070 8022     		movs	r2, #128
 341 0072 0B92     		str	r2, [sp, #44]
 208:Src/adc.c     ****   sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 342              		.loc 1 208 0
 343 0074 0C92     		str	r2, [sp, #48]
 209:Src/adc.c     ****   sConfigInjected.InjecOversamplingMode = DISABLE;
 344              		.loc 1 209 0
 345 0076 8DF83430 		strb	r3, [sp, #52]
 210:Src/adc.c     ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 346              		.loc 1 210 0
 347 007a 01A9     		add	r1, sp, #4
 348 007c 0E48     		ldr	r0, .L19
 349 007e FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 350              	.LVL16:
 351 0082 A8B9     		cbnz	r0, .L18
 352              	.L15:
 211:Src/adc.c     ****   {
 212:Src/adc.c     ****     Error_Handler();
 213:Src/adc.c     ****   }
 214:Src/adc.c     ****   /* USER CODE BEGIN ADC2_Init 2 */
 215:Src/adc.c     **** 
 216:Src/adc.c     ****   /* USER CODE END ADC2_Init 2 */
 217:Src/adc.c     **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 11


 218:Src/adc.c     **** 	
 219:Src/adc.c     **** 	HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED);
 353              		.loc 1 219 0
 354 0084 0C4C     		ldr	r4, .L19
 355 0086 7F21     		movs	r1, #127
 356 0088 2046     		mov	r0, r4
 357 008a FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 358              	.LVL17:
 220:Src/adc.c     **** 	factor = HAL_ADCEx_Calibration_GetValue(&hadc2,ADC_SINGLE_ENDED);
 359              		.loc 1 220 0
 360 008e 7F21     		movs	r1, #127
 361 0090 2046     		mov	r0, r4
 362 0092 FFF7FEFF 		bl	HAL_ADCEx_Calibration_GetValue
 363              	.LVL18:
 221:Src/adc.c     **** 	HAL_ADCEx_Calibration_SetValue(&hadc2,ADC_SINGLE_ENDED,factor);
 364              		.loc 1 221 0
 365 0096 0246     		mov	r2, r0
 366 0098 7F21     		movs	r1, #127
 367 009a 2046     		mov	r0, r4
 368              	.LVL19:
 369 009c FFF7FEFF 		bl	HAL_ADCEx_Calibration_SetValue
 370              	.LVL20:
 222:Src/adc.c     **** 	
 223:Src/adc.c     **** 		HAL_ADCEx_InjectedStart(&hadc2);
 371              		.loc 1 223 0
 372 00a0 2046     		mov	r0, r4
 373 00a2 FFF7FEFF 		bl	HAL_ADCEx_InjectedStart
 374              	.LVL21:
 224:Src/adc.c     **** }
 375              		.loc 1 224 0
 376 00a6 10B0     		add	sp, sp, #64
 377              	.LCFI6:
 378              		.cfi_remember_state
 379              		.cfi_def_cfa_offset 8
 380              		@ sp needed
 381 00a8 10BD     		pop	{r4, pc}
 382              	.L17:
 383              	.LCFI7:
 384              		.cfi_restore_state
 385              	.LBB6:
 182:Src/adc.c     ****   }
 386              		.loc 1 182 0
 387 00aa FFF7FEFF 		bl	Error_Handler
 388              	.LVL22:
 389 00ae CBE7     		b	.L14
 390              	.L18:
 391              	.LBE6:
 392              	.LBB7:
 212:Src/adc.c     ****   }
 393              		.loc 1 212 0
 394 00b0 FFF7FEFF 		bl	Error_Handler
 395              	.LVL23:
 396 00b4 E6E7     		b	.L15
 397              	.L20:
 398 00b6 00BF     		.align	2
 399              	.L19:
 400 00b8 00000000 		.word	hadc2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 12


 401 00bc 00010050 		.word	1342177536
 402 00c0 04006008 		.word	140509188
 403              	.LBE7:
 404              		.cfi_endproc
 405              	.LFE334:
 407              		.section	.text.start_temperature_adc,"ax",%progbits
 408              		.align	1
 409              		.global	start_temperature_adc
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 413              		.fpu fpv4-sp-d16
 415              	start_temperature_adc:
 416              	.LFB335:
 225:Src/adc.c     **** 
 226:Src/adc.c     **** 
 227:Src/adc.c     **** 
 228:Src/adc.c     **** 
 229:Src/adc.c     **** 
 230:Src/adc.c     **** void start_temperature_adc(void)
 231:Src/adc.c     **** {
 417              		.loc 1 231 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421 0000 10B5     		push	{r4, lr}
 422              	.LCFI8:
 423              		.cfi_def_cfa_offset 8
 424              		.cfi_offset 4, -8
 425              		.cfi_offset 14, -4
 232:Src/adc.c     **** 	HAL_ADC_Start(&hadc1);
 426              		.loc 1 232 0
 427 0002 0C4C     		ldr	r4, .L23
 428 0004 2046     		mov	r0, r4
 429 0006 FFF7FEFF 		bl	HAL_ADC_Start
 430              	.LVL24:
 233:Src/adc.c     **** 	//g_CmdMap[CMD_TEMP] = get_temperature_value(hadc1.Instance->DR);
 234:Src/adc.c     **** 	bus_voltage_ = ((float)(26.833f*3.3f*(hadc1.Instance->DR)))/4096.0f;
 431              		.loc 1 234 0
 432 000a 2368     		ldr	r3, [r4]
 433 000c D3ED107A 		vldr.32	s15, [r3, #64]	@ int
 434 0010 F8EE677A 		vcvt.f32.u32	s15, s15
 435 0014 9FED087A 		vldr.32	s14, .L23+4
 436 0018 67EE877A 		vmul.f32	s15, s15, s14
 437 001c 9FED077A 		vldr.32	s14, .L23+8
 438 0020 67EE877A 		vmul.f32	s15, s15, s14
 439 0024 064B     		ldr	r3, .L23+12
 440 0026 C3ED007A 		vstr.32	s15, [r3]
 235:Src/adc.c     **** 	g_CmdMap[CMD_TEMP] = 0;
 441              		.loc 1 235 0
 442 002a 064B     		ldr	r3, .L23+16
 443 002c 0022     		movs	r2, #0
 444 002e A3F85620 		strh	r2, [r3, #86]	@ movhi
 236:Src/adc.c     **** }
 445              		.loc 1 236 0
 446 0032 10BD     		pop	{r4, pc}
 447              	.L24:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 13


 448              		.align	2
 449              	.L23:
 450 0034 00000000 		.word	hadc1
 451 0038 0919B142 		.word	1118902537
 452 003c 00008039 		.word	964689920
 453 0040 00000000 		.word	.LANCHOR0
 454 0044 00000000 		.word	g_CmdMap
 455              		.cfi_endproc
 456              	.LFE335:
 458              		.section	.text.get_average_forceSensor_adc,"ax",%progbits
 459              		.align	1
 460              		.global	get_average_forceSensor_adc
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu fpv4-sp-d16
 466              	get_average_forceSensor_adc:
 467              	.LFB336:
 237:Src/adc.c     **** 
 238:Src/adc.c     **** 
 239:Src/adc.c     **** 
 240:Src/adc.c     **** 
 241:Src/adc.c     **** 
 242:Src/adc.c     **** 
 243:Src/adc.c     **** 
 244:Src/adc.c     **** //ADC2->JDR3  g_CmdMap[CMD_YBP_ADC_12BIT]  g_CmdMap[CMD_FORCE_ACT_RAW_PU]  g_CmdMap[CMD_FORCE_ACT_P
 245:Src/adc.c     **** void get_average_forceSensor_adc(void)
 246:Src/adc.c     **** {
 468              		.loc 1 246 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              		@ link register save eliminated.
 473 0000 10B4     		push	{r4}
 474              	.LCFI9:
 475              		.cfi_def_cfa_offset 4
 476              		.cfi_offset 4, -4
 477              	.LVL25:
 247:Src/adc.c     **** 	s16 data_in=0,data_out=0;	
 248:Src/adc.c     **** 	data_in = ADC2->JDR2;
 478              		.loc 1 248 0
 479 0002 144B     		ldr	r3, .L27
 480 0004 D3F88420 		ldr	r2, [r3, #132]
 481 0008 12B2     		sxth	r2, r2
 482              	.LVL26:
 249:Src/adc.c     **** 	data_out = YBP_Array[index_YBP_Array];
 483              		.loc 1 249 0
 484 000a 1349     		ldr	r1, .L27+4
 485 000c 0B88     		ldrh	r3, [r1]
 486 000e 9BB2     		uxth	r3, r3
 487 0010 124C     		ldr	r4, .L27+8
 488 0012 34F81300 		ldrh	r0, [r4, r3, lsl #1]
 489 0016 00B2     		sxth	r0, r0
 490              	.LVL27:
 250:Src/adc.c     **** 	YBP_Array[index_YBP_Array] = data_in;
 491              		.loc 1 250 0
 492 0018 0B88     		ldrh	r3, [r1]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 14


 493 001a 9BB2     		uxth	r3, r3
 494 001c 24F81320 		strh	r2, [r4, r3, lsl #1]	@ movhi
 251:Src/adc.c     **** 	index_YBP_Array= (index_YBP_Array + 1)%YBP_ARRAY_SIZE;
 495              		.loc 1 251 0
 496 0020 0B88     		ldrh	r3, [r1]
 497 0022 0133     		adds	r3, r3, #1
 498 0024 5C42     		rsbs	r4, r3, #0
 499 0026 03F00703 		and	r3, r3, #7
 500 002a 04F00704 		and	r4, r4, #7
 501 002e 58BF     		it	pl
 502 0030 6342     		rsbpl	r3, r4, #0
 503 0032 9BB2     		uxth	r3, r3
 504 0034 0B80     		strh	r3, [r1]	@ movhi
 252:Src/adc.c     **** 	YBP_Sum = YBP_Sum - data_out + data_in;
 505              		.loc 1 252 0
 506 0036 0A4B     		ldr	r3, .L27+12
 507 0038 1968     		ldr	r1, [r3]
 508 003a 091A     		subs	r1, r1, r0
 509 003c 0A44     		add	r2, r2, r1
 510              	.LVL28:
 511 003e 1A60     		str	r2, [r3]
 253:Src/adc.c     **** 	g_CmdMap[CMD_YBP_ADC_12BIT] = YBP_Sum>>YBP_ARRAY_BIT;	
 512              		.loc 1 253 0
 513 0040 1B68     		ldr	r3, [r3]
 514 0042 43F3CF03 		sbfx	r3, r3, #3, #16
 515 0046 074A     		ldr	r2, .L27+16
 516 0048 A2F86830 		strh	r3, [r2, #104]	@ movhi
 254:Src/adc.c     **** }
 517              		.loc 1 254 0
 518 004c 5DF8044B 		ldr	r4, [sp], #4
 519              	.LCFI10:
 520              		.cfi_restore 4
 521              		.cfi_def_cfa_offset 0
 522 0050 7047     		bx	lr
 523              	.L28:
 524 0052 00BF     		.align	2
 525              	.L27:
 526 0054 00010050 		.word	1342177536
 527 0058 00000000 		.word	.LANCHOR1
 528 005c 00000000 		.word	.LANCHOR2
 529 0060 00000000 		.word	.LANCHOR3
 530 0064 00000000 		.word	g_CmdMap
 531              		.cfi_endproc
 532              	.LFE336:
 534              		.global	__aeabi_ldivmod
 535              		.section	.text.get_average_force_data,"ax",%progbits
 536              		.align	1
 537              		.global	get_average_force_data
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 541              		.fpu fpv4-sp-d16
 543              	get_average_force_data:
 544              	.LFB337:
 255:Src/adc.c     **** void get_average_force_data(void)
 256:Src/adc.c     **** {
 545              		.loc 1 256 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 15


 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549 0000 38B5     		push	{r3, r4, r5, lr}
 550              	.LCFI11:
 551              		.cfi_def_cfa_offset 16
 552              		.cfi_offset 3, -16
 553              		.cfi_offset 4, -12
 554              		.cfi_offset 5, -8
 555              		.cfi_offset 14, -4
 556              	.LVL29:
 257:Src/adc.c     **** 	s16 force_act_raw_pu = 0,data_in=0,data_out=0;
 258:Src/adc.c     **** 	if(g_CmdMap[SYS_YBP_ADC_DIR] == 0)
 557              		.loc 1 258 0
 558 0002 2C4B     		ldr	r3, .L36
 559 0004 B3F89A32 		ldrh	r3, [r3, #666]
 560 0008 1BB2     		sxth	r3, r3
 561 000a 002B     		cmp	r3, #0
 562 000c 39D1     		bne	.L30
 259:Src/adc.c     **** 	{
 260:Src/adc.c     **** 		force_act_raw_pu = ((int64_t)(g_CmdMap[CMD_YBP_ADC_12BIT] - g_CmdMap[SYS_YBP_BASE_VALUE_12BIT])*1
 563              		.loc 1 260 0
 564 000e 294B     		ldr	r3, .L36
 565 0010 B3F86810 		ldrh	r1, [r3, #104]
 566 0014 09B2     		sxth	r1, r1
 567 0016 B3F89622 		ldrh	r2, [r3, #662]
 568 001a 12B2     		sxth	r2, r2
 569 001c 891A     		subs	r1, r1, r2
 570 001e CD17     		asrs	r5, r1, #31
 571 0020 AC03     		lsls	r4, r5, #14
 572 0022 B3F89822 		ldrh	r2, [r3, #664]
 573 0026 12B2     		sxth	r2, r2
 574 0028 D317     		asrs	r3, r2, #31
 575 002a 8803     		lsls	r0, r1, #14
 576 002c 44EA9141 		orr	r1, r4, r1, lsr #18
 577 0030 FFF7FEFF 		bl	__aeabi_ldivmod
 578              	.LVL30:
 579 0034 00B2     		sxth	r0, r0
 580              	.LVL31:
 581              	.L31:
 261:Src/adc.c     **** 	}
 262:Src/adc.c     **** 	else
 263:Src/adc.c     **** 	{
 264:Src/adc.c     **** 		force_act_raw_pu = ((int64_t)(g_CmdMap[SYS_YBP_BASE_VALUE_12BIT] - g_CmdMap[CMD_YBP_ADC_12BIT])*1
 265:Src/adc.c     **** 	}
 266:Src/adc.c     **** 	//
 267:Src/adc.c     **** 	if(g_CmdMap[CMD_FORCE_DIR] == 0)
 582              		.loc 1 267 0
 583 0036 1F4B     		ldr	r3, .L36
 584 0038 5B8D     		ldrh	r3, [r3, #42]
 585 003a 1BB2     		sxth	r3, r3
 586 003c 002B     		cmp	r3, #0
 587 003e 35D0     		beq	.L35
 268:Src/adc.c     **** 	{
 269:Src/adc.c     **** 		g_CmdMap[CMD_FORCE_ACT_RAW_PU] = force_act_raw_pu;
 270:Src/adc.c     **** 	}
 271:Src/adc.c     **** 	else
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 16


 272:Src/adc.c     **** 	{
 273:Src/adc.c     **** 		g_CmdMap[CMD_FORCE_ACT_RAW_PU] = 0-force_act_raw_pu;
 588              		.loc 1 273 0
 589 0040 4042     		negs	r0, r0
 590              	.LVL32:
 591 0042 00B2     		sxth	r0, r0
 592 0044 1B4B     		ldr	r3, .L36
 593 0046 A3F85A00 		strh	r0, [r3, #90]	@ movhi
 594              	.L33:
 274:Src/adc.c     **** 	}	
 275:Src/adc.c     **** 	data_in = g_CmdMap[CMD_FORCE_ACT_RAW_PU];
 595              		.loc 1 275 0
 596 004a 1A4C     		ldr	r4, .L36
 597 004c B4F85A30 		ldrh	r3, [r4, #90]
 598              	.LVL33:
 276:Src/adc.c     **** 	data_out = force_Array[index_force_Array];
 599              		.loc 1 276 0
 600 0050 194A     		ldr	r2, .L36+4
 601 0052 1188     		ldrh	r1, [r2]
 602 0054 89B2     		uxth	r1, r1
 603 0056 194D     		ldr	r5, .L36+8
 604 0058 35F81110 		ldrh	r1, [r5, r1, lsl #1]
 605 005c 08B2     		sxth	r0, r1
 606              	.LVL34:
 277:Src/adc.c     **** 	force_Array[index_force_Array] = data_in;
 607              		.loc 1 277 0
 608 005e 1188     		ldrh	r1, [r2]
 609              	.LVL35:
 610 0060 89B2     		uxth	r1, r1
 611 0062 25F81130 		strh	r3, [r5, r1, lsl #1]	@ movhi
 278:Src/adc.c     **** 	index_force_Array= (index_force_Array + 1)%FORCE_ARRAY_SIZE;
 612              		.loc 1 278 0
 613 0066 1188     		ldrh	r1, [r2]
 614 0068 0021     		movs	r1, #0
 615 006a 1180     		strh	r1, [r2]	@ movhi
 279:Src/adc.c     **** 	force_Sum = force_Sum - data_out + data_in;
 616              		.loc 1 279 0
 617 006c 144A     		ldr	r2, .L36+12
 618 006e 1168     		ldr	r1, [r2]
 619 0070 091A     		subs	r1, r1, r0
 620 0072 01FA83F3 		sxtah	r3, r1, r3
 621              	.LVL36:
 622 0076 1360     		str	r3, [r2]
 280:Src/adc.c     **** 	g_CmdMap[CMD_FORCE_ACT_PU] = force_Sum>>FORCE_ARRAY_BIT;
 623              		.loc 1 280 0
 624 0078 1368     		ldr	r3, [r2]
 625 007a 1BB2     		sxth	r3, r3
 626 007c A4F85230 		strh	r3, [r4, #82]	@ movhi
 281:Src/adc.c     **** }
 627              		.loc 1 281 0
 628 0080 38BD     		pop	{r3, r4, r5, pc}
 629              	.LVL37:
 630              	.L30:
 264:Src/adc.c     **** 	}
 631              		.loc 1 264 0
 632 0082 0C4B     		ldr	r3, .L36
 633 0084 B3F89612 		ldrh	r1, [r3, #662]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 17


 634 0088 09B2     		sxth	r1, r1
 635 008a B3F86820 		ldrh	r2, [r3, #104]
 636 008e 12B2     		sxth	r2, r2
 637 0090 891A     		subs	r1, r1, r2
 638 0092 CD17     		asrs	r5, r1, #31
 639 0094 AC03     		lsls	r4, r5, #14
 640 0096 B3F89822 		ldrh	r2, [r3, #664]
 641 009a 12B2     		sxth	r2, r2
 642 009c D317     		asrs	r3, r2, #31
 643 009e 8803     		lsls	r0, r1, #14
 644 00a0 44EA9141 		orr	r1, r4, r1, lsr #18
 645 00a4 FFF7FEFF 		bl	__aeabi_ldivmod
 646              	.LVL38:
 647 00a8 00B2     		sxth	r0, r0
 648              	.LVL39:
 649 00aa C4E7     		b	.L31
 650              	.L35:
 269:Src/adc.c     **** 	}
 651              		.loc 1 269 0
 652 00ac 014B     		ldr	r3, .L36
 653 00ae A3F85A00 		strh	r0, [r3, #90]	@ movhi
 654 00b2 CAE7     		b	.L33
 655              	.L37:
 656              		.align	2
 657              	.L36:
 658 00b4 00000000 		.word	g_CmdMap
 659 00b8 00000000 		.word	.LANCHOR4
 660 00bc 00000000 		.word	.LANCHOR5
 661 00c0 00000000 		.word	.LANCHOR6
 662              		.cfi_endproc
 663              	.LFE337:
 665              		.section	.text.ADC1_2_IRQHandler,"ax",%progbits
 666              		.align	1
 667              		.global	ADC1_2_IRQHandler
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 671              		.fpu fpv4-sp-d16
 673              	ADC1_2_IRQHandler:
 674              	.LFB338:
 282:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ø¹ï¿½
 283:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 284:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½Ä£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 285:Src/adc.c     **** void ADC1_2_IRQHandler(void)////ADC3_JEOCï¿½Ð¶ï¿½     Ö´ï¿½ï¿½Æµï¿½ï¿½ï¿½ï¿½PWMÆµï¿½ï¿½ï¿½ï¿½Í¬
 286:Src/adc.c     **** { 
 675              		.loc 1 286 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679 0000 08B5     		push	{r3, lr}
 680              	.LCFI12:
 681              		.cfi_def_cfa_offset 8
 682              		.cfi_offset 3, -8
 683              		.cfi_offset 14, -4
 287:Src/adc.c     ****   if( __HAL_ADC_GET_IT_SOURCE(&hadc1,ADC_IT_JEOS)!=RESET)
 684              		.loc 1 287 0
 685 0002 0A4B     		ldr	r3, .L42
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 18


 686 0004 1B68     		ldr	r3, [r3]
 687 0006 5B68     		ldr	r3, [r3, #4]
 688 0008 13F0400F 		tst	r3, #64
 689 000c 00D1     		bne	.L41
 690              	.L38:
 288:Src/adc.c     **** 	 {
 289:Src/adc.c     **** 		 HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 290:Src/adc.c     **** //		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 291:Src/adc.c     **** 			ADC1->ISR |= (u32)ADC_FLAG_JEOC; 
 292:Src/adc.c     **** 			ServoPro_Fast();
 293:Src/adc.c     **** //			get_average_forceSensor_adc();
 294:Src/adc.c     **** //		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 295:Src/adc.c     **** 	 }
 296:Src/adc.c     **** }
 691              		.loc 1 296 0
 692 000e 08BD     		pop	{r3, pc}
 693              	.L41:
 289:Src/adc.c     **** //		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 694              		.loc 1 289 0
 695 0010 4021     		movs	r1, #64
 696 0012 4FF09040 		mov	r0, #1207959552
 697 0016 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 698              	.LVL40:
 291:Src/adc.c     **** 			ServoPro_Fast();
 699              		.loc 1 291 0
 700 001a 4FF0A042 		mov	r2, #1342177280
 701 001e 1368     		ldr	r3, [r2]
 702 0020 43F02003 		orr	r3, r3, #32
 703 0024 1360     		str	r3, [r2]
 292:Src/adc.c     **** //			get_average_forceSensor_adc();
 704              		.loc 1 292 0
 705 0026 FFF7FEFF 		bl	ServoPro_Fast
 706              	.LVL41:
 707              		.loc 1 296 0
 708 002a F0E7     		b	.L38
 709              	.L43:
 710              		.align	2
 711              	.L42:
 712 002c 00000000 		.word	hadc1
 713              		.cfi_endproc
 714              	.LFE338:
 716              		.section	.text.Get_VOLT_Filter,"ax",%progbits
 717              		.align	1
 718              		.global	Get_VOLT_Filter
 719              		.syntax unified
 720              		.thumb
 721              		.thumb_func
 722              		.fpu fpv4-sp-d16
 724              	Get_VOLT_Filter:
 725              	.LFB339:
 297:Src/adc.c     **** s32 Get_VOLT_Filter(void) //Flag_VOLT_ADC_Array_Filled==1Ê±Ö´ï¿½ï¿½
 298:Src/adc.c     **** {
 726              		.loc 1 298 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730              		@ link register save eliminated.
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 19


 731              	.LVL42:
 299:Src/adc.c     **** 	s16 i = 0;
 300:Src/adc.c     **** 	s32 sum = 0;
 301:Src/adc.c     **** 	Flag_TEMP_ADC_Array_Filled = 0;
 732              		.loc 1 301 0
 733 0000 0023     		movs	r3, #0
 734 0002 0E4A     		ldr	r2, .L47
 735 0004 1370     		strb	r3, [r2]
 302:Src/adc.c     **** 	sum = 0;
 736              		.loc 1 302 0
 737 0006 1A46     		mov	r2, r3
 303:Src/adc.c     **** 	for(i=0;i<VOLT_SAMPNUM;i++)
 738              		.loc 1 303 0
 739 0008 06E0     		b	.L45
 740              	.LVL43:
 741              	.L46:
 304:Src/adc.c     **** 	{
 305:Src/adc.c     **** 		sum = sum + VOLT_ADC_Array[i];
 742              		.loc 1 305 0 discriminator 3
 743 000a 0D49     		ldr	r1, .L47+4
 744 000c 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 745 0010 02FA81F2 		sxtah	r2, r2, r1
 746              	.LVL44:
 303:Src/adc.c     **** 	for(i=0;i<VOLT_SAMPNUM;i++)
 747              		.loc 1 303 0 discriminator 3
 748 0014 0133     		adds	r3, r3, #1
 749              	.LVL45:
 750 0016 1BB2     		sxth	r3, r3
 751              	.LVL46:
 752              	.L45:
 303:Src/adc.c     **** 	for(i=0;i<VOLT_SAMPNUM;i++)
 753              		.loc 1 303 0 is_stmt 0 discriminator 1
 754 0018 132B     		cmp	r3, #19
 755 001a F6DD     		ble	.L46
 306:Src/adc.c     **** 	}
 307:Src/adc.c     **** 	VOLT_Filter = (800*sum)/(VOLT_SAMPNUM*905);
 756              		.loc 1 307 0 is_stmt 1
 757 001c 4FF44873 		mov	r3, #800
 758              	.LVL47:
 759 0020 03FB02F2 		mul	r2, r3, r2
 760              	.LVL48:
 761 0024 074B     		ldr	r3, .L47+8
 762 0026 83FB0213 		smull	r1, r3, r3, r2
 763 002a D217     		asrs	r2, r2, #31
 764 002c C2EB6333 		rsb	r3, r2, r3, asr #13
 765 0030 1BB2     		sxth	r3, r3
 766 0032 054A     		ldr	r2, .L47+12
 767 0034 1380     		strh	r3, [r2]	@ movhi
 308:Src/adc.c     **** 	return VOLT_Filter;
 768              		.loc 1 308 0
 769 0036 1088     		ldrh	r0, [r2]
 309:Src/adc.c     **** }
 770              		.loc 1 309 0
 771 0038 00B2     		sxth	r0, r0
 772 003a 7047     		bx	lr
 773              	.L48:
 774              		.align	2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 20


 775              	.L47:
 776 003c 00000000 		.word	.LANCHOR7
 777 0040 00000000 		.word	.LANCHOR8
 778 0044 5960DD73 		.word	1943887961
 779 0048 00000000 		.word	.LANCHOR9
 780              		.cfi_endproc
 781              	.LFE339:
 783              		.section	.text.pos_linearity_ini,"ax",%progbits
 784              		.align	1
 785              		.global	pos_linearity_ini
 786              		.syntax unified
 787              		.thumb
 788              		.thumb_func
 789              		.fpu fpv4-sp-d16
 791              	pos_linearity_ini:
 792              	.LFB340:
 310:Src/adc.c     **** //ADC ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½ï¿½ï¿½ï¿½ï¿½Ä¬ï¿½Ï²ï¿½ï¿½ï¿½ 700-3700 ï¿½ï¿½ 0 - 16384ï¿½ï¿½ï¿½Ô
 311:Src/adc.c     **** void pos_linearity_ini(void)
 312:Src/adc.c     **** {
 793              		.loc 1 312 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 0
 796              		@ frame_needed = 0, uses_anonymous_args = 0
 797              		@ link register save eliminated.
 798              	.LVL49:
 313:Src/adc.c     **** 	s16 i = 0;
 314:Src/adc.c     **** 	for(i=0;i<NUM_LINEARITY_SEG;i++)
 799              		.loc 1 314 0
 800 0000 0022     		movs	r2, #0
 801              	.LVL50:
 802 0002 BD2A     		cmp	r2, #189
 803 0004 23DC     		bgt	.L55
 312:Src/adc.c     **** 	s16 i = 0;
 804              		.loc 1 312 0
 805 0006 30B4     		push	{r4, r5}
 806              	.LCFI13:
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 4, -8
 809              		.cfi_offset 5, -4
 810              	.L51:
 315:Src/adc.c     **** 	{
 316:Src/adc.c     **** 		L_Slop_Array[i] = (((int32_t)(g_CmdMap[POS_LINEARITY_PU(i+1)] - g_CmdMap[POS_LINEARITY_PU(i)]))<<
 811              		.loc 1 316 0 discriminator 3
 812 0008 02F1B901 		add	r1, r2, #185
 813 000c 4900     		lsls	r1, r1, #1
 814 000e 4B1C     		adds	r3, r1, #1
 815 0010 0F48     		ldr	r0, .L56
 816 0012 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 817 0016 1BB2     		sxth	r3, r3
 818 0018 02F1B804 		add	r4, r2, #184
 819 001c 6400     		lsls	r4, r4, #1
 820 001e 651C     		adds	r5, r4, #1
 821 0020 30F81550 		ldrh	r5, [r0, r5, lsl #1]
 822 0024 2DB2     		sxth	r5, r5
 823 0026 5B1B     		subs	r3, r3, r5
 824 0028 9B02     		lsls	r3, r3, #10
 825 002a 30F81110 		ldrh	r1, [r0, r1, lsl #1]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 21


 826 002e 09B2     		sxth	r1, r1
 827 0030 30F81400 		ldrh	r0, [r0, r4, lsl #1]
 828 0034 00B2     		sxth	r0, r0
 829 0036 091A     		subs	r1, r1, r0
 830 0038 93FBF1F3 		sdiv	r3, r3, r1
 831 003c 0549     		ldr	r1, .L56+4
 832 003e 41F82230 		str	r3, [r1, r2, lsl #2]
 314:Src/adc.c     **** 	{
 833              		.loc 1 314 0 discriminator 3
 834 0042 0132     		adds	r2, r2, #1
 835              	.LVL51:
 836 0044 12B2     		sxth	r2, r2
 837              	.LVL52:
 838 0046 BD2A     		cmp	r2, #189
 839 0048 DEDD     		ble	.L51
 317:Src/adc.c     **** 	}
 318:Src/adc.c     **** }
 840              		.loc 1 318 0
 841 004a 30BC     		pop	{r4, r5}
 842              	.LCFI14:
 843              		.cfi_restore 5
 844              		.cfi_restore 4
 845              		.cfi_def_cfa_offset 0
 846 004c 7047     		bx	lr
 847              	.L55:
 848 004e 7047     		bx	lr
 849              	.L57:
 850              		.align	2
 851              	.L56:
 852 0050 00000000 		.word	g_CmdMap
 853 0054 00000000 		.word	L_Slop_Array
 854              		.cfi_endproc
 855              	.LFE340:
 857              		.section	.text.Pos_Correct,"ax",%progbits
 858              		.align	1
 859              		.global	Pos_Correct
 860              		.syntax unified
 861              		.thumb
 862              		.thumb_func
 863              		.fpu fpv4-sp-d16
 865              	Pos_Correct:
 866              	.LFB341:
 319:Src/adc.c     **** ////ADC ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½ï¿½ï¿½ï¿½ï¿½Ä¬ï¿½Ï²ï¿½ï¿½ï¿½ 700-3700 ï¿½ï¿½ 0 - 16384ï¿½ï¿½ï¿
 320:Src/adc.c     **** //void pos_linearity_set_default(void)
 321:Src/adc.c     **** //{
 322:Src/adc.c     **** //	s16 i = 0;
 323:Src/adc.c     **** //	for(i = 0;i < 31;i++)
 324:Src/adc.c     **** //	{
 325:Src/adc.c     **** //			g_CmdMap[POS_LINEARITY_ADC(i)]	= 700 + 90*i;	//Ì¼Ä¤ADCï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµã£¬ADCï¿½ï¿½Öµ
 326:Src/adc.c     **** //			g_CmdMap[POS_LINEARITY_PU(i)] 	= 0 + 16384*i/30;	//Ì¼Ä¤ADCï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµã£¬Êµï¿½ï¿½ï¿½Ð³
 327:Src/adc.c     **** //	}
 328:Src/adc.c     **** //	for(i=0;i<=29;i++)
 329:Src/adc.c     **** //	{
 330:Src/adc.c     **** //		L_Slop_Array[i] = (((int32_t)(g_CmdMap[POS_LINEARITY_PU(i+1)] - g_CmdMap[POS_LINEARITY_PU(i)]))
 331:Src/adc.c     **** //	}
 332:Src/adc.c     **** //}
 333:Src/adc.c     **** s16 Pos_Corrected_last = 0;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 22


 334:Src/adc.c     **** s16 MU_Value_error_cnt = 0;
 335:Src/adc.c     **** s16 index_pos_array = 0;
 336:Src/adc.c     **** s16 pos_array[128] = {0};
 337:Src/adc.c     **** s32 pos_sum = 0;
 338:Src/adc.c     **** s16 pos_filterd = 0;
 339:Src/adc.c     **** s16 pos_valid = 0;
 340:Src/adc.c     **** int32_t Pos_Correct(int32_t Pos_Org)
 341:Src/adc.c     **** {
 867              		.loc 1 341 0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 0
 870              		@ frame_needed = 0, uses_anonymous_args = 0
 871              		@ link register save eliminated.
 872              	.LVL53:
 873 0000 30B4     		push	{r4, r5}
 874              	.LCFI15:
 875              		.cfi_def_cfa_offset 8
 876              		.cfi_offset 4, -8
 877              		.cfi_offset 5, -4
 878              	.LVL54:
 342:Src/adc.c     **** 	s32 slopTotall = 0;
 343:Src/adc.c     **** 	s16 in_data,out_data;
 344:Src/adc.c     **** 	int32_t Pos_Corrected = 0;
 345:Src/adc.c     **** 	int32_t Index_A,Index_B = 0;
 346:Src/adc.c     **** 	s16 i = 0;
 347:Src/adc.c     **** 	if(Pos_Org>=g_CmdMap[POS_LINEARITY_ADC(0)] && Pos_Org<g_CmdMap[POS_LINEARITY_ADC(NUM_LINEARITY_SEG
 879              		.loc 1 347 0
 880 0002 4E4B     		ldr	r3, .L72
 881 0004 B3F8E032 		ldrh	r3, [r3, #736]
 882 0008 1BB2     		sxth	r3, r3
 883 000a 8342     		cmp	r3, r0
 884 000c 5ADC     		bgt	.L59
 885              		.loc 1 347 0 is_stmt 0 discriminator 1
 886 000e 4B4B     		ldr	r3, .L72
 887 0010 B3F8D835 		ldrh	r3, [r3, #1496]
 888 0014 1BB2     		sxth	r3, r3
 889 0016 8342     		cmp	r3, r0
 890 0018 54DD     		ble	.L59
 348:Src/adc.c     **** 	{
 349:Src/adc.c     **** 		//ï¿½ï¿½ï¿½Ö·ï¿½
 350:Src/adc.c     **** 		Index_A = 0;Index_B = NUM_LINEARITY_SEG;
 891              		.loc 1 350 0 is_stmt 1
 892 001a BE21     		movs	r1, #190
 893 001c 0024     		movs	r4, #0
 894 001e 00E0     		b	.L61
 895              	.LVL55:
 896              	.L67:
 351:Src/adc.c     **** 		while(1)
 352:Src/adc.c     **** 		{
 353:Src/adc.c     **** 			if(Index_B-Index_A == 1)
 354:Src/adc.c     **** 			{
 355:Src/adc.c     **** 				break;
 356:Src/adc.c     **** 			}
 357:Src/adc.c     **** 			i = (Index_A + Index_B)/2;
 358:Src/adc.c     **** 			if(Pos_Org<=g_CmdMap[POS_LINEARITY_ADC(i)])
 359:Src/adc.c     **** 			{
 360:Src/adc.c     **** 				Index_B = i;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 23


 897              		.loc 1 360 0
 898 0020 1946     		mov	r1, r3
 899              	.LVL56:
 900              	.L61:
 353:Src/adc.c     **** 			{
 901              		.loc 1 353 0
 902 0022 0B1B     		subs	r3, r1, r4
 903 0024 012B     		cmp	r3, #1
 904 0026 0FD0     		beq	.L60
 357:Src/adc.c     **** 			if(Pos_Org<=g_CmdMap[POS_LINEARITY_ADC(i)])
 905              		.loc 1 357 0
 906 0028 6318     		adds	r3, r4, r1
 907 002a 03EBD373 		add	r3, r3, r3, lsr #31
 908 002e 43F34F03 		sbfx	r3, r3, #1, #16
 358:Src/adc.c     **** 			{
 909              		.loc 1 358 0
 910 0032 03F1B802 		add	r2, r3, #184
 911 0036 5200     		lsls	r2, r2, #1
 912 0038 404D     		ldr	r5, .L72
 913 003a 35F81220 		ldrh	r2, [r5, r2, lsl #1]
 914 003e 12B2     		sxth	r2, r2
 915 0040 8242     		cmp	r2, r0
 916 0042 EDDA     		bge	.L67
 361:Src/adc.c     **** 			}
 362:Src/adc.c     **** 			else
 363:Src/adc.c     **** 			{
 364:Src/adc.c     **** 				Index_A = i;
 917              		.loc 1 364 0
 918 0044 1C46     		mov	r4, r3
 919              	.LVL57:
 920 0046 ECE7     		b	.L61
 921              	.LVL58:
 922              	.L60:
 365:Src/adc.c     **** 			}
 366:Src/adc.c     **** 		}
 367:Src/adc.c     **** 		Pos_Corrected = (((int32_t)(Pos_Org - g_CmdMap[POS_LINEARITY_ADC(Index_A)])* L_Slop_Array[Index_A
 923              		.loc 1 367 0
 924 0048 04F1B803 		add	r3, r4, #184
 925 004c 5B00     		lsls	r3, r3, #1
 926 004e 3B49     		ldr	r1, .L72
 927              	.LVL59:
 928 0050 31F81320 		ldrh	r2, [r1, r3, lsl #1]
 929 0054 12B2     		sxth	r2, r2
 930 0056 801A     		subs	r0, r0, r2
 931              	.LVL60:
 932 0058 394A     		ldr	r2, .L72+4
 933 005a 52F82420 		ldr	r2, [r2, r4, lsl #2]
 934 005e 02FB00F2 		mul	r2, r2, r0
 935 0062 0133     		adds	r3, r3, #1
 936 0064 31F81300 		ldrh	r0, [r1, r3, lsl #1]
 937 0068 00B2     		sxth	r0, r0
 938 006a 00EBA220 		add	r0, r0, r2, asr #10
 939              	.LVL61:
 940              	.L63:
 368:Src/adc.c     **** 	}
 369:Src/adc.c     **** 	else if(Pos_Org<g_CmdMap[POS_LINEARITY_ADC(0)])
 370:Src/adc.c     **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 24


 371:Src/adc.c     **** 		Pos_Corrected = Pos_Org-g_CmdMap[POS_LINEARITY_ADC(0)]; 
 372:Src/adc.c     **** 				if( Pos_Corrected < - 16384)
 373:Src/adc.c     **** 		{
 374:Src/adc.c     **** 			Pos_Corrected = -16384;
 375:Src/adc.c     **** 		}
 376:Src/adc.c     **** 	}	
 377:Src/adc.c     **** 	else
 378:Src/adc.c     **** 	{
 379:Src/adc.c     **** 			slopTotall = (((int32_t)(g_CmdMap[POS_LINEARITY_PU(NUM_LINEARITY_SEG)] - g_CmdMap[POS_LINEARITY_
 380:Src/adc.c     **** 			Pos_Corrected = (((int32_t)(Pos_Org - g_CmdMap[POS_LINEARITY_ADC(NUM_LINEARITY_SEG)])* slopTotal
 381:Src/adc.c     **** 			if( Pos_Corrected> 32767 )
 382:Src/adc.c     **** 			{
 383:Src/adc.c     **** 				Pos_Corrected = 32767;
 384:Src/adc.c     **** 			}
 385:Src/adc.c     **** 		
 386:Src/adc.c     **** 	}
 387:Src/adc.c     **** 	in_data = Pos_Corrected;
 941              		.loc 1 387 0
 942 006e 03B2     		sxth	r3, r0
 388:Src/adc.c     **** 	out_data = pos_array[index_pos_array];
 943              		.loc 1 388 0
 944 0070 344C     		ldr	r4, .L72+8
 945 0072 B4F90020 		ldrsh	r2, [r4]
 946 0076 3449     		ldr	r1, .L72+12
 947 0078 31F91250 		ldrsh	r5, [r1, r2, lsl #1]
 948              	.LVL62:
 389:Src/adc.c     **** 	pos_array[index_pos_array] = in_data;
 949              		.loc 1 389 0
 950 007c 21F81230 		strh	r3, [r1, r2, lsl #1]	@ movhi
 390:Src/adc.c     **** 	index_pos_array= (index_pos_array + 1)%128;
 951              		.loc 1 390 0
 952 0080 0132     		adds	r2, r2, #1
 953 0082 5142     		rsbs	r1, r2, #0
 954 0084 02F07F02 		and	r2, r2, #127
 955 0088 01F07F01 		and	r1, r1, #127
 956 008c 58BF     		it	pl
 957 008e 4A42     		rsbpl	r2, r1, #0
 958 0090 2280     		strh	r2, [r4]	@ movhi
 391:Src/adc.c     **** 	pos_sum = pos_sum - out_data + in_data;
 959              		.loc 1 391 0
 960 0092 2E49     		ldr	r1, .L72+16
 961 0094 0A68     		ldr	r2, [r1]
 962 0096 521B     		subs	r2, r2, r5
 963 0098 1344     		add	r3, r3, r2
 964 009a 0B60     		str	r3, [r1]
 392:Src/adc.c     **** 	pos_filterd = pos_sum>>7;
 965              		.loc 1 392 0
 966 009c 43F3CF13 		sbfx	r3, r3, #7, #16
 967 00a0 2B4A     		ldr	r2, .L72+20
 968 00a2 1380     		strh	r3, [r2]	@ movhi
 393:Src/adc.c     **** 	if(ABS(Pos_Corrected-pos_filterd)>8192)
 969              		.loc 1 393 0
 970 00a4 C31A     		subs	r3, r0, r3
 971 00a6 002B     		cmp	r3, #0
 972 00a8 B8BF     		it	lt
 973 00aa 5B42     		rsblt	r3, r3, #0
 974 00ac B3F5005F 		cmp	r3, #8192
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 25


 975 00b0 3BDC     		bgt	.L71
 394:Src/adc.c     **** 	{
 395:Src/adc.c     **** 		
 396:Src/adc.c     **** 		MU_Value_error_cnt++;
 397:Src/adc.c     **** 	//	if(MU_Value_error_cnt>10) while(1);
 398:Src/adc.c     **** 		return pos_valid;
 399:Src/adc.c     **** 	}
 400:Src/adc.c     **** 	else
 401:Src/adc.c     **** 	{
 402:Src/adc.c     **** 		pos_valid = Pos_Corrected - g_CmdMap[SYS_POS_OFFSET];
 976              		.loc 1 402 0
 977 00b2 224B     		ldr	r3, .L72
 978 00b4 B3F87E32 		ldrh	r3, [r3, #638]
 979 00b8 C01A     		subs	r0, r0, r3
 980              	.LVL63:
 981 00ba 00B2     		sxth	r0, r0
 982 00bc 254B     		ldr	r3, .L72+24
 983 00be 1880     		strh	r0, [r3]	@ movhi
 984              	.L58:
 403:Src/adc.c     **** 		return pos_valid;
 404:Src/adc.c     **** 	}	
 405:Src/adc.c     **** }
 985              		.loc 1 405 0
 986 00c0 30BC     		pop	{r4, r5}
 987              	.LCFI16:
 988              		.cfi_remember_state
 989              		.cfi_restore 5
 990              		.cfi_restore 4
 991              		.cfi_def_cfa_offset 0
 992              	.LVL64:
 993 00c2 7047     		bx	lr
 994              	.LVL65:
 995              	.L59:
 996              	.LCFI17:
 997              		.cfi_restore_state
 369:Src/adc.c     **** 	{
 998              		.loc 1 369 0
 999 00c4 1D4B     		ldr	r3, .L72
 1000 00c6 B3F8E032 		ldrh	r3, [r3, #736]
 1001 00ca 1BB2     		sxth	r3, r3
 1002 00cc 8342     		cmp	r3, r0
 1003 00ce 09DD     		ble	.L64
 371:Src/adc.c     **** 				if( Pos_Corrected < - 16384)
 1004              		.loc 1 371 0
 1005 00d0 1A4B     		ldr	r3, .L72
 1006 00d2 B3F8E032 		ldrh	r3, [r3, #736]
 1007 00d6 1BB2     		sxth	r3, r3
 1008 00d8 C01A     		subs	r0, r0, r3
 1009              	.LVL66:
 372:Src/adc.c     **** 		{
 1010              		.loc 1 372 0
 1011 00da 10F5804F 		cmn	r0, #16384
 1012 00de C6DA     		bge	.L63
 374:Src/adc.c     **** 		}
 1013              		.loc 1 374 0
 1014 00e0 1D48     		ldr	r0, .L72+28
 1015              	.LVL67:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 26


 1016 00e2 C4E7     		b	.L63
 1017              	.LVL68:
 1018              	.L64:
 379:Src/adc.c     **** 			Pos_Corrected = (((int32_t)(Pos_Org - g_CmdMap[POS_LINEARITY_ADC(NUM_LINEARITY_SEG)])* slopTotal
 1019              		.loc 1 379 0
 1020 00e4 154A     		ldr	r2, .L72
 1021 00e6 B2F8DA35 		ldrh	r3, [r2, #1498]
 1022 00ea 1BB2     		sxth	r3, r3
 1023 00ec B2F8E212 		ldrh	r1, [r2, #738]
 1024 00f0 09B2     		sxth	r1, r1
 1025 00f2 5B1A     		subs	r3, r3, r1
 1026 00f4 9B02     		lsls	r3, r3, #10
 1027 00f6 B2F8D815 		ldrh	r1, [r2, #1496]
 1028 00fa 09B2     		sxth	r1, r1
 1029 00fc B2F8E042 		ldrh	r4, [r2, #736]
 1030 0100 24B2     		sxth	r4, r4
 1031 0102 091B     		subs	r1, r1, r4
 1032 0104 93FBF1F3 		sdiv	r3, r3, r1
 1033              	.LVL69:
 380:Src/adc.c     **** 			if( Pos_Corrected> 32767 )
 1034              		.loc 1 380 0
 1035 0108 B2F8D815 		ldrh	r1, [r2, #1496]
 1036 010c 09B2     		sxth	r1, r1
 1037 010e 401A     		subs	r0, r0, r1
 1038              	.LVL70:
 1039 0110 03FB00F0 		mul	r0, r3, r0
 1040 0114 B2F8DA35 		ldrh	r3, [r2, #1498]
 1041              	.LVL71:
 1042 0118 1BB2     		sxth	r3, r3
 1043 011a 03EBA020 		add	r0, r3, r0, asr #10
 1044              	.LVL72:
 381:Src/adc.c     **** 			{
 1045              		.loc 1 381 0
 1046 011e B0F5004F 		cmp	r0, #32768
 1047 0122 A4DB     		blt	.L63
 383:Src/adc.c     **** 			}
 1048              		.loc 1 383 0
 1049 0124 47F6FF70 		movw	r0, #32767
 1050              	.LVL73:
 1051 0128 A1E7     		b	.L63
 1052              	.LVL74:
 1053              	.L71:
 396:Src/adc.c     **** 	//	if(MU_Value_error_cnt>10) while(1);
 1054              		.loc 1 396 0
 1055 012a 0C4A     		ldr	r2, .L72+32
 1056 012c 1388     		ldrh	r3, [r2]
 1057 012e 0133     		adds	r3, r3, #1
 1058 0130 1380     		strh	r3, [r2]	@ movhi
 398:Src/adc.c     **** 	}
 1059              		.loc 1 398 0
 1060 0132 084B     		ldr	r3, .L72+24
 1061 0134 B3F90000 		ldrsh	r0, [r3]
 1062              	.LVL75:
 1063 0138 C2E7     		b	.L58
 1064              	.L73:
 1065 013a 00BF     		.align	2
 1066              	.L72:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 27


 1067 013c 00000000 		.word	g_CmdMap
 1068 0140 00000000 		.word	L_Slop_Array
 1069 0144 00000000 		.word	.LANCHOR10
 1070 0148 00000000 		.word	.LANCHOR11
 1071 014c 00000000 		.word	.LANCHOR12
 1072 0150 00000000 		.word	.LANCHOR13
 1073 0154 00000000 		.word	.LANCHOR15
 1074 0158 00C0FFFF 		.word	-16384
 1075 015c 00000000 		.word	.LANCHOR14
 1076              		.cfi_endproc
 1077              	.LFE341:
 1079              		.section	.text.Get_Pos_Rod,"ax",%progbits
 1080              		.align	1
 1081              		.global	Get_Pos_Rod
 1082              		.syntax unified
 1083              		.thumb
 1084              		.thumb_func
 1085              		.fpu fpv4-sp-d16
 1087              	Get_Pos_Rod:
 1088              	.LFB342:
 406:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½ï¿½Æ¸ï¿½Ä©ï¿½ï¿½Î»ï¿½Ã£ï¿½ï¿½ï¿½Ïµï¿½ï¿½Ä©ï¿½Ë´Å±ï¿½ï¿½Åºï¿½ ï¿½ï¿½ Ì¼Ä¤Î»ï¿½ï¿½
 407:Src/adc.c     **** void Get_Pos_Rod(void)
 408:Src/adc.c     **** {
 1089              		.loc 1 408 0
 1090              		.cfi_startproc
 1091              		@ args = 0, pretend = 0, frame = 0
 1092              		@ frame_needed = 0, uses_anonymous_args = 0
 1093 0000 2DE97048 		push	{r4, r5, r6, fp, lr}
 1094              	.LCFI18:
 1095              		.cfi_def_cfa_offset 20
 1096              		.cfi_offset 4, -20
 1097              		.cfi_offset 5, -16
 1098              		.cfi_offset 6, -12
 1099              		.cfi_offset 11, -8
 1100              		.cfi_offset 14, -4
 1101 0004 83B0     		sub	sp, sp, #12
 1102              	.LCFI19:
 1103              		.cfi_def_cfa_offset 32
 409:Src/adc.c     **** 	s32 pos_noCorrect;
 410:Src/adc.c     **** 	if(g_CmdMap[SYS_MU_COMM_TO_PC] == 1)     //MU Ð¾Æ¬ï¿½ê¶¨Ä£Ê½
 1104              		.loc 1 410 0
 1105 0006 534B     		ldr	r3, .L83
 1106 0008 B3F81832 		ldrh	r3, [r3, #536]
 1107 000c 1BB2     		sxth	r3, r3
 1108 000e 012B     		cmp	r3, #1
 1109 0010 14D0     		beq	.L81
 411:Src/adc.c     **** 	{	
 412:Src/adc.c     **** 		Encode_Single_to_Multi_R(0,0,g_MechanicsAngle_15bit,&rod_pos_Muti_Encoder,0x8000,0x40000);
 413:Src/adc.c     **** 		g_CmdMap[CMD_POS_ACT_PU] = ((int64_t)rod_pos_Muti_Encoder*g_CmdMap[SCREW_UM_RES]/(32767*(int64_t)
 414:Src/adc.c     **** 	}
 415:Src/adc.c     **** 	else	
 416:Src/adc.c     **** 	{
 417:Src/adc.c     **** 		if(*g_pMU_value_offset > vlaue_icmu_offset_overturn)  
 1110              		.loc 1 417 0
 1111 0012 514B     		ldr	r3, .L83+4
 1112 0014 1A68     		ldr	r2, [r3]
 1113 0016 1168     		ldr	r1, [r2]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 28


 1114 0018 504B     		ldr	r3, .L83+8
 1115 001a 1B68     		ldr	r3, [r3]
 1116 001c 9942     		cmp	r1, r3
 1117 001e 57DD     		ble	.L78
 418:Src/adc.c     **** 		{
 419:Src/adc.c     **** 			if(MU_Value<range_icmu_vlaue_need_addMax)//range_icmu_vlaue_at_stroke
 1118              		.loc 1 419 0
 1119 0020 4F4B     		ldr	r3, .L83+12
 1120 0022 1968     		ldr	r1, [r3]
 1121 0024 4F4B     		ldr	r3, .L83+16
 1122 0026 1B68     		ldr	r3, [r3]
 1123 0028 9942     		cmp	r1, r3
 1124 002a 54DA     		bge	.L79
 420:Src/adc.c     **** 			{
 421:Src/adc.c     **** 				MU_Value = MAX_VALUE_ICMU+MU_Value;
 1125              		.loc 1 421 0
 1126 002c 4C49     		ldr	r1, .L83+12
 1127 002e 0B68     		ldr	r3, [r1]
 1128 0030 03F1FF13 		add	r3, r3, #16711935
 1129 0034 03F57F43 		add	r3, r3, #65280
 1130 0038 0B60     		str	r3, [r1]
 1131 003a 4CE0     		b	.L79
 1132              	.L81:
 412:Src/adc.c     **** 		g_CmdMap[CMD_POS_ACT_PU] = ((int64_t)rod_pos_Muti_Encoder*g_CmdMap[SCREW_UM_RES]/(32767*(int64_t)
 1133              		.loc 1 412 0
 1134 003c 4A4B     		ldr	r3, .L83+20
 1135 003e 1A68     		ldr	r2, [r3]
 1136 0040 4A4C     		ldr	r4, .L83+24
 1137 0042 4FF48023 		mov	r3, #262144
 1138 0046 0193     		str	r3, [sp, #4]
 1139 0048 4FF40043 		mov	r3, #32768
 1140 004c 0093     		str	r3, [sp]
 1141 004e 2346     		mov	r3, r4
 1142 0050 0021     		movs	r1, #0
 1143 0052 0846     		mov	r0, r1
 1144 0054 FFF7FEFF 		bl	Encode_Single_to_Multi_R
 1145              	.LVL76:
 413:Src/adc.c     **** 	}
 1146              		.loc 1 413 0
 1147 0058 2268     		ldr	r2, [r4]
 1148 005a D517     		asrs	r5, r2, #31
 1149 005c 3D4E     		ldr	r6, .L83
 1150 005e B6F84E02 		ldrh	r0, [r6, #590]
 1151 0062 00B2     		sxth	r0, r0
 1152 0064 C117     		asrs	r1, r0, #31
 1153 0066 02FB01F3 		mul	r3, r2, r1
 1154 006a 00FB0533 		mla	r3, r0, r5, r3
 1155 006e A2FB0001 		umull	r0, r1, r2, r0
 1156 0072 1944     		add	r1, r1, r3
 1157 0074 B6F85022 		ldrh	r2, [r6, #592]
 1158 0078 14B2     		sxth	r4, r2
 1159 007a E517     		asrs	r5, r4, #31
 1160 007c EE03     		lsls	r6, r5, #15
 1161 007e 4FEAC43B 		lsl	fp, r4, #15
 1162 0082 46EA544C 		orr	ip, r6, r4, lsr #17
 1163 0086 BBEB0402 		subs	r2, fp, r4
 1164 008a 6CEB0503 		sbc	r3, ip, r5
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 29


 1165 008e 1446     		mov	r4, r2
 1166 0090 1D46     		mov	r5, r3
 1167 0092 002A     		cmp	r2, #0
 1168 0094 73F10006 		sbcs	r6, r3, #0
 1169 0098 15DB     		blt	.L82
 1170              	.L76:
 1171 009a 220A     		lsrs	r2, r4, #8
 1172 009c 42EA0562 		orr	r2, r2, r5, lsl #24
 1173 00a0 2B12     		asrs	r3, r5, #8
 1174 00a2 FFF7FEFF 		bl	__aeabi_ldivmod
 1175              	.LVL77:
 1176 00a6 0446     		mov	r4, r0
 1177 00a8 8903     		lsls	r1, r1, #14
 1178 00aa 314B     		ldr	r3, .L83+28
 1179 00ac 1B68     		ldr	r3, [r3]
 1180 00ae 1A68     		ldr	r2, [r3]
 1181 00b0 D317     		asrs	r3, r2, #31
 1182 00b2 A003     		lsls	r0, r4, #14
 1183 00b4 41EA9441 		orr	r1, r1, r4, lsr #18
 1184 00b8 FFF7FEFF 		bl	__aeabi_ldivmod
 1185              	.LVL78:
 1186 00bc 00B2     		sxth	r0, r0
 1187 00be 254B     		ldr	r3, .L83
 1188 00c0 A3F84C00 		strh	r0, [r3, #76]	@ movhi
 1189 00c4 42E0     		b	.L74
 1190              	.L82:
 1191 00c6 12F1FF04 		adds	r4, r2, #255
 1192 00ca 43F10005 		adc	r5, r3, #0
 1193 00ce E4E7     		b	.L76
 1194              	.L78:
 422:Src/adc.c     **** 			}
 423:Src/adc.c     **** 			else
 424:Src/adc.c     **** 			{			
 425:Src/adc.c     **** 			}
 426:Src/adc.c     **** 		}
 427:Src/adc.c     **** 		else
 428:Src/adc.c     **** 		{
 429:Src/adc.c     **** 			MU_Value = MU_Value;
 1195              		.loc 1 429 0
 1196 00d0 234B     		ldr	r3, .L83+12
 1197 00d2 1968     		ldr	r1, [r3]
 1198 00d4 1960     		str	r1, [r3]
 1199              	.L79:
 430:Src/adc.c     **** 		}		
 431:Src/adc.c     **** 		
 432:Src/adc.c     **** 		#if 1
 433:Src/adc.c     **** 		MU_Value_base_0 = MU_Value-*g_pMU_value_offset;
 1200              		.loc 1 433 0
 1201 00d6 224B     		ldr	r3, .L83+12
 1202 00d8 1B68     		ldr	r3, [r3]
 1203 00da 1268     		ldr	r2, [r2]
 1204 00dc 9B1A     		subs	r3, r3, r2
 1205 00de 254A     		ldr	r2, .L83+32
 1206 00e0 1360     		str	r3, [r2]
 434:Src/adc.c     **** //		MU_Value_base_0 = MU_Value - 12803800;
 435:Src/adc.c     **** 		pos_nm_MU150 = (DISTANCE_NM_ICMU*(int64_t)(MU_Value_base_0-*g_pMU_0mm_offset))>>MU_DATA_SPI_RES;	
 1207              		.loc 1 435 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 30


 1208 00e2 1268     		ldr	r2, [r2]
 1209 00e4 244B     		ldr	r3, .L83+36
 1210 00e6 1B68     		ldr	r3, [r3]
 1211 00e8 1B68     		ldr	r3, [r3]
 1212 00ea D21A     		subs	r2, r2, r3
 1213 00ec D517     		asrs	r5, r2, #31
 1214 00ee 2349     		ldr	r1, .L83+40
 1215 00f0 A2FB01BC 		umull	fp, ip, r2, r1
 1216 00f4 01FB05CC 		mla	ip, r1, r5, ip
 1217 00f8 4FEA1B62 		lsr	r2, fp, #24
 1218 00fc 42EA0C22 		orr	r2, r2, ip, lsl #8
 1219 0100 1F4B     		ldr	r3, .L83+44
 1220 0102 1A60     		str	r2, [r3]
 436:Src/adc.c     **** //		pos_nm_MU150 = (DISTANCE_NM_ICMU*(int64_t)(MU_Value_base_0))>>MU_DATA_SPI_RES;		
 437:Src/adc.c     **** 		pos_noCorrect = ((int64_t)pos_nm_MU150<<14)/((int64_t)*g_pPos_ref_base_um*1000);
 1221              		.loc 1 437 0
 1222 0104 1D68     		ldr	r5, [r3]
 1223 0106 1A4B     		ldr	r3, .L83+28
 1224 0108 1B68     		ldr	r3, [r3]
 1225 010a 1C68     		ldr	r4, [r3]
 1226 010c 2046     		mov	r0, r4
 1227 010e E117     		asrs	r1, r4, #31
 1228 0110 4E01     		lsls	r6, r1, #5
 1229 0112 6201     		lsls	r2, r4, #5
 1230 0114 46EAD463 		orr	r3, r6, r4, lsr #27
 1231 0118 121B     		subs	r2, r2, r4
 1232 011a 63EB0103 		sbc	r3, r3, r1
 1233 011e 9C00     		lsls	r4, r3, #2
 1234 0120 44EA9274 		orr	r4, r4, r2, lsr #30
 1235 0124 9600     		lsls	r6, r2, #2
 1236 0126 3218     		adds	r2, r6, r0
 1237 0128 44EB0103 		adc	r3, r4, r1
 1238 012c D800     		lsls	r0, r3, #3
 1239 012e 40EA5270 		orr	r0, r0, r2, lsr #29
 1240 0132 D100     		lsls	r1, r2, #3
 1241 0134 0A46     		mov	r2, r1
 1242 0136 0346     		mov	r3, r0
 1243 0138 A803     		lsls	r0, r5, #14
 1244 013a A914     		asrs	r1, r5, #18
 1245 013c FFF7FEFF 		bl	__aeabi_ldivmod
 1246              	.LVL79:
 438:Src/adc.c     **** 		
 439:Src/adc.c     **** 		g_CmdMap[CMD_POS_ACT_PU] = Pos_Correct(pos_noCorrect);
 1247              		.loc 1 439 0
 1248 0140 FFF7FEFF 		bl	Pos_Correct
 1249              	.LVL80:
 1250 0144 00B2     		sxth	r0, r0
 1251 0146 034B     		ldr	r3, .L83
 1252 0148 A3F84C00 		strh	r0, [r3, #76]	@ movhi
 1253              	.L74:
 440:Src/adc.c     **** 		
 441:Src/adc.c     **** //		g_CmdMap[CMD_POS_ACT_PU] = pos_noCorrect;
 442:Src/adc.c     **** 		
 443:Src/adc.c     **** 		#endif
 444:Src/adc.c     **** 		
 445:Src/adc.c     **** //		MU_Value_base_0 = MU_Value - 10003800;
 446:Src/adc.c     **** //		pos_nm_MU150 = (DISTANCE_NM_ICMU*(int64_t)(MU_Value_base_0))>>MU_DATA_SPI_RES;		
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 31


 447:Src/adc.c     **** //		pos_noCorrect = ((int64_t)pos_nm_MU150<<14)/((int64_t)*g_pPos_ref_base_um*1000);
 448:Src/adc.c     **** //		g_CmdMap[CMD_POS_ACT_PU] = pos_noCorrect;
 449:Src/adc.c     **** 	}
 450:Src/adc.c     **** 	
 451:Src/adc.c     **** 	
 452:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã´ï¿½ï¿½ï¿½ï¿½ï¿½(IC_Hause_MU ï¿½ï¿½Õ¤ï¿½ï¿½ï¿½ï¿½)
 453:Src/adc.c     **** 		
 454:Src/adc.c     **** 	
 455:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½Ì¼Ä¤ADCï¿½ï¿½ï¿½ï¿½	
 456:Src/adc.c     **** //	g_CmdMap[CMD_POS_ADC_12BIT] = sum_Pos_ADC_Array>>5;//(ADC1->JDR2 & 0x0000FFFF);
 457:Src/adc.c     **** //	g_CmdMap[CMD_POS_ACT_PU_ADC] = Pos_Correct(g_CmdMap[CMD_POS_ADC_12BIT]);	
 458:Src/adc.c     **** 	
 459:Src/adc.c     **** 	
 460:Src/adc.c     **** //ï¿½ï¿½ï¿½ï¿½È¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½	
 461:Src/adc.c     **** //    ï¿½ï¿½ï¿½ï¿½ï¿½Æ¸ï¿½Êµï¿½ï¿½ï¿½Ð³ï¿½		
 462:Src/adc.c     **** //		Encode_Single_to_Multi_R(0,0,g_MechanicsAngle_15bit,&rod_pos_Muti_Encoder,0x8000,0x40000);	
 463:Src/adc.c     **** //		if(g_CmdMap[TAG_MOTOR_ENABLE] == 0 || PosAtDead_Flag == 1)
 464:Src/adc.c     **** //		{
 465:Src/adc.c     **** //			rod_pos_Muti_Encoder = 32767*((int64_t)(g_CmdMap[CMD_POS_ADC_12BIT_FILTER] - 300)*11*10000/330
 466:Src/adc.c     **** //		}
 467:Src/adc.c     **** //		g_CmdMap[CMD_POS_ACT_PU] = ((int64_t)rod_pos_Muti_Encoder*g_CmdMap[SCREW_UM_RES]/(32767*(int64_
 468:Src/adc.c     **** //	g_CmdMap[CMD_POS_ACT_PU] = g_CmdMap[CMD_POS_ACT_PU_ADC];	
 469:Src/adc.c     **** }
 1254              		.loc 1 469 0
 1255 014c 03B0     		add	sp, sp, #12
 1256              	.LCFI20:
 1257              		.cfi_def_cfa_offset 20
 1258              		@ sp needed
 1259 014e BDE87088 		pop	{r4, r5, r6, fp, pc}
 1260              	.L84:
 1261 0152 00BF     		.align	2
 1262              	.L83:
 1263 0154 00000000 		.word	g_CmdMap
 1264 0158 00000000 		.word	g_pMU_value_offset
 1265 015c 00000000 		.word	vlaue_icmu_offset_overturn
 1266 0160 00000000 		.word	MU_Value
 1267 0164 00000000 		.word	range_icmu_vlaue_need_addMax
 1268 0168 00000000 		.word	g_MechanicsAngle_15bit
 1269 016c 00000000 		.word	rod_pos_Muti_Encoder
 1270 0170 00000000 		.word	g_pPos_ref_base_um
 1271 0174 00000000 		.word	.LANCHOR16
 1272 0178 00000000 		.word	g_pMU_0mm_offset
 1273 017c 006CDC02 		.word	48000000
 1274 0180 00000000 		.word	pos_nm_MU150
 1275              		.cfi_endproc
 1276              	.LFE342:
 1278              		.section	.text.check_linearity,"ax",%progbits
 1279              		.align	1
 1280              		.global	check_linearity
 1281              		.syntax unified
 1282              		.thumb
 1283              		.thumb_func
 1284              		.fpu fpv4-sp-d16
 1286              	check_linearity:
 1287              	.LFB343:
 470:Src/adc.c     **** s16 check_linearity(void)
 471:Src/adc.c     **** {
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 32


 1288              		.loc 1 471 0
 1289              		.cfi_startproc
 1290              		@ args = 0, pretend = 0, frame = 0
 1291              		@ frame_needed = 0, uses_anonymous_args = 0
 1292              		@ link register save eliminated.
 1293              	.LVL81:
 472:Src/adc.c     **** 	s16 i = 0;
 473:Src/adc.c     **** 	if(g_CmdMap[POS_LINEARITY_ADC(0)]<0 || g_CmdMap[POS_LINEARITY_ADC(0)]>19000)
 1294              		.loc 1 473 0
 1295 0000 214B     		ldr	r3, .L101
 1296 0002 B3F8E032 		ldrh	r3, [r3, #736]
 1297 0006 13F4004F 		tst	r3, #32768
 1298 000a 2ED1     		bne	.L89
 1299              		.loc 1 473 0 is_stmt 0 discriminator 1
 1300 000c 1E4B     		ldr	r3, .L101
 1301 000e B3F8E032 		ldrh	r3, [r3, #736]
 1302 0012 1BB2     		sxth	r3, r3
 1303 0014 44F63822 		movw	r2, #19000
 1304 0018 9342     		cmp	r3, r2
 1305 001a 28DC     		bgt	.L90
 474:Src/adc.c     **** 	{
 475:Src/adc.c     **** 		return 0;
 476:Src/adc.c     **** 	}
 477:Src/adc.c     **** 	for(i = 1;i < NUM_LINEARITY_SEG;i++)
 1306              		.loc 1 477 0 is_stmt 1
 1307 001c 0123     		movs	r3, #1
 1308              	.LVL82:
 1309 001e BD2B     		cmp	r3, #189
 1310 0020 2FDC     		bgt	.L100
 471:Src/adc.c     **** 	s16 i = 0;
 1311              		.loc 1 471 0
 1312 0022 10B4     		push	{r4}
 1313              	.LCFI21:
 1314              		.cfi_def_cfa_offset 4
 1315              		.cfi_offset 4, -4
 1316              	.L88:
 478:Src/adc.c     **** 	{
 479:Src/adc.c     **** 			if(g_CmdMap[POS_LINEARITY_ADC(i)]<0|| g_CmdMap[POS_LINEARITY_ADC(i)]>19000)
 1317              		.loc 1 479 0
 1318 0024 1946     		mov	r1, r3
 1319 0026 03F1B802 		add	r2, r3, #184
 1320 002a 5200     		lsls	r2, r2, #1
 1321 002c 1648     		ldr	r0, .L101
 1322 002e 30F81200 		ldrh	r0, [r0, r2, lsl #1]
 1323 0032 10F4004F 		tst	r0, #32768
 1324 0036 1CD1     		bne	.L91
 1325              		.loc 1 479 0 is_stmt 0 discriminator 1
 1326 0038 1348     		ldr	r0, .L101
 1327 003a 30F81200 		ldrh	r0, [r0, r2, lsl #1]
 1328 003e 00B2     		sxth	r0, r0
 1329 0040 44F63824 		movw	r4, #19000
 1330 0044 A042     		cmp	r0, r4
 1331 0046 18DC     		bgt	.L92
 480:Src/adc.c     **** 			{
 481:Src/adc.c     **** 				return 0;
 482:Src/adc.c     **** 			}
 483:Src/adc.c     **** 			if(g_CmdMap[POS_LINEARITY_ADC(i-1)]>g_CmdMap[POS_LINEARITY_ADC(i)])
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 33


 1332              		.loc 1 483 0 is_stmt 1
 1333 0048 B731     		adds	r1, r1, #183
 1334 004a 4900     		lsls	r1, r1, #1
 1335 004c 0E48     		ldr	r0, .L101
 1336 004e 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 1337 0052 09B2     		sxth	r1, r1
 1338 0054 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 1339 0058 12B2     		sxth	r2, r2
 1340 005a 9142     		cmp	r1, r2
 1341 005c 0FDC     		bgt	.L93
 477:Src/adc.c     **** 	{
 1342              		.loc 1 477 0 discriminator 2
 1343 005e 0133     		adds	r3, r3, #1
 1344              	.LVL83:
 1345 0060 1BB2     		sxth	r3, r3
 1346              	.LVL84:
 1347 0062 BD2B     		cmp	r3, #189
 1348 0064 DEDD     		ble	.L88
 484:Src/adc.c     **** 			{
 485:Src/adc.c     **** 				return 0;
 486:Src/adc.c     **** 			}
 487:Src/adc.c     **** 	}
 488:Src/adc.c     **** 	return 1;
 1349              		.loc 1 488 0
 1350 0066 0120     		movs	r0, #1
 1351 0068 04E0     		b	.L86
 1352              	.LVL85:
 1353              	.L89:
 1354              	.LCFI22:
 1355              		.cfi_def_cfa_offset 0
 1356              		.cfi_restore 4
 475:Src/adc.c     **** 	}
 1357              		.loc 1 475 0
 1358 006a 0020     		movs	r0, #0
 1359 006c 7047     		bx	lr
 1360              	.L90:
 1361 006e 0020     		movs	r0, #0
 1362 0070 7047     		bx	lr
 1363              	.LVL86:
 1364              	.L91:
 1365              	.LCFI23:
 1366              		.cfi_def_cfa_offset 4
 1367              		.cfi_offset 4, -4
 481:Src/adc.c     **** 			}
 1368              		.loc 1 481 0
 1369 0072 0020     		movs	r0, #0
 1370              	.L86:
 489:Src/adc.c     **** }
 1371              		.loc 1 489 0
 1372 0074 5DF8044B 		ldr	r4, [sp], #4
 1373              	.LCFI24:
 1374              		.cfi_remember_state
 1375              		.cfi_restore 4
 1376              		.cfi_def_cfa_offset 0
 1377 0078 7047     		bx	lr
 1378              	.L92:
 1379              	.LCFI25:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 34


 1380              		.cfi_restore_state
 481:Src/adc.c     **** 			}
 1381              		.loc 1 481 0
 1382 007a 0020     		movs	r0, #0
 1383 007c FAE7     		b	.L86
 1384              	.L93:
 485:Src/adc.c     **** 			}
 1385              		.loc 1 485 0
 1386 007e 0020     		movs	r0, #0
 1387 0080 F8E7     		b	.L86
 1388              	.L100:
 1389              	.LCFI26:
 1390              		.cfi_def_cfa_offset 0
 1391              		.cfi_restore 4
 488:Src/adc.c     **** }
 1392              		.loc 1 488 0
 1393 0082 0120     		movs	r0, #1
 1394              		.loc 1 489 0
 1395 0084 7047     		bx	lr
 1396              	.L102:
 1397 0086 00BF     		.align	2
 1398              	.L101:
 1399 0088 00000000 		.word	g_CmdMap
 1400              		.cfi_endproc
 1401              	.LFE343:
 1403              		.section	.text.get_temperature_value,"ax",%progbits
 1404              		.align	1
 1405              		.global	get_temperature_value
 1406              		.syntax unified
 1407              		.thumb
 1408              		.thumb_func
 1409              		.fpu fpv4-sp-d16
 1411              	get_temperature_value:
 1412              	.LFB344:
 490:Src/adc.c     **** 
 491:Src/adc.c     **** //g_CmdMap[CMD_TEMP] = get_temperature_value(ADC1->JDR2)
 492:Src/adc.c     **** int16_t get_temperature_value(int16_t para_val)
 493:Src/adc.c     **** {
 1413              		.loc 1 493 0
 1414              		.cfi_startproc
 1415              		@ args = 0, pretend = 0, frame = 0
 1416              		@ frame_needed = 0, uses_anonymous_args = 0
 1417              		@ link register save eliminated.
 1418              	.LVL87:
 1419 0000 10B4     		push	{r4}
 1420              	.LCFI27:
 1421              		.cfi_def_cfa_offset 4
 1422              		.cfi_offset 4, -4
 1423              	.LVL88:
 494:Src/adc.c     **** 	int16_t index_A = 0,index_B = 70,index_Mid;
 495:Src/adc.c     **** 	para_val = 3300*para_val/NCT_VOLT;
 1424              		.loc 1 495 0
 1425 0002 40F6E444 		movw	r4, #3300
 1426 0006 04FB00F0 		mul	r0, r4, r0
 1427              	.LVL89:
 1428 000a 144C     		ldr	r4, .L110
 1429 000c 84FB0034 		smull	r3, r4, r4, r0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 35


 1430 0010 2318     		adds	r3, r4, r0
 1431 0012 C417     		asrs	r4, r0, #31
 1432 0014 C4EBE324 		rsb	r4, r4, r3, asr #11
 1433 0018 24B2     		sxth	r4, r4
 1434              	.LVL90:
 494:Src/adc.c     **** 	int16_t index_A = 0,index_B = 70,index_Mid;
 1435              		.loc 1 494 0
 1436 001a 4620     		movs	r0, #70
 1437 001c 0022     		movs	r2, #0
 1438 001e 06E0     		b	.L106
 1439              	.LVL91:
 1440              	.L107:
 496:Src/adc.c     **** 	while(1)
 497:Src/adc.c     **** 	{
 498:Src/adc.c     **** 		index_Mid = (index_A+index_B)>>1;		
 499:Src/adc.c     **** 		if(para_val<=g_Rt_Map[index_Mid])
 500:Src/adc.c     **** 		{
 501:Src/adc.c     **** 			index_B = index_Mid;
 1441              		.loc 1 501 0
 1442 0020 1846     		mov	r0, r3
 1443              	.LVL92:
 1444              	.L104:
 502:Src/adc.c     **** 		}
 503:Src/adc.c     **** 		else if(para_val>g_Rt_Map[index_Mid])
 504:Src/adc.c     **** 		{
 505:Src/adc.c     **** 			index_A = index_Mid;		
 506:Src/adc.c     **** 		}
 507:Src/adc.c     **** 		if(index_B == (index_A+1) || index_B == index_A)
 1445              		.loc 1 507 0
 1446 0022 1146     		mov	r1, r2
 1447 0024 531C     		adds	r3, r2, #1
 1448              	.LVL93:
 1449 0026 9842     		cmp	r0, r3
 1450 0028 11D0     		beq	.L105
 1451              		.loc 1 507 0 is_stmt 0 discriminator 1
 1452 002a 8242     		cmp	r2, r0
 1453 002c 0FD0     		beq	.L105
 1454              	.LVL94:
 1455              	.L106:
 498:Src/adc.c     **** 		if(para_val<=g_Rt_Map[index_Mid])
 1456              		.loc 1 498 0 is_stmt 1
 1457 002e 1318     		adds	r3, r2, r0
 1458 0030 5B10     		asrs	r3, r3, #1
 1459              	.LVL95:
 499:Src/adc.c     **** 		{
 1460              		.loc 1 499 0
 1461 0032 0B49     		ldr	r1, .L110+4
 1462 0034 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 1463 0038 09B2     		sxth	r1, r1
 1464 003a A142     		cmp	r1, r4
 1465 003c F0DA     		bge	.L107
 503:Src/adc.c     **** 		{
 1466              		.loc 1 503 0
 1467 003e 0849     		ldr	r1, .L110+4
 1468 0040 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 1469 0044 09B2     		sxth	r1, r1
 1470 0046 A142     		cmp	r1, r4
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 36


 1471 0048 EBDA     		bge	.L104
 505:Src/adc.c     **** 		}
 1472              		.loc 1 505 0
 1473 004a 1A46     		mov	r2, r3
 1474              	.LVL96:
 1475 004c E9E7     		b	.L104
 1476              	.LVL97:
 1477              	.L105:
 508:Src/adc.c     **** 		{
 509:Src/adc.c     **** 			break;
 510:Src/adc.c     **** 		}
 511:Src/adc.c     **** 	}
 512:Src/adc.c     **** 	return 2*index_A-40;
 1478              		.loc 1 512 0
 1479 004e A1F11400 		sub	r0, r1, #20
 1480              	.LVL98:
 1481 0052 4000     		lsls	r0, r0, #1
 513:Src/adc.c     **** }
 1482              		.loc 1 513 0
 1483 0054 00B2     		sxth	r0, r0
 1484 0056 5DF8044B 		ldr	r4, [sp], #4
 1485              	.LCFI28:
 1486              		.cfi_restore 4
 1487              		.cfi_def_cfa_offset 0
 1488              	.LVL99:
 1489 005a 7047     		bx	lr
 1490              	.L111:
 1491              		.align	2
 1492              	.L110:
 1493 005c EF09E09E 		.word	-1629484561
 1494 0060 00000000 		.word	.LANCHOR17
 1495              		.cfi_endproc
 1496              	.LFE344:
 1498              		.section	.text.pos_linearity_set_default,"ax",%progbits
 1499              		.align	1
 1500              		.global	pos_linearity_set_default
 1501              		.syntax unified
 1502              		.thumb
 1503              		.thumb_func
 1504              		.fpu fpv4-sp-d16
 1506              	pos_linearity_set_default:
 1507              	.LFB345:
 514:Src/adc.c     **** void pos_linearity_set_default(void)
 515:Src/adc.c     **** {
 1508              		.loc 1 515 0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 0
 1511              		@ frame_needed = 0, uses_anonymous_args = 0
 1512              		@ link register save eliminated.
 1513              	.LVL100:
 516:Src/adc.c     **** 	s16 i = 0;
 517:Src/adc.c     **** 	s32 inc_per_seg = 16384/NUM_LINEARITY_SEG;
 518:Src/adc.c     **** 	for(i = 0;i < NUM_LINEARITY_SEG+1;i++)
 1514              		.loc 1 518 0
 1515 0000 0023     		movs	r3, #0
 1516 0002 10E0     		b	.L113
 1517              	.LVL101:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 37


 1518              	.L114:
 519:Src/adc.c     **** 	{
 520:Src/adc.c     **** 			g_CmdMap[POS_LINEARITY_ADC(i)]	= inc_per_seg*i;	//
 1519              		.loc 1 520 0 discriminator 3
 1520 0004 99B2     		uxth	r1, r3
 1521 0006 B833     		adds	r3, r3, #184
 1522              	.LVL102:
 1523 0008 5B00     		lsls	r3, r3, #1
 1524 000a 01EB8102 		add	r2, r1, r1, lsl #2
 1525 000e 02EB0212 		add	r2, r2, r2, lsl #4
 1526 0012 0A44     		add	r2, r2, r1
 1527 0014 12B2     		sxth	r2, r2
 1528 0016 1948     		ldr	r0, .L122
 1529 0018 20F81320 		strh	r2, [r0, r3, lsl #1]	@ movhi
 521:Src/adc.c     **** 			g_CmdMap[POS_LINEARITY_PU(i)] 	= inc_per_seg*i;	//
 1530              		.loc 1 521 0 discriminator 3
 1531 001c 0133     		adds	r3, r3, #1
 1532 001e 20F81320 		strh	r2, [r0, r3, lsl #1]	@ movhi
 518:Src/adc.c     **** 	{
 1533              		.loc 1 518 0 discriminator 3
 1534 0022 4B1C     		adds	r3, r1, #1
 1535 0024 1BB2     		sxth	r3, r3
 1536              	.LVL103:
 1537              	.L113:
 518:Src/adc.c     **** 	{
 1538              		.loc 1 518 0 is_stmt 0 discriminator 1
 1539 0026 BE2B     		cmp	r3, #190
 1540 0028 ECDD     		ble	.L114
 522:Src/adc.c     **** 	}
 523:Src/adc.c     **** 	for(i=0;i<NUM_LINEARITY_SEG;i++)
 1541              		.loc 1 523 0 is_stmt 1
 1542 002a 0022     		movs	r2, #0
 1543              	.LVL104:
 1544 002c BD2A     		cmp	r2, #189
 1545 002e 23DC     		bgt	.L121
 515:Src/adc.c     **** 	s16 i = 0;
 1546              		.loc 1 515 0
 1547 0030 30B4     		push	{r4, r5}
 1548              	.LCFI29:
 1549              		.cfi_def_cfa_offset 8
 1550              		.cfi_offset 4, -8
 1551              		.cfi_offset 5, -4
 1552              	.L116:
 524:Src/adc.c     **** 	{
 525:Src/adc.c     **** 		L_Slop_Array[i] = (((int32_t)(g_CmdMap[POS_LINEARITY_PU(i+1)] - g_CmdMap[POS_LINEARITY_PU(i)]))<<
 1553              		.loc 1 525 0 discriminator 3
 1554 0032 02F1B901 		add	r1, r2, #185
 1555 0036 4900     		lsls	r1, r1, #1
 1556 0038 4B1C     		adds	r3, r1, #1
 1557 003a 1048     		ldr	r0, .L122
 1558 003c 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 1559 0040 1BB2     		sxth	r3, r3
 1560 0042 02F1B804 		add	r4, r2, #184
 1561 0046 6400     		lsls	r4, r4, #1
 1562 0048 651C     		adds	r5, r4, #1
 1563 004a 30F81550 		ldrh	r5, [r0, r5, lsl #1]
 1564 004e 2DB2     		sxth	r5, r5
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 38


 1565 0050 5B1B     		subs	r3, r3, r5
 1566 0052 9B02     		lsls	r3, r3, #10
 1567 0054 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 1568 0058 09B2     		sxth	r1, r1
 1569 005a 30F81400 		ldrh	r0, [r0, r4, lsl #1]
 1570 005e 00B2     		sxth	r0, r0
 1571 0060 091A     		subs	r1, r1, r0
 1572 0062 93FBF1F3 		sdiv	r3, r3, r1
 1573 0066 0649     		ldr	r1, .L122+4
 1574 0068 41F82230 		str	r3, [r1, r2, lsl #2]
 523:Src/adc.c     **** 	{
 1575              		.loc 1 523 0 discriminator 3
 1576 006c 0132     		adds	r2, r2, #1
 1577              	.LVL105:
 1578 006e 12B2     		sxth	r2, r2
 1579              	.LVL106:
 1580 0070 BD2A     		cmp	r2, #189
 1581 0072 DEDD     		ble	.L116
 526:Src/adc.c     **** 	}
 527:Src/adc.c     **** }
 1582              		.loc 1 527 0
 1583 0074 30BC     		pop	{r4, r5}
 1584              	.LCFI30:
 1585              		.cfi_restore 5
 1586              		.cfi_restore 4
 1587              		.cfi_def_cfa_offset 0
 1588 0076 7047     		bx	lr
 1589              	.L121:
 1590 0078 7047     		bx	lr
 1591              	.L123:
 1592 007a 00BF     		.align	2
 1593              	.L122:
 1594 007c 00000000 		.word	g_CmdMap
 1595 0080 00000000 		.word	L_Slop_Array
 1596              		.cfi_endproc
 1597              	.LFE345:
 1599              		.global	pos_valid
 1600              		.global	pos_filterd
 1601              		.global	pos_sum
 1602              		.global	pos_array
 1603              		.global	index_pos_array
 1604              		.global	MU_Value_error_cnt
 1605              		.global	Pos_Corrected_last
 1606              		.global	g_Rt_Map
 1607              		.comm	hadc2,108,4
 1608              		.comm	hadc1,108,4
 1609              		.global	force_Sum
 1610              		.global	force_Array
 1611              		.global	index_force_Array
 1612              		.global	YBP_Sum
 1613              		.global	YBP_Array
 1614              		.global	index_YBP_Array
 1615              		.global	MU_Value_base_0
 1616              		.global	sum_Pos_ADC_Array
 1617              		.global	Index_Pos_ADC_Array
 1618              		.global	Pos_ADC_Array
 1619              		.global	calibration_value
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 39


 1620              		.global	Flag_TEMP_ADC_Array_Filled
 1621              		.global	Flag_VOLT_ADC_Array_Filled
 1622              		.global	TEMP_Filter
 1623              		.global	VOLT_Filter
 1624              		.global	TEMP_ADC_Array_Index
 1625              		.global	VOLT_ADC_Array_Index
 1626              		.global	TEMP_ADC_Array
 1627              		.global	VOLT_ADC_Array
 1628              		.global	bus_voltage_
 1629              		.section	.bss.Flag_TEMP_ADC_Array_Filled,"aw",%nobits
 1630              		.set	.LANCHOR7,. + 0
 1633              	Flag_TEMP_ADC_Array_Filled:
 1634 0000 00       		.space	1
 1635              		.section	.bss.Flag_VOLT_ADC_Array_Filled,"aw",%nobits
 1638              	Flag_VOLT_ADC_Array_Filled:
 1639 0000 00       		.space	1
 1640              		.section	.bss.Index_Pos_ADC_Array,"aw",%nobits
 1641              		.align	2
 1644              	Index_Pos_ADC_Array:
 1645 0000 00000000 		.space	4
 1646              		.section	.bss.MU_Value_base_0,"aw",%nobits
 1647              		.align	2
 1648              		.set	.LANCHOR16,. + 0
 1651              	MU_Value_base_0:
 1652 0000 00000000 		.space	4
 1653              		.section	.bss.MU_Value_error_cnt,"aw",%nobits
 1654              		.align	1
 1655              		.set	.LANCHOR14,. + 0
 1658              	MU_Value_error_cnt:
 1659 0000 0000     		.space	2
 1660              		.section	.bss.Pos_ADC_Array,"aw",%nobits
 1661              		.align	2
 1664              	Pos_ADC_Array:
 1665 0000 00000000 		.space	128
 1665      00000000 
 1665      00000000 
 1665      00000000 
 1665      00000000 
 1666              		.section	.bss.Pos_Corrected_last,"aw",%nobits
 1667              		.align	1
 1670              	Pos_Corrected_last:
 1671 0000 0000     		.space	2
 1672              		.section	.bss.TEMP_ADC_Array,"aw",%nobits
 1673              		.align	2
 1676              	TEMP_ADC_Array:
 1677 0000 00000000 		.space	40
 1677      00000000 
 1677      00000000 
 1677      00000000 
 1677      00000000 
 1678              		.section	.bss.TEMP_ADC_Array_Index,"aw",%nobits
 1679              		.align	1
 1682              	TEMP_ADC_Array_Index:
 1683 0000 0000     		.space	2
 1684              		.section	.bss.TEMP_Filter,"aw",%nobits
 1685              		.align	1
 1688              	TEMP_Filter:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 40


 1689 0000 0000     		.space	2
 1690              		.section	.bss.VOLT_ADC_Array,"aw",%nobits
 1691              		.align	2
 1692              		.set	.LANCHOR8,. + 0
 1695              	VOLT_ADC_Array:
 1696 0000 00000000 		.space	40
 1696      00000000 
 1696      00000000 
 1696      00000000 
 1696      00000000 
 1697              		.section	.bss.VOLT_ADC_Array_Index,"aw",%nobits
 1698              		.align	1
 1701              	VOLT_ADC_Array_Index:
 1702 0000 0000     		.space	2
 1703              		.section	.bss.VOLT_Filter,"aw",%nobits
 1704              		.align	1
 1705              		.set	.LANCHOR9,. + 0
 1708              	VOLT_Filter:
 1709 0000 0000     		.space	2
 1710              		.section	.bss.YBP_Array,"aw",%nobits
 1711              		.align	2
 1712              		.set	.LANCHOR2,. + 0
 1715              	YBP_Array:
 1716 0000 00000000 		.space	16
 1716      00000000 
 1716      00000000 
 1716      00000000 
 1717              		.section	.bss.YBP_Sum,"aw",%nobits
 1718              		.align	2
 1719              		.set	.LANCHOR3,. + 0
 1722              	YBP_Sum:
 1723 0000 00000000 		.space	4
 1724              		.section	.bss.bus_voltage_,"aw",%nobits
 1725              		.align	2
 1726              		.set	.LANCHOR0,. + 0
 1729              	bus_voltage_:
 1730 0000 00000000 		.space	4
 1731              		.section	.bss.calibration_value,"aw",%nobits
 1732              		.align	2
 1735              	calibration_value:
 1736 0000 00000000 		.space	16
 1736      00000000 
 1736      00000000 
 1736      00000000 
 1737              		.section	.bss.force_Array,"aw",%nobits
 1738              		.align	2
 1739              		.set	.LANCHOR5,. + 0
 1742              	force_Array:
 1743 0000 0000     		.space	2
 1744              		.section	.bss.force_Sum,"aw",%nobits
 1745              		.align	2
 1746              		.set	.LANCHOR6,. + 0
 1749              	force_Sum:
 1750 0000 00000000 		.space	4
 1751              		.section	.bss.index_YBP_Array,"aw",%nobits
 1752              		.align	1
 1753              		.set	.LANCHOR1,. + 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 41


 1756              	index_YBP_Array:
 1757 0000 0000     		.space	2
 1758              		.section	.bss.index_force_Array,"aw",%nobits
 1759              		.align	1
 1760              		.set	.LANCHOR4,. + 0
 1763              	index_force_Array:
 1764 0000 0000     		.space	2
 1765              		.section	.bss.index_pos_array,"aw",%nobits
 1766              		.align	1
 1767              		.set	.LANCHOR10,. + 0
 1770              	index_pos_array:
 1771 0000 0000     		.space	2
 1772              		.section	.bss.pos_array,"aw",%nobits
 1773              		.align	2
 1774              		.set	.LANCHOR11,. + 0
 1777              	pos_array:
 1778 0000 00000000 		.space	256
 1778      00000000 
 1778      00000000 
 1778      00000000 
 1778      00000000 
 1779              		.section	.bss.pos_filterd,"aw",%nobits
 1780              		.align	1
 1781              		.set	.LANCHOR13,. + 0
 1784              	pos_filterd:
 1785 0000 0000     		.space	2
 1786              		.section	.bss.pos_sum,"aw",%nobits
 1787              		.align	2
 1788              		.set	.LANCHOR12,. + 0
 1791              	pos_sum:
 1792 0000 00000000 		.space	4
 1793              		.section	.bss.pos_valid,"aw",%nobits
 1794              		.align	1
 1795              		.set	.LANCHOR15,. + 0
 1798              	pos_valid:
 1799 0000 0000     		.space	2
 1800              		.section	.bss.sum_Pos_ADC_Array,"aw",%nobits
 1801              		.align	2
 1804              	sum_Pos_ADC_Array:
 1805 0000 00000000 		.space	4
 1806              		.section	.data.g_Rt_Map,"aw",%progbits
 1807              		.align	2
 1808              		.set	.LANCHOR17,. + 0
 1811              	g_Rt_Map:
 1812 0000 0B00     		.short	11
 1813 0002 1200     		.short	18
 1814 0004 1700     		.short	23
 1815 0006 1D00     		.short	29
 1816 0008 2200     		.short	34
 1817 000a 0C00     		.short	12
 1818 000c 2B00     		.short	43
 1819 000e 3000     		.short	48
 1820 0010 3400     		.short	52
 1821 0012 3900     		.short	57
 1822 0014 3E00     		.short	62
 1823 0016 4400     		.short	68
 1824 0018 4900     		.short	73
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 42


 1825 001a 4F00     		.short	79
 1826 001c 5600     		.short	86
 1827 001e 5D00     		.short	93
 1828 0020 6500     		.short	101
 1829 0022 6E00     		.short	110
 1830 0024 7800     		.short	120
 1831 0026 8200     		.short	130
 1832 0028 8D00     		.short	141
 1833 002a 9900     		.short	153
 1834 002c A700     		.short	167
 1835 002e B500     		.short	181
 1836 0030 C400     		.short	196
 1837 0032 D400     		.short	212
 1838 0034 E600     		.short	230
 1839 0036 F900     		.short	249
 1840 0038 0C01     		.short	268
 1841 003a 2201     		.short	290
 1842 003c 3801     		.short	312
 1843 003e 5001     		.short	336
 1844 0040 6801     		.short	360
 1845 0042 8301     		.short	387
 1846 0044 9E01     		.short	414
 1847 0046 BB01     		.short	443
 1848 0048 D901     		.short	473
 1849 004a F901     		.short	505
 1850 004c 1902     		.short	537
 1851 004e 3B02     		.short	571
 1852 0050 5F02     		.short	607
 1853 0052 8302     		.short	643
 1854 0054 A902     		.short	681
 1855 0056 D102     		.short	721
 1856 0058 F902     		.short	761
 1857 005a 2303     		.short	803
 1858 005c 4D03     		.short	845
 1859 005e 7903     		.short	889
 1860 0060 2300     		.short	35
 1861 0062 D503     		.short	981
 1862 0064 0404     		.short	1028
 1863 0066 3404     		.short	1076
 1864 0068 6504     		.short	1125
 1865 006a 9704     		.short	1175
 1866 006c CA04     		.short	1226
 1867 006e FE04     		.short	1278
 1868 0070 3205     		.short	1330
 1869 0072 6805     		.short	1384
 1870 0074 9D05     		.short	1437
 1871 0076 D405     		.short	1492
 1872 0078 0A06     		.short	1546
 1873 007a 4206     		.short	1602
 1874 007c 7906     		.short	1657
 1875 007e B106     		.short	1713
 1876 0080 E906     		.short	1769
 1877 0082 2107     		.short	1825
 1878 0084 5907     		.short	1881
 1879 0086 9107     		.short	1937
 1880 0088 C807     		.short	1992
 1881 008a 0008     		.short	2048
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 43


 1882 008c 3708     		.short	2103
 1883              		.text
 1884              	.Letext0:
 1885              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 1886              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 1887              		.file 4 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 1888              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 1889              		.file 6 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 1890              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1891              		.file 8 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 1892              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1893              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 1894              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_adc.h"
 1895              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_adc_ex.h"
 1896              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 1897              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_spi.h"
 1898              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 1899              		.file 16 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_uart.h"
 1900              		.file 17 "Inc/adc.h"
 1901              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 1902              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 1903              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-ea
 1904              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 1905              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 1906              		.file 23 "Inc/uart.h"
 1907              		.file 24 "Inc/pwm.h"
 1908              		.file 25 "Inc/spi_MEncoder.h"
 1909              		.file 26 "Inc/stm32_math_sin.h"
 1910              		.file 27 "Inc/pid.h"
 1911              		.file 28 "Inc/profile_joint.h"
 1912              		.file 29 "Inc/icmu.h"
 1913              		.file 30 "Inc/performance_test.h"
 1914              		.file 31 "Inc/global.h"
 1915              		.file 32 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_gpio.h"
 1916              		.file 33 "<built-in>"
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 44


DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:18     .text.MX_ADC1_Init:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:25     .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:234    .text.MX_ADC1_Init:00000104 $d
                            *COM*:0000006c hadc1
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:242    .text.MX_ADC2_Init:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:249    .text.MX_ADC2_Init:00000000 MX_ADC2_Init
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:400    .text.MX_ADC2_Init:000000b8 $d
                            *COM*:0000006c hadc2
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:408    .text.start_temperature_adc:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:415    .text.start_temperature_adc:00000000 start_temperature_adc
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:450    .text.start_temperature_adc:00000034 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:459    .text.get_average_forceSensor_adc:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:466    .text.get_average_forceSensor_adc:00000000 get_average_forceSensor_adc
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:526    .text.get_average_forceSensor_adc:00000054 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:536    .text.get_average_force_data:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:543    .text.get_average_force_data:00000000 get_average_force_data
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:658    .text.get_average_force_data:000000b4 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:666    .text.ADC1_2_IRQHandler:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:673    .text.ADC1_2_IRQHandler:00000000 ADC1_2_IRQHandler
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:712    .text.ADC1_2_IRQHandler:0000002c $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:717    .text.Get_VOLT_Filter:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:724    .text.Get_VOLT_Filter:00000000 Get_VOLT_Filter
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:776    .text.Get_VOLT_Filter:0000003c $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:784    .text.pos_linearity_ini:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:791    .text.pos_linearity_ini:00000000 pos_linearity_ini
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:852    .text.pos_linearity_ini:00000050 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:858    .text.Pos_Correct:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:865    .text.Pos_Correct:00000000 Pos_Correct
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1067   .text.Pos_Correct:0000013c $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1080   .text.Get_Pos_Rod:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1087   .text.Get_Pos_Rod:00000000 Get_Pos_Rod
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1263   .text.Get_Pos_Rod:00000154 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1279   .text.check_linearity:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1286   .text.check_linearity:00000000 check_linearity
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1399   .text.check_linearity:00000088 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1404   .text.get_temperature_value:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1411   .text.get_temperature_value:00000000 get_temperature_value
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1493   .text.get_temperature_value:0000005c $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1499   .text.pos_linearity_set_default:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1506   .text.pos_linearity_set_default:00000000 pos_linearity_set_default
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1594   .text.pos_linearity_set_default:0000007c $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1798   .bss.pos_valid:00000000 pos_valid
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1784   .bss.pos_filterd:00000000 pos_filterd
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1791   .bss.pos_sum:00000000 pos_sum
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1777   .bss.pos_array:00000000 pos_array
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1770   .bss.index_pos_array:00000000 index_pos_array
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1658   .bss.MU_Value_error_cnt:00000000 MU_Value_error_cnt
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1670   .bss.Pos_Corrected_last:00000000 Pos_Corrected_last
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1811   .data.g_Rt_Map:00000000 g_Rt_Map
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1749   .bss.force_Sum:00000000 force_Sum
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1742   .bss.force_Array:00000000 force_Array
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1763   .bss.index_force_Array:00000000 index_force_Array
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1722   .bss.YBP_Sum:00000000 YBP_Sum
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1715   .bss.YBP_Array:00000000 YBP_Array
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1756   .bss.index_YBP_Array:00000000 index_YBP_Array
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 45


C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1651   .bss.MU_Value_base_0:00000000 MU_Value_base_0
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1804   .bss.sum_Pos_ADC_Array:00000000 sum_Pos_ADC_Array
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1644   .bss.Index_Pos_ADC_Array:00000000 Index_Pos_ADC_Array
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1664   .bss.Pos_ADC_Array:00000000 Pos_ADC_Array
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1735   .bss.calibration_value:00000000 calibration_value
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1633   .bss.Flag_TEMP_ADC_Array_Filled:00000000 Flag_TEMP_ADC_Array_Filled
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1638   .bss.Flag_VOLT_ADC_Array_Filled:00000000 Flag_VOLT_ADC_Array_Filled
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1688   .bss.TEMP_Filter:00000000 TEMP_Filter
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1708   .bss.VOLT_Filter:00000000 VOLT_Filter
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1682   .bss.TEMP_ADC_Array_Index:00000000 TEMP_ADC_Array_Index
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1701   .bss.VOLT_ADC_Array_Index:00000000 VOLT_ADC_Array_Index
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1676   .bss.TEMP_ADC_Array:00000000 TEMP_ADC_Array
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1695   .bss.VOLT_ADC_Array:00000000 VOLT_ADC_Array
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1729   .bss.bus_voltage_:00000000 bus_voltage_
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1634   .bss.Flag_TEMP_ADC_Array_Filled:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1639   .bss.Flag_VOLT_ADC_Array_Filled:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1641   .bss.Index_Pos_ADC_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1647   .bss.MU_Value_base_0:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1654   .bss.MU_Value_error_cnt:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1661   .bss.Pos_ADC_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1667   .bss.Pos_Corrected_last:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1673   .bss.TEMP_ADC_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1679   .bss.TEMP_ADC_Array_Index:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1685   .bss.TEMP_Filter:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1691   .bss.VOLT_ADC_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1698   .bss.VOLT_ADC_Array_Index:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1704   .bss.VOLT_Filter:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1711   .bss.YBP_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1718   .bss.YBP_Sum:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1725   .bss.bus_voltage_:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1732   .bss.calibration_value:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1738   .bss.force_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1745   .bss.force_Sum:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1752   .bss.index_YBP_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1759   .bss.index_force_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1766   .bss.index_pos_array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1773   .bss.pos_array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1780   .bss.pos_filterd:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1787   .bss.pos_sum:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1794   .bss.pos_valid:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1801   .bss.sum_Pos_ADC_Array:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccEBCW65.s:1807   .data.g_Rt_Map:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADC_ConfigChannel
HAL_ADCEx_InjectedConfigChannel
HAL_ADCEx_Calibration_Start
HAL_ADCEx_Calibration_GetValue
HAL_ADCEx_Calibration_SetValue
Error_Handler
HAL_ADCEx_InjectedStart
HAL_ADC_Start
g_CmdMap
__aeabi_ldivmod
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccEBCW65.s 			page 46


HAL_GPIO_TogglePin
ServoPro_Fast
L_Slop_Array
Encode_Single_to_Multi_R
g_pMU_value_offset
vlaue_icmu_offset_overturn
MU_Value
range_icmu_vlaue_need_addMax
g_MechanicsAngle_15bit
rod_pos_Muti_Encoder
g_pPos_ref_base_um
g_pMU_0mm_offset
pos_nm_MU150
