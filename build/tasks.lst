ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB18:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 32


1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 33


1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1806 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1814 0
  34 0000 50B1     		cbz	r0, .L8
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1817 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0C4A     		ldr	r2, .L9
  38 0006 9142     		cmp	r1, r2
  39 0008 0FD1     		bne	.L5
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  40              		.loc 1 1820 0
  41 000a 836A     		ldr	r3, [r0, #40]
  42 000c 0B4A     		ldr	r2, .L9+4
  43 000e 9342     		cmp	r3, r2
  44 0010 0DD0     		beq	.L6
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  45              		.loc 1 1824 0
  46 0012 73B1     		cbz	r3, .L7
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  47              		.loc 1 1807 0
  48 0014 0020     		movs	r0, #0
  49              	.LVL1:
  50 0016 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
  53              	.LBB102:
  54              	.LBB103:
  55              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 34


   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 35


  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 36


 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 37


 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  56              		.loc 2 195 0
  57              		.syntax unified
  58              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0018 4FF05003 			mov r3, #80												
  60 001c 83F31188 		msr basepri, r3											
  61 0020 BFF36F8F 		isb														
  62 0024 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              	.LVL3:
  66              		.thumb
  67              		.syntax unified
  68              	.L3:
  69 0028 FEE7     		b	.L3
  70              	.L5:
  71              	.LBE103:
  72              	.LBE102:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  73              		.loc 1 1807 0
  74 002a 0020     		movs	r0, #0
  75              	.LVL4:
  76 002c 7047     		bx	lr
  77              	.LVL5:
  78              	.L6:
  79 002e 0020     		movs	r0, #0
  80              	.LVL6:
  81 0030 7047     		bx	lr
  82              	.LVL7:
  83              	.L7:
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  84              		.loc 1 1826 0
  85 0032 0120     		movs	r0, #1
  86              	.LVL8:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 38


1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  87              		.loc 1 1844 0
  88 0034 7047     		bx	lr
  89              	.L10:
  90 0036 00BF     		.align	2
  91              	.L9:
  92 0038 00000000 		.word	.LANCHOR0
  93 003c 00000000 		.word	.LANCHOR1
  94              		.cfi_endproc
  95              	.LFE18:
  97              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	prvTaskCheckFreeStackSpace:
 105              	.LFB48:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 39


1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 40


1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 41


1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 42


2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 43


2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 44


2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 45


2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 46


2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 47


2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 48


2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 49


2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 50


2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 51


2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 52


2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 53


2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 54


2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 55


2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 56


2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 57


2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 58


2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 59


3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 60


3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 61


3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 62


3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 63


3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 64


3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 65


3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 66


3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 67


3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 68


3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 69


3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 70


3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 71


3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 72


3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 106              		.loc 1 3800 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 73


 111              	.LVL9:
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 112              		.loc 1 3801 0
 113 0000 0023     		movs	r3, #0
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 114              		.loc 1 3803 0
 115 0002 01E0     		b	.L12
 116              	.LVL10:
 117              	.L13:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 118              		.loc 1 3805 0
 119 0004 0130     		adds	r0, r0, #1
 120              	.LVL11:
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 121              		.loc 1 3806 0
 122 0006 0133     		adds	r3, r3, #1
 123              	.LVL12:
 124              	.L12:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 125              		.loc 1 3803 0
 126 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 127 000a A52A     		cmp	r2, #165
 128 000c FAD0     		beq	.L13
 129              	.LVL13:
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 130              		.loc 1 3812 0
 131 000e C3F38F00 		ubfx	r0, r3, #2, #16
 132              	.LVL14:
 133 0012 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE48:
 137              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 138              		.align	1
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv4-sp-d16
 144              	prvResetNextTaskUnblockTime:
 145              	.LFB50:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 74


3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 75


3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 76


3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 146              		.loc 1 3944 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 151              		.loc 1 3947 0
 152 0000 084B     		ldr	r3, .L18
 153 0002 1B68     		ldr	r3, [r3]
 154 0004 1B68     		ldr	r3, [r3]
 155 0006 3BB1     		cbz	r3, .L17
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 156              		.loc 1 3961 0
 157 0008 064B     		ldr	r3, .L18
 158 000a 1B68     		ldr	r3, [r3]
 159 000c DB68     		ldr	r3, [r3, #12]
 160 000e DB68     		ldr	r3, [r3, #12]
 161              	.LVL15:
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 162              		.loc 1 3962 0
 163 0010 5A68     		ldr	r2, [r3, #4]
 164 0012 054B     		ldr	r3, .L18+4
 165              	.LVL16:
 166 0014 1A60     		str	r2, [r3]
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 167              		.loc 1 3964 0
 168 0016 7047     		bx	lr
 169              	.L17:
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 170              		.loc 1 3953 0
 171 0018 034B     		ldr	r3, .L18+4
 172 001a 4FF0FF32 		mov	r2, #-1
 173 001e 1A60     		str	r2, [r3]
 174 0020 7047     		bx	lr
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 77


 175              	.L19:
 176 0022 00BF     		.align	2
 177              	.L18:
 178 0024 00000000 		.word	.LANCHOR2
 179 0028 00000000 		.word	.LANCHOR3
 180              		.cfi_endproc
 181              	.LFE50:
 183              		.section	.text.prvDeleteTCB,"ax",%progbits
 184              		.align	1
 185              		.syntax unified
 186              		.thumb
 187              		.thumb_func
 188              		.fpu fpv4-sp-d16
 190              	prvDeleteTCB:
 191              	.LFB49:
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 192              		.loc 1 3888 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              	.LVL17:
 197 0000 10B5     		push	{r4, lr}
 198              	.LCFI0:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 4, -8
 201              		.cfi_offset 14, -4
 202 0002 0446     		mov	r4, r0
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 203              		.loc 1 3908 0
 204 0004 006B     		ldr	r0, [r0, #48]
 205              	.LVL18:
 206 0006 FFF7FEFF 		bl	vPortFree
 207              	.LVL19:
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 208              		.loc 1 3909 0
 209 000a 2046     		mov	r0, r4
 210 000c FFF7FEFF 		bl	vPortFree
 211              	.LVL20:
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212              		.loc 1 3938 0
 213 0010 10BD     		pop	{r4, pc}
 214              		.cfi_endproc
 215              	.LFE49:
 217              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 218              		.align	1
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	prvInitialiseNewTask:
 225              	.LFB9:
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 226              		.loc 1 832 0
 227              		.cfi_startproc
 228              		@ args = 16, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230              	.LVL21:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 78


 231 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 232              	.LCFI1:
 233              		.cfi_def_cfa_offset 32
 234              		.cfi_offset 4, -32
 235              		.cfi_offset 5, -28
 236              		.cfi_offset 6, -24
 237              		.cfi_offset 7, -20
 238              		.cfi_offset 8, -16
 239              		.cfi_offset 9, -12
 240              		.cfi_offset 10, -8
 241              		.cfi_offset 14, -4
 242 0004 8146     		mov	r9, r0
 243 0006 0D46     		mov	r5, r1
 244 0008 1746     		mov	r7, r2
 245 000a 9A46     		mov	r10, r3
 246 000c 089E     		ldr	r6, [sp, #32]
 247 000e DDF82480 		ldr	r8, [sp, #36]
 248 0012 0A9C     		ldr	r4, [sp, #40]
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 249              		.loc 1 854 0
 250 0014 9200     		lsls	r2, r2, #2
 251              	.LVL22:
 252 0016 A521     		movs	r1, #165
 253              	.LVL23:
 254 0018 206B     		ldr	r0, [r4, #48]
 255              	.LVL24:
 256 001a FFF7FEFF 		bl	memset
 257              	.LVL25:
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 258              		.loc 1 864 0
 259 001e 236B     		ldr	r3, [r4, #48]
 260 0020 07F18042 		add	r2, r7, #1073741824
 261 0024 013A     		subs	r2, r2, #1
 262 0026 03EB8207 		add	r7, r3, r2, lsl #2
 263              	.LVL26:
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264              		.loc 1 865 0
 265 002a 27F00707 		bic	r7, r7, #7
 266              	.LVL27:
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 267              		.loc 1 874 0
 268 002e 6764     		str	r7, [r4, #68]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 269              		.loc 1 892 0
 270 0030 8DB3     		cbz	r5, .L34
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 271              		.loc 1 894 0
 272 0032 0023     		movs	r3, #0
 273              	.LVL28:
 274              	.L23:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 275              		.loc 1 894 0 is_stmt 0 discriminator 1
 276 0034 0F2B     		cmp	r3, #15
 277 0036 07D8     		bhi	.L25
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 278              		.loc 1 896 0 is_stmt 1
 279 0038 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 79


 280 003a E218     		adds	r2, r4, r3
 281 003c 82F83410 		strb	r1, [r2, #52]
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 282              		.loc 1 901 0
 283 0040 EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 284 0042 0AB1     		cbz	r2, .L25
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 285              		.loc 1 894 0 discriminator 2
 286 0044 0133     		adds	r3, r3, #1
 287              	.LVL29:
 288 0046 F5E7     		b	.L23
 289              	.L25:
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 290              		.loc 1 913 0
 291 0048 0023     		movs	r3, #0
 292              	.LVL30:
 293 004a 84F84330 		strb	r3, [r4, #67]
 294              	.L27:
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 295              		.loc 1 924 0
 296 004e 062E     		cmp	r6, #6
 297 0050 00D9     		bls	.L28
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 298              		.loc 1 926 0
 299 0052 0626     		movs	r6, #6
 300              	.L28:
 301              	.LVL31:
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 302              		.loc 1 933 0
 303 0054 E662     		str	r6, [r4, #44]
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 304              		.loc 1 936 0
 305 0056 2665     		str	r6, [r4, #80]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 306              		.loc 1 937 0
 307 0058 0025     		movs	r5, #0
 308              	.LVL32:
 309 005a 6565     		str	r5, [r4, #84]
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 310              		.loc 1 941 0
 311 005c 201D     		adds	r0, r4, #4
 312 005e FFF7FEFF 		bl	vListInitialiseItem
 313              	.LVL33:
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 314              		.loc 1 942 0
 315 0062 04F11800 		add	r0, r4, #24
 316 0066 FFF7FEFF 		bl	vListInitialiseItem
 317              	.LVL34:
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 318              		.loc 1 946 0
 319 006a 2461     		str	r4, [r4, #16]
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 320              		.loc 1 949 0
 321 006c C6F10706 		rsb	r6, r6, #7
 322              	.LVL35:
 323 0070 A661     		str	r6, [r4, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 80


 324              		.loc 1 950 0
 325 0072 6462     		str	r4, [r4, #36]
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 326              		.loc 1 966 0
 327 0074 A565     		str	r5, [r4, #88]
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 328              		.loc 1 992 0
 329 0076 E565     		str	r5, [r4, #92]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 330              		.loc 1 993 0
 331 0078 84F86050 		strb	r5, [r4, #96]
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 332              		.loc 1 1058 0
 333 007c 5246     		mov	r2, r10
 334 007e 4946     		mov	r1, r9
 335 0080 3846     		mov	r0, r7
 336 0082 FFF7FEFF 		bl	pxPortInitialiseStack
 337              	.LVL36:
 338 0086 2060     		str	r0, [r4]
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 339              		.loc 1 1064 0
 340 0088 B8F1000F 		cmp	r8, #0
 341 008c 01D0     		beq	.L22
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 342              		.loc 1 1068 0
 343 008e C8F80040 		str	r4, [r8]
 344              	.L22:
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 345              		.loc 1 1074 0
 346 0092 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 347              	.LVL37:
 348              	.L34:
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 349              		.loc 1 919 0
 350 0096 0023     		movs	r3, #0
 351 0098 84F83430 		strb	r3, [r4, #52]
 352 009c D7E7     		b	.L27
 353              		.cfi_endproc
 354              	.LFE9:
 356              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 357              		.align	1
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 361              		.fpu fpv4-sp-d16
 363              	prvInitialiseTaskLists:
 364              	.LFB44:
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 365              		.loc 1 3608 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369 0000 38B5     		push	{r3, r4, r5, lr}
 370              	.LCFI2:
 371              		.cfi_def_cfa_offset 16
 372              		.cfi_offset 3, -16
 373              		.cfi_offset 4, -12
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 81


 374              		.cfi_offset 5, -8
 375              		.cfi_offset 14, -4
 376              	.LVL38:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 377              		.loc 1 3611 0
 378 0002 0024     		movs	r4, #0
 379 0004 07E0     		b	.L36
 380              	.LVL39:
 381              	.L37:
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 382              		.loc 1 3613 0 discriminator 3
 383 0006 04EB8402 		add	r2, r4, r4, lsl #2
 384 000a 9300     		lsls	r3, r2, #2
 385 000c 0E48     		ldr	r0, .L39
 386 000e 1844     		add	r0, r0, r3
 387 0010 FFF7FEFF 		bl	vListInitialise
 388              	.LVL40:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 389              		.loc 1 3611 0 discriminator 3
 390 0014 0134     		adds	r4, r4, #1
 391              	.LVL41:
 392              	.L36:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 393              		.loc 1 3611 0 is_stmt 0 discriminator 1
 394 0016 062C     		cmp	r4, #6
 395 0018 F5D9     		bls	.L37
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 396              		.loc 1 3616 0 is_stmt 1
 397 001a 0C4D     		ldr	r5, .L39+4
 398 001c 2846     		mov	r0, r5
 399 001e FFF7FEFF 		bl	vListInitialise
 400              	.LVL42:
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 401              		.loc 1 3617 0
 402 0022 0B4C     		ldr	r4, .L39+8
 403              	.LVL43:
 404 0024 2046     		mov	r0, r4
 405 0026 FFF7FEFF 		bl	vListInitialise
 406              	.LVL44:
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407              		.loc 1 3618 0
 408 002a 0A48     		ldr	r0, .L39+12
 409 002c FFF7FEFF 		bl	vListInitialise
 410              	.LVL45:
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 411              		.loc 1 3622 0
 412 0030 0948     		ldr	r0, .L39+16
 413 0032 FFF7FEFF 		bl	vListInitialise
 414              	.LVL46:
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 415              		.loc 1 3628 0
 416 0036 0948     		ldr	r0, .L39+20
 417 0038 FFF7FEFF 		bl	vListInitialise
 418              	.LVL47:
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 419              		.loc 1 3634 0
 420 003c 084B     		ldr	r3, .L39+24
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 82


 421 003e 1D60     		str	r5, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 422              		.loc 1 3635 0
 423 0040 084B     		ldr	r3, .L39+28
 424 0042 1C60     		str	r4, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 425              		.loc 1 3636 0
 426 0044 38BD     		pop	{r3, r4, r5, pc}
 427              	.L40:
 428 0046 00BF     		.align	2
 429              	.L39:
 430 0048 00000000 		.word	.LANCHOR4
 431 004c 00000000 		.word	.LANCHOR5
 432 0050 00000000 		.word	.LANCHOR6
 433 0054 00000000 		.word	.LANCHOR1
 434 0058 00000000 		.word	.LANCHOR7
 435 005c 00000000 		.word	.LANCHOR0
 436 0060 00000000 		.word	.LANCHOR2
 437 0064 00000000 		.word	.LANCHOR8
 438              		.cfi_endproc
 439              	.LFE44:
 441              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 442              		.align	1
 443              		.syntax unified
 444              		.thumb
 445              		.thumb_func
 446              		.fpu fpv4-sp-d16
 448              	prvAddNewTaskToReadyList:
 449              	.LFB10:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 450              		.loc 1 1078 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              	.LVL48:
 455 0000 10B5     		push	{r4, lr}
 456              	.LCFI3:
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 4, -8
 459              		.cfi_offset 14, -4
 460 0002 0446     		mov	r4, r0
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 461              		.loc 1 1081 0
 462 0004 FFF7FEFF 		bl	vPortEnterCritical
 463              	.LVL49:
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 464              		.loc 1 1083 0
 465 0008 214A     		ldr	r2, .L48
 466 000a 1368     		ldr	r3, [r2]
 467 000c 0133     		adds	r3, r3, #1
 468 000e 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 469              		.loc 1 1084 0
 470 0010 204B     		ldr	r3, .L48+4
 471 0012 1B68     		ldr	r3, [r3]
 472 0014 5BB1     		cbz	r3, .L46
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 83


 473              		.loc 1 1107 0
 474 0016 204B     		ldr	r3, .L48+8
 475 0018 1B68     		ldr	r3, [r3]
 476 001a 6BB9     		cbnz	r3, .L43
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 477              		.loc 1 1109 0
 478 001c 1D4B     		ldr	r3, .L48+4
 479 001e 1B68     		ldr	r3, [r3]
 480 0020 DA6A     		ldr	r2, [r3, #44]
 481 0022 E36A     		ldr	r3, [r4, #44]
 482 0024 9A42     		cmp	r2, r3
 483 0026 07D8     		bhi	.L43
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 484              		.loc 1 1111 0
 485 0028 1A4B     		ldr	r3, .L48+4
 486 002a 1C60     		str	r4, [r3]
 487 002c 04E0     		b	.L43
 488              	.L46:
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 489              		.loc 1 1088 0
 490 002e 194B     		ldr	r3, .L48+4
 491 0030 1C60     		str	r4, [r3]
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 492              		.loc 1 1090 0
 493 0032 1368     		ldr	r3, [r2]
 494 0034 012B     		cmp	r3, #1
 495 0036 27D0     		beq	.L47
 496              	.L43:
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497              		.loc 1 1124 0
 498 0038 184A     		ldr	r2, .L48+12
 499 003a 1368     		ldr	r3, [r2]
 500 003c 0133     		adds	r3, r3, #1
 501 003e 1360     		str	r3, [r2]
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 502              		.loc 1 1129 0
 503 0040 A364     		str	r3, [r4, #72]
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 504              		.loc 1 1134 0
 505 0042 E36A     		ldr	r3, [r4, #44]
 506 0044 0122     		movs	r2, #1
 507 0046 9A40     		lsls	r2, r2, r3
 508 0048 1549     		ldr	r1, .L48+16
 509 004a 0868     		ldr	r0, [r1]
 510 004c 0243     		orrs	r2, r2, r0
 511 004e 0A60     		str	r2, [r1]
 512 0050 03EB8303 		add	r3, r3, r3, lsl #2
 513 0054 9A00     		lsls	r2, r3, #2
 514 0056 211D     		adds	r1, r4, #4
 515 0058 1248     		ldr	r0, .L48+20
 516 005a 1044     		add	r0, r0, r2
 517 005c FFF7FEFF 		bl	vListInsertEnd
 518              	.LVL50:
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519              		.loc 1 1138 0
 520 0060 FFF7FEFF 		bl	vPortExitCritical
 521              	.LVL51:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 84


1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 522              		.loc 1 1140 0
 523 0064 0C4B     		ldr	r3, .L48+8
 524 0066 1B68     		ldr	r3, [r3]
 525 0068 6BB1     		cbz	r3, .L41
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 526              		.loc 1 1144 0
 527 006a 0A4B     		ldr	r3, .L48+4
 528 006c 1B68     		ldr	r3, [r3]
 529 006e DA6A     		ldr	r2, [r3, #44]
 530 0070 E36A     		ldr	r3, [r4, #44]
 531 0072 9A42     		cmp	r2, r3
 532 0074 07D2     		bcs	.L41
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 533              		.loc 1 1146 0
 534 0076 0C4B     		ldr	r3, .L48+24
 535 0078 4FF08052 		mov	r2, #268435456
 536 007c 1A60     		str	r2, [r3]
 537              		.syntax unified
 538              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 539 007e BFF34F8F 		dsb
 540              	@ 0 "" 2
 541              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 542 0082 BFF36F8F 		isb
 543              	@ 0 "" 2
 544              		.thumb
 545              		.syntax unified
 546              	.L41:
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 547              		.loc 1 1157 0
 548 0086 10BD     		pop	{r4, pc}
 549              	.LVL52:
 550              	.L47:
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 551              		.loc 1 1095 0
 552 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
 553              	.LVL53:
 554 008c D4E7     		b	.L43
 555              	.L49:
 556 008e 00BF     		.align	2
 557              	.L48:
 558 0090 00000000 		.word	.LANCHOR9
 559 0094 00000000 		.word	.LANCHOR10
 560 0098 00000000 		.word	.LANCHOR11
 561 009c 00000000 		.word	.LANCHOR12
 562 00a0 00000000 		.word	.LANCHOR13
 563 00a4 00000000 		.word	.LANCHOR4
 564 00a8 04ED00E0 		.word	-536810236
 565              		.cfi_endproc
 566              	.LFE10:
 568              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 569              		.align	1
 570              		.syntax unified
 571              		.thumb
 572              		.thumb_func
 573              		.fpu fpv4-sp-d16
 575              	prvCheckTasksWaitingTermination:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 85


 576              	.LFB45:
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577              		.loc 1 3640 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 0
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581              	.LBB104:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 582              		.loc 1 3650 0
 583 0000 0F4B     		ldr	r3, .L57
 584 0002 1B68     		ldr	r3, [r3]
 585 0004 D3B1     		cbz	r3, .L56
 586              	.LBE104:
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 587              		.loc 1 3640 0
 588 0006 10B5     		push	{r4, lr}
 589              	.LCFI4:
 590              		.cfi_def_cfa_offset 8
 591              		.cfi_offset 4, -8
 592              		.cfi_offset 14, -4
 593              	.L52:
 594              	.LBB105:
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 595              		.loc 1 3652 0
 596 0008 FFF7FEFF 		bl	vPortEnterCritical
 597              	.LVL54:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 598              		.loc 1 3654 0
 599 000c 0D4B     		ldr	r3, .L57+4
 600 000e DB68     		ldr	r3, [r3, #12]
 601 0010 DC68     		ldr	r4, [r3, #12]
 602              	.LVL55:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 603              		.loc 1 3655 0
 604 0012 201D     		adds	r0, r4, #4
 605 0014 FFF7FEFF 		bl	uxListRemove
 606              	.LVL56:
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 607              		.loc 1 3656 0
 608 0018 0B4A     		ldr	r2, .L57+8
 609 001a 1368     		ldr	r3, [r2]
 610 001c 013B     		subs	r3, r3, #1
 611 001e 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 612              		.loc 1 3657 0
 613 0020 074A     		ldr	r2, .L57
 614 0022 1368     		ldr	r3, [r2]
 615 0024 013B     		subs	r3, r3, #1
 616 0026 1360     		str	r3, [r2]
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 617              		.loc 1 3659 0
 618 0028 FFF7FEFF 		bl	vPortExitCritical
 619              	.LVL57:
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 620              		.loc 1 3661 0
 621 002c 2046     		mov	r0, r4
 622 002e FFF7FEFF 		bl	prvDeleteTCB
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 86


 623              	.LVL58:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 624              		.loc 1 3650 0
 625 0032 034B     		ldr	r3, .L57
 626 0034 1B68     		ldr	r3, [r3]
 627 0036 002B     		cmp	r3, #0
 628 0038 E6D1     		bne	.L52
 629              	.LBE105:
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 630              		.loc 1 3665 0
 631 003a 10BD     		pop	{r4, pc}
 632              	.LVL59:
 633              	.L56:
 634              	.LCFI5:
 635              		.cfi_def_cfa_offset 0
 636              		.cfi_restore 4
 637              		.cfi_restore 14
 638 003c 7047     		bx	lr
 639              	.L58:
 640 003e 00BF     		.align	2
 641              	.L57:
 642 0040 00000000 		.word	.LANCHOR14
 643 0044 00000000 		.word	.LANCHOR7
 644 0048 00000000 		.word	.LANCHOR9
 645              		.cfi_endproc
 646              	.LFE45:
 648              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 649              		.align	1
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu fpv4-sp-d16
 655              	prvAddCurrentTaskToDelayedList:
 656              	.LFB68:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 87


3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 88


4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 89


4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 90


4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 91


4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 92


4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 93


4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 94


4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 95


4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 96


4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 97


4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 98


4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 99


4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 100


4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 101


4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 102


4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 103


4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 104


4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 105


5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 106


5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 107


5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 657              		.loc 1 5178 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 0
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              	.LVL60:
 662 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 108


 663              	.LCFI6:
 664              		.cfi_def_cfa_offset 16
 665              		.cfi_offset 4, -16
 666              		.cfi_offset 5, -12
 667              		.cfi_offset 6, -8
 668              		.cfi_offset 14, -4
 669 0002 0446     		mov	r4, r0
 670 0004 0E46     		mov	r6, r1
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 671              		.loc 1 5180 0
 672 0006 1D4B     		ldr	r3, .L67
 673 0008 1D68     		ldr	r5, [r3]
 674              	.LVL61:
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 675              		.loc 1 5193 0
 676 000a 1D4B     		ldr	r3, .L67+4
 677 000c 1868     		ldr	r0, [r3]
 678              	.LVL62:
 679 000e 0430     		adds	r0, r0, #4
 680 0010 FFF7FEFF 		bl	uxListRemove
 681              	.LVL63:
 682 0014 50B9     		cbnz	r0, .L60
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 683              		.loc 1 5197 0
 684 0016 1A4B     		ldr	r3, .L67+4
 685 0018 1B68     		ldr	r3, [r3]
 686 001a DA6A     		ldr	r2, [r3, #44]
 687 001c 0123     		movs	r3, #1
 688 001e 03FA02F2 		lsl	r2, r3, r2
 689 0022 1849     		ldr	r1, .L67+8
 690 0024 0B68     		ldr	r3, [r1]
 691 0026 23EA0203 		bic	r3, r3, r2
 692 002a 0B60     		str	r3, [r1]
 693              	.L60:
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 109


5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 694              		.loc 1 5206 0
 695 002c B4F1FF3F 		cmp	r4, #-1
 696 0030 13D0     		beq	.L65
 697              	.L61:
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 698              		.loc 1 5218 0
 699 0032 2C44     		add	r4, r4, r5
 700              	.LVL64:
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 701              		.loc 1 5221 0
 702 0034 124B     		ldr	r3, .L67+4
 703 0036 1B68     		ldr	r3, [r3]
 704 0038 5C60     		str	r4, [r3, #4]
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 705              		.loc 1 5223 0
 706 003a A542     		cmp	r5, r4
 707 003c 16D8     		bhi	.L66
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 708              		.loc 1 5233 0
 709 003e 124B     		ldr	r3, .L67+12
 710 0040 1868     		ldr	r0, [r3]
 711 0042 0F4B     		ldr	r3, .L67+4
 712 0044 1968     		ldr	r1, [r3]
 713 0046 0431     		adds	r1, r1, #4
 714 0048 FFF7FEFF 		bl	vListInsert
 715              	.LVL65:
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 716              		.loc 1 5238 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 110


 717 004c 0F4B     		ldr	r3, .L67+16
 718 004e 1B68     		ldr	r3, [r3]
 719 0050 A342     		cmp	r3, r4
 720 0052 12D9     		bls	.L59
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 721              		.loc 1 5240 0
 722 0054 0D4B     		ldr	r3, .L67+16
 723 0056 1C60     		str	r4, [r3]
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 724              		.loc 1 5286 0
 725 0058 0FE0     		b	.L59
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 111


 726              	.LVL66:
 727              	.L65:
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 728              		.loc 1 5206 0 discriminator 1
 729 005a 002E     		cmp	r6, #0
 730 005c E9D0     		beq	.L61
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 731              		.loc 1 5211 0
 732 005e 084B     		ldr	r3, .L67+4
 733 0060 1968     		ldr	r1, [r3]
 734 0062 0431     		adds	r1, r1, #4
 735 0064 0A48     		ldr	r0, .L67+20
 736 0066 FFF7FEFF 		bl	vListInsertEnd
 737              	.LVL67:
 738 006a 06E0     		b	.L59
 739              	.LVL68:
 740              	.L66:
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 741              		.loc 1 5227 0
 742 006c 094B     		ldr	r3, .L67+24
 743 006e 1868     		ldr	r0, [r3]
 744 0070 034B     		ldr	r3, .L67+4
 745 0072 1968     		ldr	r1, [r3]
 746 0074 0431     		adds	r1, r1, #4
 747 0076 FFF7FEFF 		bl	vListInsert
 748              	.LVL69:
 749              	.L59:
 750              		.loc 1 5286 0
 751 007a 70BD     		pop	{r4, r5, r6, pc}
 752              	.LVL70:
 753              	.L68:
 754              		.align	2
 755              	.L67:
 756 007c 00000000 		.word	.LANCHOR15
 757 0080 00000000 		.word	.LANCHOR10
 758 0084 00000000 		.word	.LANCHOR13
 759 0088 00000000 		.word	.LANCHOR2
 760 008c 00000000 		.word	.LANCHOR3
 761 0090 00000000 		.word	.LANCHOR0
 762 0094 00000000 		.word	.LANCHOR8
 763              		.cfi_endproc
 764              	.LFE68:
 766              		.section	.text.prvIdleTask,"ax",%progbits
 767              		.align	1
 768              		.syntax unified
 769              		.thumb
 770              		.thumb_func
 771              		.fpu fpv4-sp-d16
 773              	prvIdleTask:
 774              	.LFB43:
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 775              		.loc 1 3393 0
 776              		.cfi_startproc
 777              		@ Volatile: function does not return.
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              	.LVL71:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 112


 781 0000 08B5     		push	{r3, lr}
 782              	.LCFI7:
 783              		.cfi_def_cfa_offset 8
 784              		.cfi_offset 3, -8
 785              		.cfi_offset 14, -4
 786              	.LVL72:
 787              	.L70:
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 788              		.loc 1 3409 0 discriminator 1
 789 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 790              	.LVL73:
 791              	.LBB106:
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 792              		.loc 1 3452 0 discriminator 1
 793 0006 FFF7FEFF 		bl	vApplicationIdleHook
 794              	.LVL74:
 795 000a FAE7     		b	.L70
 796              	.LBE106:
 797              		.cfi_endproc
 798              	.LFE43:
 800              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 801              		.align	1
 802              		.syntax unified
 803              		.thumb
 804              		.thumb_func
 805              		.fpu fpv4-sp-d16
 807              	prvWriteNameToBuffer:
 808              	.LFB56:
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
 809              		.loc 1 4353 0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              	.LVL75:
 814 0000 10B5     		push	{r4, lr}
 815              	.LCFI8:
 816              		.cfi_def_cfa_offset 8
 817              		.cfi_offset 4, -8
 818              		.cfi_offset 14, -4
 819 0002 0446     		mov	r4, r0
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820              		.loc 1 4357 0
 821 0004 FFF7FEFF 		bl	strcpy
 822              	.LVL76:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 823              		.loc 1 4361 0
 824 0008 2046     		mov	r0, r4
 825 000a FFF7FEFF 		bl	strlen
 826              	.LVL77:
 827 000e 02E0     		b	.L73
 828              	.L74:
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 829              		.loc 1 4363 0 discriminator 3
 830 0010 2023     		movs	r3, #32
 831 0012 2354     		strb	r3, [r4, r0]
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 832              		.loc 1 4361 0 discriminator 3
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 113


 833 0014 0130     		adds	r0, r0, #1
 834              	.LVL78:
 835              	.L73:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836              		.loc 1 4361 0 is_stmt 0 discriminator 1
 837 0016 0E28     		cmp	r0, #14
 838 0018 FAD9     		bls	.L74
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 839              		.loc 1 4367 0 is_stmt 1
 840 001a 0023     		movs	r3, #0
 841 001c 2354     		strb	r3, [r4, r0]
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 842              		.loc 1 4371 0
 843 001e 2044     		add	r0, r0, r4
 844              	.LVL79:
 845 0020 10BD     		pop	{r4, pc}
 846              		.cfi_endproc
 847              	.LFE56:
 849              		.section	.text.xTaskCreate,"ax",%progbits
 850              		.align	1
 851              		.global	xTaskCreate
 852              		.syntax unified
 853              		.thumb
 854              		.thumb_func
 855              		.fpu fpv4-sp-d16
 857              	xTaskCreate:
 858              	.LFB8:
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 859              		.loc 1 739 0
 860              		.cfi_startproc
 861              		@ args = 8, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              	.LVL80:
 864 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 865              	.LCFI9:
 866              		.cfi_def_cfa_offset 28
 867              		.cfi_offset 4, -28
 868              		.cfi_offset 5, -24
 869              		.cfi_offset 6, -20
 870              		.cfi_offset 7, -16
 871              		.cfi_offset 8, -12
 872              		.cfi_offset 9, -8
 873              		.cfi_offset 14, -4
 874 0004 85B0     		sub	sp, sp, #20
 875              	.LCFI10:
 876              		.cfi_def_cfa_offset 48
 877 0006 0746     		mov	r7, r0
 878 0008 8846     		mov	r8, r1
 879 000a 1546     		mov	r5, r2
 880 000c 9946     		mov	r9, r3
 881              	.LBB107:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882              		.loc 1 773 0
 883 000e 9000     		lsls	r0, r2, #2
 884              	.LVL81:
 885 0010 FFF7FEFF 		bl	pvPortMalloc
 886              	.LVL82:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 114


 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 887              		.loc 1 775 0
 888 0014 F8B1     		cbz	r0, .L80
 889 0016 0646     		mov	r6, r0
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890              		.loc 1 778 0
 891 0018 6420     		movs	r0, #100
 892              	.LVL83:
 893 001a FFF7FEFF 		bl	pvPortMalloc
 894              	.LVL84:
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 895              		.loc 1 780 0
 896 001e 0446     		mov	r4, r0
 897 0020 A8B1     		cbz	r0, .L78
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 898              		.loc 1 783 0
 899 0022 0663     		str	r6, [r0, #48]
 900              	.LVL85:
 901              	.L79:
 902              	.LBE107:
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 903              		.loc 1 799 0
 904 0024 D4B1     		cbz	r4, .L81
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 905              		.loc 1 809 0
 906 0026 0023     		movs	r3, #0
 907 0028 0393     		str	r3, [sp, #12]
 908 002a 0294     		str	r4, [sp, #8]
 909 002c 0D9B     		ldr	r3, [sp, #52]
 910 002e 0193     		str	r3, [sp, #4]
 911 0030 0C9B     		ldr	r3, [sp, #48]
 912 0032 0093     		str	r3, [sp]
 913 0034 4B46     		mov	r3, r9
 914 0036 2A46     		mov	r2, r5
 915 0038 4146     		mov	r1, r8
 916 003a 3846     		mov	r0, r7
 917 003c FFF7FEFF 		bl	prvInitialiseNewTask
 918              	.LVL86:
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 919              		.loc 1 810 0
 920 0040 2046     		mov	r0, r4
 921 0042 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 922              	.LVL87:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 923              		.loc 1 811 0
 924 0046 0120     		movs	r0, #1
 925              	.LVL88:
 926              	.L76:
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 927              		.loc 1 819 0
 928 0048 05B0     		add	sp, sp, #20
 929              	.LCFI11:
 930              		.cfi_remember_state
 931              		.cfi_def_cfa_offset 28
 932              		@ sp needed
 933 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 934              	.LVL89:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 115


 935              	.L78:
 936              	.LCFI12:
 937              		.cfi_restore_state
 938              	.LBB108:
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 939              		.loc 1 789 0
 940 004e 3046     		mov	r0, r6
 941              	.LVL90:
 942 0050 FFF7FEFF 		bl	vPortFree
 943              	.LVL91:
 944 0054 E6E7     		b	.L79
 945              	.LVL92:
 946              	.L80:
 947              	.LBE108:
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 948              		.loc 1 815 0
 949 0056 4FF0FF30 		mov	r0, #-1
 950              	.LVL93:
 951 005a F5E7     		b	.L76
 952              	.LVL94:
 953              	.L81:
 954 005c 4FF0FF30 		mov	r0, #-1
 955              	.LVL95:
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956              		.loc 1 818 0
 957 0060 F2E7     		b	.L76
 958              		.cfi_endproc
 959              	.LFE8:
 961              		.section	.text.vTaskDelete,"ax",%progbits
 962              		.align	1
 963              		.global	vTaskDelete
 964              		.syntax unified
 965              		.thumb
 966              		.thumb_func
 967              		.fpu fpv4-sp-d16
 969              	vTaskDelete:
 970              	.LFB11:
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 971              		.loc 1 1163 0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 0
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 975              	.LVL96:
 976 0000 38B5     		push	{r3, r4, r5, lr}
 977              	.LCFI13:
 978              		.cfi_def_cfa_offset 16
 979              		.cfi_offset 3, -16
 980              		.cfi_offset 4, -12
 981              		.cfi_offset 5, -8
 982              		.cfi_offset 14, -4
 983 0002 0446     		mov	r4, r0
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 984              		.loc 1 1166 0
 985 0004 FFF7FEFF 		bl	vPortEnterCritical
 986              	.LVL97:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987              		.loc 1 1170 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 116


 988 0008 002C     		cmp	r4, #0
 989 000a 34D0     		beq	.L93
 990              	.LVL98:
 991              	.L84:
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 992              		.loc 1 1173 0 discriminator 4
 993 000c 251D     		adds	r5, r4, #4
 994 000e 2846     		mov	r0, r5
 995 0010 FFF7FEFF 		bl	uxListRemove
 996              	.LVL99:
 997 0014 70B9     		cbnz	r0, .L85
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 998              		.loc 1 1175 0
 999 0016 E26A     		ldr	r2, [r4, #44]
 1000 0018 02EB8201 		add	r1, r2, r2, lsl #2
 1001 001c 8B00     		lsls	r3, r1, #2
 1002 001e 2649     		ldr	r1, .L96
 1003 0020 CB58     		ldr	r3, [r1, r3]
 1004 0022 3BB9     		cbnz	r3, .L85
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1005              		.loc 1 1175 0 is_stmt 0 discriminator 1
 1006 0024 0123     		movs	r3, #1
 1007 0026 03FA02F2 		lsl	r2, r3, r2
 1008 002a 2449     		ldr	r1, .L96+4
 1009 002c 0B68     		ldr	r3, [r1]
 1010 002e 23EA0203 		bic	r3, r3, r2
 1011 0032 0B60     		str	r3, [r1]
 1012              	.L85:
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1013              		.loc 1 1183 0 is_stmt 1
 1014 0034 A36A     		ldr	r3, [r4, #40]
 1015 0036 1BB1     		cbz	r3, .L86
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1016              		.loc 1 1185 0
 1017 0038 04F11800 		add	r0, r4, #24
 1018 003c FFF7FEFF 		bl	uxListRemove
 1019              	.LVL100:
 1020              	.L86:
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1021              		.loc 1 1196 0
 1022 0040 1F4A     		ldr	r2, .L96+8
 1023 0042 1368     		ldr	r3, [r2]
 1024 0044 0133     		adds	r3, r3, #1
 1025 0046 1360     		str	r3, [r2]
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1026              		.loc 1 1198 0
 1027 0048 1E4B     		ldr	r3, .L96+12
 1028 004a 1B68     		ldr	r3, [r3]
 1029 004c A342     		cmp	r3, r4
 1030 004e 15D0     		beq	.L94
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
 1031              		.loc 1 1225 0
 1032 0050 1D4A     		ldr	r2, .L96+16
 1033 0052 1368     		ldr	r3, [r2]
 1034 0054 013B     		subs	r3, r3, #1
 1035 0056 1360     		str	r3, [r2]
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 117


 1036              		.loc 1 1227 0
 1037 0058 2046     		mov	r0, r4
 1038 005a FFF7FEFF 		bl	prvDeleteTCB
 1039              	.LVL101:
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1040              		.loc 1 1231 0
 1041 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1042              	.LVL102:
 1043              	.L88:
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1044              		.loc 1 1234 0
 1045 0062 FFF7FEFF 		bl	vPortExitCritical
 1046              	.LVL103:
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1047              		.loc 1 1238 0
 1048 0066 194B     		ldr	r3, .L96+20
 1049 0068 1B68     		ldr	r3, [r3]
 1050 006a 1BB1     		cbz	r3, .L83
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1051              		.loc 1 1240 0
 1052 006c 154B     		ldr	r3, .L96+12
 1053 006e 1B68     		ldr	r3, [r3]
 1054 0070 A342     		cmp	r3, r4
 1055 0072 0CD0     		beq	.L95
 1056              	.L83:
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1057              		.loc 1 1250 0
 1058 0074 38BD     		pop	{r3, r4, r5, pc}
 1059              	.LVL104:
 1060              	.L93:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1061              		.loc 1 1170 0 discriminator 1
 1062 0076 134B     		ldr	r3, .L96+12
 1063 0078 1C68     		ldr	r4, [r3]
 1064              	.LVL105:
 1065 007a C7E7     		b	.L84
 1066              	.LVL106:
 1067              	.L94:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1068              		.loc 1 1205 0
 1069 007c 2946     		mov	r1, r5
 1070 007e 1448     		ldr	r0, .L96+24
 1071 0080 FFF7FEFF 		bl	vListInsertEnd
 1072              	.LVL107:
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1073              		.loc 1 1210 0
 1074 0084 134A     		ldr	r2, .L96+28
 1075 0086 1368     		ldr	r3, [r2]
 1076 0088 0133     		adds	r3, r3, #1
 1077 008a 1360     		str	r3, [r2]
 1078 008c E9E7     		b	.L88
 1079              	.L95:
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1080              		.loc 1 1242 0
 1081 008e 124B     		ldr	r3, .L96+32
 1082 0090 1B68     		ldr	r3, [r3]
 1083 0092 43B1     		cbz	r3, .L90
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 118


 1084              	.LBB109:
 1085              	.LBB110:
 1086              		.loc 2 195 0
 1087              		.syntax unified
 1088              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1089 0094 4FF05003 			mov r3, #80												
 1090 0098 83F31188 		msr basepri, r3											
 1091 009c BFF36F8F 		isb														
 1092 00a0 BFF34F8F 		dsb														
 1093              	
 1094              	@ 0 "" 2
 1095              	.LVL108:
 1096              		.thumb
 1097              		.syntax unified
 1098              	.L91:
 1099 00a4 FEE7     		b	.L91
 1100              	.L90:
 1101              	.LBE110:
 1102              	.LBE109:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1103              		.loc 1 1243 0
 1104 00a6 0D4B     		ldr	r3, .L96+36
 1105 00a8 4FF08052 		mov	r2, #268435456
 1106 00ac 1A60     		str	r2, [r3]
 1107              		.syntax unified
 1108              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1109 00ae BFF34F8F 		dsb
 1110              	@ 0 "" 2
 1111              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1112 00b2 BFF36F8F 		isb
 1113              	@ 0 "" 2
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1114              		.loc 1 1250 0
 1115              		.thumb
 1116              		.syntax unified
 1117 00b6 DDE7     		b	.L83
 1118              	.L97:
 1119              		.align	2
 1120              	.L96:
 1121 00b8 00000000 		.word	.LANCHOR4
 1122 00bc 00000000 		.word	.LANCHOR13
 1123 00c0 00000000 		.word	.LANCHOR12
 1124 00c4 00000000 		.word	.LANCHOR10
 1125 00c8 00000000 		.word	.LANCHOR9
 1126 00cc 00000000 		.word	.LANCHOR11
 1127 00d0 00000000 		.word	.LANCHOR7
 1128 00d4 00000000 		.word	.LANCHOR14
 1129 00d8 00000000 		.word	.LANCHOR16
 1130 00dc 04ED00E0 		.word	-536810236
 1131              		.cfi_endproc
 1132              	.LFE11:
 1134              		.section	.text.eTaskGetState,"ax",%progbits
 1135              		.align	1
 1136              		.global	eTaskGetState
 1137              		.syntax unified
 1138              		.thumb
 1139              		.thumb_func
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 119


 1140              		.fpu fpv4-sp-d16
 1142              	eTaskGetState:
 1143              	.LFB13:
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1144              		.loc 1 1387 0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 0
 1147              		@ frame_needed = 0, uses_anonymous_args = 0
 1148              	.LVL109:
 1149 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1150              	.LCFI14:
 1151              		.cfi_def_cfa_offset 24
 1152              		.cfi_offset 3, -24
 1153              		.cfi_offset 4, -20
 1154              		.cfi_offset 5, -16
 1155              		.cfi_offset 6, -12
 1156              		.cfi_offset 7, -8
 1157              		.cfi_offset 14, -4
 1158              	.LVL110:
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1159              		.loc 1 1392 0
 1160 0002 D0B1     		cbz	r0, .L111
 1161 0004 0446     		mov	r4, r0
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1162              		.loc 1 1394 0
 1163 0006 1D4B     		ldr	r3, .L114
 1164 0008 1B68     		ldr	r3, [r3]
 1165 000a 8342     		cmp	r3, r0
 1166 000c 29D0     		beq	.L103
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1167              		.loc 1 1401 0
 1168 000e FFF7FEFF 		bl	vPortEnterCritical
 1169              	.LVL111:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1170              		.loc 1 1403 0
 1171 0012 6569     		ldr	r5, [r4, #20]
 1172              	.LVL112:
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1173              		.loc 1 1404 0
 1174 0014 1A4B     		ldr	r3, .L114+4
 1175 0016 1F68     		ldr	r7, [r3]
 1176              	.LVL113:
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1177              		.loc 1 1405 0
 1178 0018 1A4B     		ldr	r3, .L114+8
 1179 001a 1E68     		ldr	r6, [r3]
 1180              	.LVL114:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1181              		.loc 1 1407 0
 1182 001c FFF7FEFF 		bl	vPortExitCritical
 1183              	.LVL115:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1184              		.loc 1 1409 0
 1185 0020 BD42     		cmp	r5, r7
 1186 0022 20D0     		beq	.L104
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1187              		.loc 1 1409 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 120


 1188 0024 B542     		cmp	r5, r6
 1189 0026 20D0     		beq	.L105
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1190              		.loc 1 1417 0 is_stmt 1
 1191 0028 174B     		ldr	r3, .L114+12
 1192 002a 9D42     		cmp	r5, r3
 1193 002c 0ED0     		beq	.L112
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1194              		.loc 1 1453 0
 1195 002e 174B     		ldr	r3, .L114+16
 1196 0030 9D42     		cmp	r5, r3
 1197 0032 20D0     		beq	.L108
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1198              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1199 0034 9DB1     		cbz	r5, .L113
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1200              		.loc 1 1466 0 is_stmt 1
 1201 0036 0120     		movs	r0, #1
 1202 0038 14E0     		b	.L101
 1203              	.LVL116:
 1204              	.L111:
 1205              	.LBB111:
 1206              	.LBB112:
 1207              		.loc 2 195 0
 1208              		.syntax unified
 1209              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1210 003a 4FF05003 			mov r3, #80												
 1211 003e 83F31188 		msr basepri, r3											
 1212 0042 BFF36F8F 		isb														
 1213 0046 BFF34F8F 		dsb														
 1214              	
 1215              	@ 0 "" 2
 1216              	.LVL117:
 1217              		.thumb
 1218              		.syntax unified
 1219              	.L100:
 1220 004a FEE7     		b	.L100
 1221              	.LVL118:
 1222              	.L112:
 1223              	.LBE112:
 1224              	.LBE111:
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1225              		.loc 1 1422 0
 1226 004c A36A     		ldr	r3, [r4, #40]
 1227 004e 73B9     		cbnz	r3, .L106
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 1228              		.loc 1 1430 0
 1229 0050 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 1230 0054 DBB2     		uxtb	r3, r3
 1231 0056 012B     		cmp	r3, #1
 1232 0058 0BD1     		bne	.L107
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1233              		.loc 1 1432 0
 1234 005a 0220     		movs	r0, #2
 1235 005c 02E0     		b	.L101
 1236              	.L113:
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 121


 1237              		.loc 1 1458 0
 1238 005e 0420     		movs	r0, #4
 1239 0060 00E0     		b	.L101
 1240              	.LVL119:
 1241              	.L103:
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1242              		.loc 1 1397 0
 1243 0062 0020     		movs	r0, #0
 1244              	.LVL120:
 1245              	.L101:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1246              		.loc 1 1471 0
 1247 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1248              	.LVL121:
 1249              	.L104:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1250              		.loc 1 1413 0
 1251 0066 0220     		movs	r0, #2
 1252 0068 FCE7     		b	.L101
 1253              	.L105:
 1254 006a 0220     		movs	r0, #2
 1255 006c FAE7     		b	.L101
 1256              	.L106:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1257              		.loc 1 1447 0
 1258 006e 0220     		movs	r0, #2
 1259 0070 F8E7     		b	.L101
 1260              	.L107:
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1261              		.loc 1 1436 0
 1262 0072 0320     		movs	r0, #3
 1263 0074 F6E7     		b	.L101
 1264              	.L108:
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1265              		.loc 1 1458 0
 1266 0076 0420     		movs	r0, #4
 1267 0078 F4E7     		b	.L101
 1268              	.L115:
 1269 007a 00BF     		.align	2
 1270              	.L114:
 1271 007c 00000000 		.word	.LANCHOR10
 1272 0080 00000000 		.word	.LANCHOR2
 1273 0084 00000000 		.word	.LANCHOR8
 1274 0088 00000000 		.word	.LANCHOR0
 1275 008c 00000000 		.word	.LANCHOR7
 1276              		.cfi_endproc
 1277              	.LFE13:
 1279              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1280              		.align	1
 1281              		.global	uxTaskPriorityGet
 1282              		.syntax unified
 1283              		.thumb
 1284              		.thumb_func
 1285              		.fpu fpv4-sp-d16
 1287              	uxTaskPriorityGet:
 1288              	.LFB14:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 122


 1289              		.loc 1 1479 0
 1290              		.cfi_startproc
 1291              		@ args = 0, pretend = 0, frame = 0
 1292              		@ frame_needed = 0, uses_anonymous_args = 0
 1293              	.LVL122:
 1294 0000 10B5     		push	{r4, lr}
 1295              	.LCFI15:
 1296              		.cfi_def_cfa_offset 8
 1297              		.cfi_offset 4, -8
 1298              		.cfi_offset 14, -4
 1299 0002 0446     		mov	r4, r0
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1300              		.loc 1 1483 0
 1301 0004 FFF7FEFF 		bl	vPortEnterCritical
 1302              	.LVL123:
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1303              		.loc 1 1487 0
 1304 0008 24B1     		cbz	r4, .L119
 1305              	.LVL124:
 1306              	.L117:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1307              		.loc 1 1488 0 discriminator 4
 1308 000a E46A     		ldr	r4, [r4, #44]
 1309              	.LVL125:
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1310              		.loc 1 1490 0 discriminator 4
 1311 000c FFF7FEFF 		bl	vPortExitCritical
 1312              	.LVL126:
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1313              		.loc 1 1493 0 discriminator 4
 1314 0010 2046     		mov	r0, r4
 1315 0012 10BD     		pop	{r4, pc}
 1316              	.LVL127:
 1317              	.L119:
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1318              		.loc 1 1487 0 discriminator 1
 1319 0014 014B     		ldr	r3, .L120
 1320 0016 1C68     		ldr	r4, [r3]
 1321              	.LVL128:
 1322 0018 F7E7     		b	.L117
 1323              	.L121:
 1324 001a 00BF     		.align	2
 1325              	.L120:
 1326 001c 00000000 		.word	.LANCHOR10
 1327              		.cfi_endproc
 1328              	.LFE14:
 1330              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1331              		.align	1
 1332              		.global	uxTaskPriorityGetFromISR
 1333              		.syntax unified
 1334              		.thumb
 1335              		.thumb_func
 1336              		.fpu fpv4-sp-d16
 1338              	uxTaskPriorityGetFromISR:
 1339              	.LFB15:
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1340              		.loc 1 1501 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 123


 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 0
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 1344              	.LVL129:
 1345 0000 10B5     		push	{r4, lr}
 1346              	.LCFI16:
 1347              		.cfi_def_cfa_offset 8
 1348              		.cfi_offset 4, -8
 1349              		.cfi_offset 14, -4
 1350 0002 0446     		mov	r4, r0
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1351              		.loc 1 1521 0
 1352 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1353              	.LVL130:
 1354              	.LBB113:
 1355              	.LBB114:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1356              		.loc 2 211 0
 1357              		.syntax unified
 1358              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1359 0008 EFF31183 			mrs r3, basepri											
 1360 000c 4FF05002 		mov r2, #80												
 1361 0010 82F31188 		msr basepri, r2											
 1362 0014 BFF36F8F 		isb														
 1363 0018 BFF34F8F 		dsb														
 1364              	
 1365              	@ 0 "" 2
 1366              		.thumb
 1367              		.syntax unified
 1368              	.LBE114:
 1369              	.LBE113:
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1370              		.loc 1 1527 0
 1371 001c 1CB1     		cbz	r4, .L125
 1372              	.LVL131:
 1373              	.L123:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1374              		.loc 1 1528 0 discriminator 4
 1375 001e E06A     		ldr	r0, [r4, #44]
 1376              	.LVL132:
 1377              	.LBB115:
 1378              	.LBB116:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 124


 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1379              		.loc 2 229 0 discriminator 4
 1380              		.syntax unified
 1381              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1382 0020 83F31188 			msr basepri, r3	
 1383              	@ 0 "" 2
 1384              	.LVL133:
 1385              		.thumb
 1386              		.syntax unified
 1387              	.LBE116:
 1388              	.LBE115:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1389              		.loc 1 1533 0 discriminator 4
 1390 0024 10BD     		pop	{r4, pc}
 1391              	.LVL134:
 1392              	.L125:
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1393              		.loc 1 1527 0 discriminator 1
 1394 0026 014A     		ldr	r2, .L126
 1395 0028 1468     		ldr	r4, [r2]
 1396              	.LVL135:
 1397 002a F8E7     		b	.L123
 1398              	.L127:
 1399              		.align	2
 1400              	.L126:
 1401 002c 00000000 		.word	.LANCHOR10
 1402              		.cfi_endproc
 1403              	.LFE15:
 1405              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1406              		.align	1
 1407              		.global	vTaskPrioritySet
 1408              		.syntax unified
 1409              		.thumb
 1410              		.thumb_func
 1411              		.fpu fpv4-sp-d16
 1413              	vTaskPrioritySet:
 1414              	.LFB16:
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1415              		.loc 1 1541 0
 1416              		.cfi_startproc
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 125


 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 0, uses_anonymous_args = 0
 1419              	.LVL136:
 1420 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1421              	.LCFI17:
 1422              		.cfi_def_cfa_offset 24
 1423              		.cfi_offset 3, -24
 1424              		.cfi_offset 4, -20
 1425              		.cfi_offset 5, -16
 1426              		.cfi_offset 6, -12
 1427              		.cfi_offset 7, -8
 1428              		.cfi_offset 14, -4
 1429              	.LVL137:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1430              		.loc 1 1546 0
 1431 0002 0629     		cmp	r1, #6
 1432 0004 08D9     		bls	.L129
 1433              	.LBB117:
 1434              	.LBB118:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1435              		.loc 2 195 0
 1436              		.syntax unified
 1437              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1438 0006 4FF05003 			mov r3, #80												
 1439 000a 83F31188 		msr basepri, r3											
 1440 000e BFF36F8F 		isb														
 1441 0012 BFF34F8F 		dsb														
 1442              	
 1443              	@ 0 "" 2
 1444              	.LVL138:
 1445              		.thumb
 1446              		.syntax unified
 1447              	.L130:
 1448 0016 FEE7     		b	.L130
 1449              	.L129:
 1450 0018 0446     		mov	r4, r0
 1451 001a 0D46     		mov	r5, r1
 1452              	.LVL139:
 1453              	.LBE118:
 1454              	.LBE117:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1455              		.loc 1 1558 0
 1456 001c FFF7FEFF 		bl	vPortEnterCritical
 1457              	.LVL140:
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1458              		.loc 1 1562 0
 1459 0020 0CB9     		cbnz	r4, .L131
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1460              		.loc 1 1562 0 is_stmt 0 discriminator 1
 1461 0022 2A4B     		ldr	r3, .L143
 1462 0024 1C68     		ldr	r4, [r3]
 1463              	.LVL141:
 1464              	.L131:
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1465              		.loc 1 1568 0 is_stmt 1 discriminator 4
 1466 0026 236D     		ldr	r3, [r4, #80]
 1467              	.LVL142:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 126


1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1468              		.loc 1 1576 0 discriminator 4
 1469 0028 9D42     		cmp	r5, r3
 1470 002a 40D0     		beq	.L132
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1471              		.loc 1 1580 0
 1472 002c 42D9     		bls	.L133
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1473              		.loc 1 1582 0
 1474 002e 274A     		ldr	r2, .L143
 1475 0030 1268     		ldr	r2, [r2]
 1476 0032 A242     		cmp	r2, r4
 1477 0034 44D0     		beq	.L139
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1478              		.loc 1 1587 0
 1479 0036 254A     		ldr	r2, .L143
 1480 0038 1268     		ldr	r2, [r2]
 1481 003a D26A     		ldr	r2, [r2, #44]
 1482 003c AA42     		cmp	r2, r5
 1483 003e 41D9     		bls	.L140
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1484              		.loc 1 1544 0
 1485 0040 0026     		movs	r6, #0
 1486              	.L134:
 1487              	.LVL143:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1488              		.loc 1 1620 0
 1489 0042 E76A     		ldr	r7, [r4, #44]
 1490              	.LVL144:
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1491              		.loc 1 1626 0
 1492 0044 BB42     		cmp	r3, r7
 1493 0046 00D1     		bne	.L135
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1494              		.loc 1 1628 0
 1495 0048 E562     		str	r5, [r4, #44]
 1496              	.L135:
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1497              		.loc 1 1636 0
 1498 004a 2565     		str	r5, [r4, #80]
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1499              		.loc 1 1646 0
 1500 004c A369     		ldr	r3, [r4, #24]
 1501              	.LVL145:
 1502 004e 002B     		cmp	r3, #0
 1503 0050 02DB     		blt	.L136
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1504              		.loc 1 1648 0
 1505 0052 C5F10705 		rsb	r5, r5, #7
 1506              	.LVL146:
 1507 0056 A561     		str	r5, [r4, #24]
 1508              	.L136:
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1509              		.loc 1 1659 0
 1510 0058 6269     		ldr	r2, [r4, #20]
 1511 005a 1D49     		ldr	r1, .L143+4
 1512 005c 1423     		movs	r3, #20
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 127


 1513 005e 03FB0713 		mla	r3, r3, r7, r1
 1514 0062 9A42     		cmp	r2, r3
 1515 0064 1AD1     		bne	.L137
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1516              		.loc 1 1664 0
 1517 0066 251D     		adds	r5, r4, #4
 1518 0068 2846     		mov	r0, r5
 1519 006a FFF7FEFF 		bl	uxListRemove
 1520              	.LVL147:
 1521 006e 38B9     		cbnz	r0, .L138
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1522              		.loc 1 1669 0
 1523 0070 0123     		movs	r3, #1
 1524 0072 03FA07F2 		lsl	r2, r3, r7
 1525 0076 1749     		ldr	r1, .L143+8
 1526 0078 0B68     		ldr	r3, [r1]
 1527 007a 23EA0203 		bic	r3, r3, r2
 1528 007e 0B60     		str	r3, [r1]
 1529              	.L138:
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1530              		.loc 1 1675 0
 1531 0080 E26A     		ldr	r2, [r4, #44]
 1532 0082 0123     		movs	r3, #1
 1533 0084 9340     		lsls	r3, r3, r2
 1534 0086 1349     		ldr	r1, .L143+8
 1535 0088 0868     		ldr	r0, [r1]
 1536 008a 0343     		orrs	r3, r3, r0
 1537 008c 0B60     		str	r3, [r1]
 1538 008e 2946     		mov	r1, r5
 1539 0090 0F4B     		ldr	r3, .L143+4
 1540 0092 1420     		movs	r0, #20
 1541 0094 00FB0230 		mla	r0, r0, r2, r3
 1542 0098 FFF7FEFF 		bl	vListInsertEnd
 1543              	.LVL148:
 1544              	.L137:
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1545              		.loc 1 1682 0
 1546 009c 3EB1     		cbz	r6, .L132
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1547              		.loc 1 1684 0
 1548 009e 0E4B     		ldr	r3, .L143+12
 1549 00a0 4FF08052 		mov	r2, #268435456
 1550 00a4 1A60     		str	r2, [r3]
 1551              		.syntax unified
 1552              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1553 00a6 BFF34F8F 		dsb
 1554              	@ 0 "" 2
 1555              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1556 00aa BFF36F8F 		isb
 1557              	@ 0 "" 2
 1558              	.LVL149:
 1559              		.thumb
 1560              		.syntax unified
 1561              	.L132:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1562              		.loc 1 1696 0
 1563 00ae FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 128


 1564              	.LVL150:
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1565              		.loc 1 1697 0
 1566 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1567              	.LVL151:
 1568              	.L133:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1569              		.loc 1 1603 0
 1570 00b4 054A     		ldr	r2, .L143
 1571 00b6 1268     		ldr	r2, [r2]
 1572 00b8 A242     		cmp	r2, r4
 1573 00ba 05D0     		beq	.L141
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1574              		.loc 1 1544 0
 1575 00bc 0026     		movs	r6, #0
 1576 00be C0E7     		b	.L134
 1577              	.L139:
 1578 00c0 0026     		movs	r6, #0
 1579 00c2 BEE7     		b	.L134
 1580              	.L140:
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1581              		.loc 1 1589 0
 1582 00c4 0126     		movs	r6, #1
 1583 00c6 BCE7     		b	.L134
 1584              	.L141:
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1585              		.loc 1 1608 0
 1586 00c8 0126     		movs	r6, #1
 1587 00ca BAE7     		b	.L134
 1588              	.L144:
 1589              		.align	2
 1590              	.L143:
 1591 00cc 00000000 		.word	.LANCHOR10
 1592 00d0 00000000 		.word	.LANCHOR4
 1593 00d4 00000000 		.word	.LANCHOR13
 1594 00d8 04ED00E0 		.word	-536810236
 1595              		.cfi_endproc
 1596              	.LFE16:
 1598              		.section	.text.vTaskResume,"ax",%progbits
 1599              		.align	1
 1600              		.global	vTaskResume
 1601              		.syntax unified
 1602              		.thumb
 1603              		.thumb_func
 1604              		.fpu fpv4-sp-d16
 1606              	vTaskResume:
 1607              	.LFB19:
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1608              		.loc 1 1852 0
 1609              		.cfi_startproc
 1610              		@ args = 0, pretend = 0, frame = 0
 1611              		@ frame_needed = 0, uses_anonymous_args = 0
 1612              	.LVL152:
 1613 0000 38B5     		push	{r3, r4, r5, lr}
 1614              	.LCFI18:
 1615              		.cfi_def_cfa_offset 16
 1616              		.cfi_offset 3, -16
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 129


 1617              		.cfi_offset 4, -12
 1618              		.cfi_offset 5, -8
 1619              		.cfi_offset 14, -4
 1620              	.LVL153:
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1621              		.loc 1 1856 0
 1622 0002 68B1     		cbz	r0, .L151
 1623 0004 0446     		mov	r4, r0
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1624              		.loc 1 1860 0
 1625 0006 1B4B     		ldr	r3, .L153
 1626 0008 1B68     		ldr	r3, [r3]
 1627 000a 8342     		cmp	r3, r0
 1628 000c 07D0     		beq	.L145
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1629              		.loc 1 1862 0
 1630 000e FFF7FEFF 		bl	vPortEnterCritical
 1631              	.LVL154:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1632              		.loc 1 1864 0
 1633 0012 2046     		mov	r0, r4
 1634 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1635              	.LVL155:
 1636 0018 58B9     		cbnz	r0, .L152
 1637              	.L149:
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1638              		.loc 1 1891 0
 1639 001a FFF7FEFF 		bl	vPortExitCritical
 1640              	.LVL156:
 1641              	.L145:
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1642              		.loc 1 1897 0
 1643 001e 38BD     		pop	{r3, r4, r5, pc}
 1644              	.LVL157:
 1645              	.L151:
 1646              	.LBB119:
 1647              	.LBB120:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1648              		.loc 2 195 0
 1649              		.syntax unified
 1650              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1651 0020 4FF05003 			mov r3, #80												
 1652 0024 83F31188 		msr basepri, r3											
 1653 0028 BFF36F8F 		isb														
 1654 002c BFF34F8F 		dsb														
 1655              	
 1656              	@ 0 "" 2
 1657              	.LVL158:
 1658              		.thumb
 1659              		.syntax unified
 1660              	.L147:
 1661 0030 FEE7     		b	.L147
 1662              	.LVL159:
 1663              	.L152:
 1664              	.LBE120:
 1665              	.LBE119:
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 130


 1666              		.loc 1 1870 0
 1667 0032 251D     		adds	r5, r4, #4
 1668 0034 2846     		mov	r0, r5
 1669 0036 FFF7FEFF 		bl	uxListRemove
 1670              	.LVL160:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1671              		.loc 1 1871 0
 1672 003a E26A     		ldr	r2, [r4, #44]
 1673 003c 0123     		movs	r3, #1
 1674 003e 9340     		lsls	r3, r3, r2
 1675 0040 0D49     		ldr	r1, .L153+4
 1676 0042 0868     		ldr	r0, [r1]
 1677 0044 0343     		orrs	r3, r3, r0
 1678 0046 0B60     		str	r3, [r1]
 1679 0048 2946     		mov	r1, r5
 1680 004a 0C4B     		ldr	r3, .L153+8
 1681 004c 1420     		movs	r0, #20
 1682 004e 00FB0230 		mla	r0, r0, r2, r3
 1683 0052 FFF7FEFF 		bl	vListInsertEnd
 1684              	.LVL161:
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1685              		.loc 1 1874 0
 1686 0056 E26A     		ldr	r2, [r4, #44]
 1687 0058 064B     		ldr	r3, .L153
 1688 005a 1B68     		ldr	r3, [r3]
 1689 005c DB6A     		ldr	r3, [r3, #44]
 1690 005e 9A42     		cmp	r2, r3
 1691 0060 DBD3     		bcc	.L149
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1692              		.loc 1 1879 0
 1693 0062 074B     		ldr	r3, .L153+12
 1694 0064 4FF08052 		mov	r2, #268435456
 1695 0068 1A60     		str	r2, [r3]
 1696              		.syntax unified
 1697              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1698 006a BFF34F8F 		dsb
 1699              	@ 0 "" 2
 1700              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1701 006e BFF36F8F 		isb
 1702              	@ 0 "" 2
 1703              		.thumb
 1704              		.syntax unified
 1705 0072 D2E7     		b	.L149
 1706              	.L154:
 1707              		.align	2
 1708              	.L153:
 1709 0074 00000000 		.word	.LANCHOR10
 1710 0078 00000000 		.word	.LANCHOR13
 1711 007c 00000000 		.word	.LANCHOR4
 1712 0080 04ED00E0 		.word	-536810236
 1713              		.cfi_endproc
 1714              	.LFE19:
 1716              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1717              		.align	1
 1718              		.global	xTaskResumeFromISR
 1719              		.syntax unified
 1720              		.thumb
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 131


 1721              		.thumb_func
 1722              		.fpu fpv4-sp-d16
 1724              	xTaskResumeFromISR:
 1725              	.LFB20:
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1726              		.loc 1 1906 0
 1727              		.cfi_startproc
 1728              		@ args = 0, pretend = 0, frame = 0
 1729              		@ frame_needed = 0, uses_anonymous_args = 0
 1730              	.LVL162:
 1731 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1732              	.LCFI19:
 1733              		.cfi_def_cfa_offset 24
 1734              		.cfi_offset 3, -24
 1735              		.cfi_offset 4, -20
 1736              		.cfi_offset 5, -16
 1737              		.cfi_offset 6, -12
 1738              		.cfi_offset 7, -8
 1739              		.cfi_offset 14, -4
 1740              	.LVL163:
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1741              		.loc 1 1911 0
 1742 0002 40B9     		cbnz	r0, .L156
 1743              	.LBB121:
 1744              	.LBB122:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1745              		.loc 2 195 0
 1746              		.syntax unified
 1747              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1748 0004 4FF05003 			mov r3, #80												
 1749 0008 83F31188 		msr basepri, r3											
 1750 000c BFF36F8F 		isb														
 1751 0010 BFF34F8F 		dsb														
 1752              	
 1753              	@ 0 "" 2
 1754              	.LVL164:
 1755              		.thumb
 1756              		.syntax unified
 1757              	.L157:
 1758 0014 FEE7     		b	.L157
 1759              	.L156:
 1760 0016 0446     		mov	r4, r0
 1761              	.LBE122:
 1762              	.LBE121:
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1763              		.loc 1 1929 0
 1764 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1765              	.LVL165:
 1766              	.LBB123:
 1767              	.LBB124:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1768              		.loc 2 211 0
 1769              		.syntax unified
 1770              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1771 001c EFF31187 			mrs r7, basepri											
 1772 0020 4FF05003 		mov r3, #80												
 1773 0024 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 132


 1774 0028 BFF36F8F 		isb														
 1775 002c BFF34F8F 		dsb														
 1776              	
 1777              	@ 0 "" 2
 1778              		.thumb
 1779              		.syntax unified
 1780              	.LBE124:
 1781              	.LBE123:
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1782              		.loc 1 1933 0
 1783 0030 2046     		mov	r0, r4
 1784 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1785              	.LVL166:
 1786 0036 40B3     		cbz	r0, .L161
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1787              		.loc 1 1938 0
 1788 0038 154B     		ldr	r3, .L164
 1789 003a 1B68     		ldr	r3, [r3]
 1790 003c F3B9     		cbnz	r3, .L159
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1791              		.loc 1 1942 0
 1792 003e E26A     		ldr	r2, [r4, #44]
 1793 0040 144B     		ldr	r3, .L164+4
 1794 0042 1B68     		ldr	r3, [r3]
 1795 0044 DB6A     		ldr	r3, [r3, #44]
 1796 0046 9A42     		cmp	r2, r3
 1797 0048 16D2     		bcs	.L162
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1798              		.loc 1 1907 0
 1799 004a 0025     		movs	r5, #0
 1800              	.L160:
 1801              	.LVL167:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1802              		.loc 1 1951 0
 1803 004c 261D     		adds	r6, r4, #4
 1804 004e 3046     		mov	r0, r6
 1805 0050 FFF7FEFF 		bl	uxListRemove
 1806              	.LVL168:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1807              		.loc 1 1952 0
 1808 0054 E26A     		ldr	r2, [r4, #44]
 1809 0056 0123     		movs	r3, #1
 1810 0058 9340     		lsls	r3, r3, r2
 1811 005a 0F49     		ldr	r1, .L164+8
 1812 005c 0868     		ldr	r0, [r1]
 1813 005e 0343     		orrs	r3, r3, r0
 1814 0060 0B60     		str	r3, [r1]
 1815 0062 3146     		mov	r1, r6
 1816 0064 0D4B     		ldr	r3, .L164+12
 1817 0066 1420     		movs	r0, #20
 1818 0068 00FB0230 		mla	r0, r0, r2, r3
 1819 006c FFF7FEFF 		bl	vListInsertEnd
 1820              	.LVL169:
 1821              	.L158:
 1822              	.LBB125:
 1823              	.LBB126:
 1824              		.loc 2 229 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 133


 1825              		.syntax unified
 1826              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1827 0070 87F31188 			msr basepri, r7	
 1828              	@ 0 "" 2
 1829              	.LVL170:
 1830              		.thumb
 1831              		.syntax unified
 1832              	.LBE126:
 1833              	.LBE125:
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1834              		.loc 1 1970 0
 1835 0074 2846     		mov	r0, r5
 1836 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1837              	.LVL171:
 1838              	.L162:
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1839              		.loc 1 1944 0
 1840 0078 0125     		movs	r5, #1
 1841 007a E7E7     		b	.L160
 1842              	.L159:
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1843              		.loc 1 1959 0
 1844 007c 04F11801 		add	r1, r4, #24
 1845 0080 0748     		ldr	r0, .L164+16
 1846 0082 FFF7FEFF 		bl	vListInsertEnd
 1847              	.LVL172:
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1848              		.loc 1 1907 0
 1849 0086 0025     		movs	r5, #0
 1850 0088 F2E7     		b	.L158
 1851              	.L161:
 1852 008a 0025     		movs	r5, #0
 1853 008c F0E7     		b	.L158
 1854              	.L165:
 1855 008e 00BF     		.align	2
 1856              	.L164:
 1857 0090 00000000 		.word	.LANCHOR16
 1858 0094 00000000 		.word	.LANCHOR10
 1859 0098 00000000 		.word	.LANCHOR13
 1860 009c 00000000 		.word	.LANCHOR4
 1861 00a0 00000000 		.word	.LANCHOR1
 1862              		.cfi_endproc
 1863              	.LFE20:
 1865              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1866              		.align	1
 1867              		.global	vTaskStartScheduler
 1868              		.syntax unified
 1869              		.thumb
 1870              		.thumb_func
 1871              		.fpu fpv4-sp-d16
 1873              	vTaskStartScheduler:
 1874              	.LFB21:
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1875              		.loc 1 1976 0
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 0
 1878              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 134


 1879 0000 00B5     		push	{lr}
 1880              	.LCFI20:
 1881              		.cfi_def_cfa_offset 4
 1882              		.cfi_offset 14, -4
 1883 0002 83B0     		sub	sp, sp, #12
 1884              	.LCFI21:
 1885              		.cfi_def_cfa_offset 16
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
 1886              		.loc 1 2009 0
 1887 0004 184B     		ldr	r3, .L173
 1888 0006 0193     		str	r3, [sp, #4]
 1889 0008 0023     		movs	r3, #0
 1890 000a 0093     		str	r3, [sp]
 1891 000c 4FF48072 		mov	r2, #256
 1892 0010 1649     		ldr	r1, .L173+4
 1893 0012 1748     		ldr	r0, .L173+8
 1894 0014 FFF7FEFF 		bl	xTaskCreate
 1895              	.LVL173:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1896              		.loc 1 2031 0
 1897 0018 0128     		cmp	r0, #1
 1898 001a 05D0     		beq	.L171
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1899              		.loc 1 2090 0
 1900 001c B0F1FF3F 		cmp	r0, #-1
 1901 0020 19D0     		beq	.L172
 1902              	.LVL174:
 1903              	.L166:
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1904              		.loc 1 2096 0
 1905 0022 03B0     		add	sp, sp, #12
 1906              	.LCFI22:
 1907              		.cfi_remember_state
 1908              		.cfi_def_cfa_offset 4
 1909              		@ sp needed
 1910 0024 5DF804FB 		ldr	pc, [sp], #4
 1911              	.LVL175:
 1912              	.L171:
 1913              	.LCFI23:
 1914              		.cfi_restore_state
 1915              	.LBB127:
 1916              	.LBB128:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1917              		.loc 2 195 0
 1918              		.syntax unified
 1919              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1920 0028 4FF05003 			mov r3, #80												
 1921 002c 83F31188 		msr basepri, r3											
 1922 0030 BFF36F8F 		isb														
 1923 0034 BFF34F8F 		dsb														
 1924              	
 1925              	@ 0 "" 2
 1926              		.thumb
 1927              		.syntax unified
 1928              	.LBE128:
 1929              	.LBE127:
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 135


 1930              		.loc 1 2059 0
 1931 0038 0E4B     		ldr	r3, .L173+12
 1932 003a 4FF0FF32 		mov	r2, #-1
 1933 003e 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1934              		.loc 1 2060 0
 1935 0040 0D4B     		ldr	r3, .L173+16
 1936 0042 0122     		movs	r2, #1
 1937 0044 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1938              		.loc 1 2061 0
 1939 0046 0D4B     		ldr	r3, .L173+20
 1940 0048 0022     		movs	r2, #0
 1941 004a 1A60     		str	r2, [r3]
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1942              		.loc 1 2069 0
 1943 004c FFF7FEFF 		bl	configureTimerForRunTimeStats
 1944              	.LVL176:
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1945              		.loc 1 2075 0
 1946 0050 FFF7FEFF 		bl	xPortStartScheduler
 1947              	.LVL177:
 1948 0054 E5E7     		b	.L166
 1949              	.LVL178:
 1950              	.L172:
 1951              	.LBB129:
 1952              	.LBB130:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1953              		.loc 2 195 0
 1954              		.syntax unified
 1955              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1956 0056 4FF05003 			mov r3, #80												
 1957 005a 83F31188 		msr basepri, r3											
 1958 005e BFF36F8F 		isb														
 1959 0062 BFF34F8F 		dsb														
 1960              	
 1961              	@ 0 "" 2
 1962              	.LVL179:
 1963              		.thumb
 1964              		.syntax unified
 1965              	.L169:
 1966 0066 FEE7     		b	.L169
 1967              	.L174:
 1968              		.align	2
 1969              	.L173:
 1970 0068 00000000 		.word	.LANCHOR17
 1971 006c 00000000 		.word	.LC0
 1972 0070 00000000 		.word	prvIdleTask
 1973 0074 00000000 		.word	.LANCHOR3
 1974 0078 00000000 		.word	.LANCHOR11
 1975 007c 00000000 		.word	.LANCHOR15
 1976              	.LBE130:
 1977              	.LBE129:
 1978              		.cfi_endproc
 1979              	.LFE21:
 1981              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1982              		.align	1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 136


 1983              		.global	vTaskEndScheduler
 1984              		.syntax unified
 1985              		.thumb
 1986              		.thumb_func
 1987              		.fpu fpv4-sp-d16
 1989              	vTaskEndScheduler:
 1990              	.LFB22:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1991              		.loc 1 2100 0
 1992              		.cfi_startproc
 1993              		@ args = 0, pretend = 0, frame = 0
 1994              		@ frame_needed = 0, uses_anonymous_args = 0
 1995 0000 08B5     		push	{r3, lr}
 1996              	.LCFI24:
 1997              		.cfi_def_cfa_offset 8
 1998              		.cfi_offset 3, -8
 1999              		.cfi_offset 14, -4
 2000              	.LBB131:
 2001              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2002              		.loc 2 195 0
 2003              		.syntax unified
 2004              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2005 0002 4FF05003 			mov r3, #80												
 2006 0006 83F31188 		msr basepri, r3											
 2007 000a BFF36F8F 		isb														
 2008 000e BFF34F8F 		dsb														
 2009              	
 2010              	@ 0 "" 2
 2011              		.thumb
 2012              		.syntax unified
 2013              	.LBE132:
 2014              	.LBE131:
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2015              		.loc 1 2105 0
 2016 0012 034B     		ldr	r3, .L177
 2017 0014 0022     		movs	r2, #0
 2018 0016 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2019              		.loc 1 2106 0
 2020 0018 FFF7FEFF 		bl	vPortEndScheduler
 2021              	.LVL180:
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2022              		.loc 1 2107 0
 2023 001c 08BD     		pop	{r3, pc}
 2024              	.L178:
 2025 001e 00BF     		.align	2
 2026              	.L177:
 2027 0020 00000000 		.word	.LANCHOR11
 2028              		.cfi_endproc
 2029              	.LFE22:
 2031              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2032              		.align	1
 2033              		.global	vTaskSuspendAll
 2034              		.syntax unified
 2035              		.thumb
 2036              		.thumb_func
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 137


 2037              		.fpu fpv4-sp-d16
 2039              	vTaskSuspendAll:
 2040              	.LFB23:
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2041              		.loc 1 2111 0
 2042              		.cfi_startproc
 2043              		@ args = 0, pretend = 0, frame = 0
 2044              		@ frame_needed = 0, uses_anonymous_args = 0
 2045              		@ link register save eliminated.
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2046              		.loc 1 2123 0
 2047 0000 024A     		ldr	r2, .L180
 2048 0002 1368     		ldr	r3, [r2]
 2049 0004 0133     		adds	r3, r3, #1
 2050 0006 1360     		str	r3, [r2]
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2051              		.loc 1 2127 0
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2052              		.loc 1 2128 0
 2053 0008 7047     		bx	lr
 2054              	.L181:
 2055 000a 00BF     		.align	2
 2056              	.L180:
 2057 000c 00000000 		.word	.LANCHOR16
 2058              		.cfi_endproc
 2059              	.LFE23:
 2061              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2062              		.align	1
 2063              		.global	xTaskGetTickCount
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv4-sp-d16
 2069              	xTaskGetTickCount:
 2070              	.LFB25:
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2071              		.loc 1 2305 0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2076              		.loc 1 2311 0
 2077 0000 014B     		ldr	r3, .L183
 2078 0002 1868     		ldr	r0, [r3]
 2079              	.LVL181:
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2080              		.loc 1 2316 0
 2081 0004 7047     		bx	lr
 2082              	.L184:
 2083 0006 00BF     		.align	2
 2084              	.L183:
 2085 0008 00000000 		.word	.LANCHOR15
 2086              		.cfi_endproc
 2087              	.LFE25:
 2089              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2090              		.align	1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 138


 2091              		.global	xTaskGetTickCountFromISR
 2092              		.syntax unified
 2093              		.thumb
 2094              		.thumb_func
 2095              		.fpu fpv4-sp-d16
 2097              	xTaskGetTickCountFromISR:
 2098              	.LFB26:
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2099              		.loc 1 2320 0
 2100              		.cfi_startproc
 2101              		@ args = 0, pretend = 0, frame = 0
 2102              		@ frame_needed = 0, uses_anonymous_args = 0
 2103 0000 08B5     		push	{r3, lr}
 2104              	.LCFI25:
 2105              		.cfi_def_cfa_offset 8
 2106              		.cfi_offset 3, -8
 2107              		.cfi_offset 14, -4
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2108              		.loc 1 2338 0
 2109 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2110              	.LVL182:
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2111              		.loc 1 2342 0
 2112 0006 014B     		ldr	r3, .L187
 2113 0008 1868     		ldr	r0, [r3]
 2114              	.LVL183:
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2115              		.loc 1 2347 0
 2116 000a 08BD     		pop	{r3, pc}
 2117              	.L188:
 2118              		.align	2
 2119              	.L187:
 2120 000c 00000000 		.word	.LANCHOR15
 2121              		.cfi_endproc
 2122              	.LFE26:
 2124              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2125              		.align	1
 2126              		.global	uxTaskGetNumberOfTasks
 2127              		.syntax unified
 2128              		.thumb
 2129              		.thumb_func
 2130              		.fpu fpv4-sp-d16
 2132              	uxTaskGetNumberOfTasks:
 2133              	.LFB27:
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2134              		.loc 1 2351 0
 2135              		.cfi_startproc
 2136              		@ args = 0, pretend = 0, frame = 0
 2137              		@ frame_needed = 0, uses_anonymous_args = 0
 2138              		@ link register save eliminated.
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2139              		.loc 1 2354 0
 2140 0000 014B     		ldr	r3, .L190
 2141 0002 1868     		ldr	r0, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2142              		.loc 1 2355 0
 2143 0004 7047     		bx	lr
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 139


 2144              	.L191:
 2145 0006 00BF     		.align	2
 2146              	.L190:
 2147 0008 00000000 		.word	.LANCHOR9
 2148              		.cfi_endproc
 2149              	.LFE27:
 2151              		.section	.text.pcTaskGetName,"ax",%progbits
 2152              		.align	1
 2153              		.global	pcTaskGetName
 2154              		.syntax unified
 2155              		.thumb
 2156              		.thumb_func
 2157              		.fpu fpv4-sp-d16
 2159              	pcTaskGetName:
 2160              	.LFB28:
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2161              		.loc 1 2359 0
 2162              		.cfi_startproc
 2163              		@ args = 0, pretend = 0, frame = 0
 2164              		@ frame_needed = 0, uses_anonymous_args = 0
 2165              		@ link register save eliminated.
 2166              	.LVL184:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2167              		.loc 1 2364 0
 2168 0000 0346     		mov	r3, r0
 2169 0002 18B1     		cbz	r0, .L196
 2170              	.LVL185:
 2171              	.L193:
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2172              		.loc 1 2365 0 discriminator 4
 2173 0004 2BB1     		cbz	r3, .L197
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2174              		.loc 1 2367 0
 2175 0006 03F13400 		add	r0, r3, #52
 2176 000a 7047     		bx	lr
 2177              	.LVL186:
 2178              	.L196:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2179              		.loc 1 2364 0 discriminator 1
 2180 000c 054B     		ldr	r3, .L198
 2181 000e 1B68     		ldr	r3, [r3]
 2182              	.LVL187:
 2183 0010 F8E7     		b	.L193
 2184              	.LVL188:
 2185              	.L197:
 2186              	.LBB133:
 2187              	.LBB134:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2188              		.loc 2 195 0
 2189              		.syntax unified
 2190              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2191 0012 4FF05003 			mov r3, #80												
 2192 0016 83F31188 		msr basepri, r3											
 2193 001a BFF36F8F 		isb														
 2194 001e BFF34F8F 		dsb														
 2195              	
 2196              	@ 0 "" 2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 140


 2197              	.LVL189:
 2198              		.thumb
 2199              		.syntax unified
 2200              	.L195:
 2201 0022 FEE7     		b	.L195
 2202              	.L199:
 2203              		.align	2
 2204              	.L198:
 2205 0024 00000000 		.word	.LANCHOR10
 2206              	.LBE134:
 2207              	.LBE133:
 2208              		.cfi_endproc
 2209              	.LFE28:
 2211              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2212              		.align	1
 2213              		.global	xTaskIncrementTick
 2214              		.syntax unified
 2215              		.thumb
 2216              		.thumb_func
 2217              		.fpu fpv4-sp-d16
 2219              	xTaskIncrementTick:
 2220              	.LFB31:
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2221              		.loc 1 2708 0
 2222              		.cfi_startproc
 2223              		@ args = 0, pretend = 0, frame = 0
 2224              		@ frame_needed = 0, uses_anonymous_args = 0
 2225 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2226              	.LCFI26:
 2227              		.cfi_def_cfa_offset 24
 2228              		.cfi_offset 3, -24
 2229              		.cfi_offset 4, -20
 2230              		.cfi_offset 5, -16
 2231              		.cfi_offset 6, -12
 2232              		.cfi_offset 7, -8
 2233              		.cfi_offset 14, -4
 2234              	.LVL190:
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2235              		.loc 1 2717 0
 2236 0002 3A4B     		ldr	r3, .L221
 2237 0004 1B68     		ldr	r3, [r3]
 2238 0006 002B     		cmp	r3, #0
 2239 0008 69D1     		bne	.L201
 2240              	.LBB135:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2241              		.loc 1 2721 0
 2242 000a 394B     		ldr	r3, .L221+4
 2243 000c 1D68     		ldr	r5, [r3]
 2244 000e 0135     		adds	r5, r5, #1
 2245              	.LVL191:
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2246              		.loc 1 2725 0
 2247 0010 1D60     		str	r5, [r3]
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2248              		.loc 1 2727 0
 2249 0012 C5B9     		cbnz	r5, .L202
 2250              	.LBB136:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 141


2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2251              		.loc 1 2729 0
 2252 0014 374B     		ldr	r3, .L221+8
 2253 0016 1B68     		ldr	r3, [r3]
 2254 0018 1B68     		ldr	r3, [r3]
 2255 001a 43B1     		cbz	r3, .L203
 2256              	.LBB137:
 2257              	.LBB138:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2258              		.loc 2 195 0
 2259              		.syntax unified
 2260              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2261 001c 4FF05003 			mov r3, #80												
 2262 0020 83F31188 		msr basepri, r3											
 2263 0024 BFF36F8F 		isb														
 2264 0028 BFF34F8F 		dsb														
 2265              	
 2266              	@ 0 "" 2
 2267              	.LVL192:
 2268              		.thumb
 2269              		.syntax unified
 2270              	.L204:
 2271 002c FEE7     		b	.L204
 2272              	.L203:
 2273              	.LBE138:
 2274              	.LBE137:
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2275              		.loc 1 2729 0 discriminator 2
 2276 002e 314A     		ldr	r2, .L221+8
 2277 0030 1168     		ldr	r1, [r2]
 2278              	.LVL193:
 2279 0032 314B     		ldr	r3, .L221+12
 2280 0034 1868     		ldr	r0, [r3]
 2281 0036 1060     		str	r0, [r2]
 2282 0038 1960     		str	r1, [r3]
 2283 003a 304A     		ldr	r2, .L221+16
 2284 003c 1368     		ldr	r3, [r2]
 2285 003e 0133     		adds	r3, r3, #1
 2286 0040 1360     		str	r3, [r2]
 2287 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2288              	.LVL194:
 2289              	.L202:
 2290              	.LBE136:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2291              		.loc 1 2740 0
 2292 0046 2E4B     		ldr	r3, .L221+20
 2293 0048 1B68     		ldr	r3, [r3]
 2294 004a AB42     		cmp	r3, r5
 2295 004c 3DD9     		bls	.L214
 2296              	.LBE135:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2297              		.loc 1 2711 0
 2298 004e 0024     		movs	r4, #0
 2299              	.LVL195:
 2300              	.L206:
 2301              	.LBB139:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 142


 2302              		.loc 1 2823 0
 2303 0050 2C4B     		ldr	r3, .L221+24
 2304 0052 1B68     		ldr	r3, [r3]
 2305 0054 DB6A     		ldr	r3, [r3, #44]
 2306 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2307 005a 9A00     		lsls	r2, r3, #2
 2308 005c 2A4B     		ldr	r3, .L221+28
 2309 005e 9B58     		ldr	r3, [r3, r2]
 2310 0060 012B     		cmp	r3, #1
 2311 0062 00D9     		bls	.L212
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2312              		.loc 1 2825 0
 2313 0064 0124     		movs	r4, #1
 2314              	.LVL196:
 2315              	.L212:
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2316              		.loc 1 2851 0
 2317 0066 294B     		ldr	r3, .L221+32
 2318 0068 1B68     		ldr	r3, [r3]
 2319 006a 002B     		cmp	r3, #0
 2320 006c 3CD0     		beq	.L200
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2321              		.loc 1 2853 0
 2322 006e 0124     		movs	r4, #1
 2323              	.LVL197:
 2324              	.LBE139:
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2325              		.loc 1 2875 0
 2326 0070 3AE0     		b	.L200
 2327              	.LVL198:
 2328              	.L215:
 2329              	.LBB140:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2330              		.loc 1 2806 0
 2331 0072 0124     		movs	r4, #1
 2332              	.LVL199:
 2333              	.L205:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2334              		.loc 1 2744 0
 2335 0074 1F4B     		ldr	r3, .L221+8
 2336 0076 1B68     		ldr	r3, [r3]
 2337 0078 1B68     		ldr	r3, [r3]
 2338 007a 43B3     		cbz	r3, .L219
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2339              		.loc 1 2760 0
 2340 007c 1D4B     		ldr	r3, .L221+8
 2341 007e 1B68     		ldr	r3, [r3]
 2342 0080 DB68     		ldr	r3, [r3, #12]
 2343 0082 DE68     		ldr	r6, [r3, #12]
 2344              	.LVL200:
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2345              		.loc 1 2761 0
 2346 0084 7368     		ldr	r3, [r6, #4]
 2347              	.LVL201:
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2348              		.loc 1 2763 0
 2349 0086 9D42     		cmp	r5, r3
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 143


 2350 0088 26D3     		bcc	.L220
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2351              		.loc 1 2779 0
 2352 008a 371D     		adds	r7, r6, #4
 2353 008c 3846     		mov	r0, r7
 2354 008e FFF7FEFF 		bl	uxListRemove
 2355              	.LVL202:
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2356              		.loc 1 2783 0
 2357 0092 B36A     		ldr	r3, [r6, #40]
 2358 0094 1BB1     		cbz	r3, .L209
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2359              		.loc 1 2785 0
 2360 0096 06F11800 		add	r0, r6, #24
 2361 009a FFF7FEFF 		bl	uxListRemove
 2362              	.LVL203:
 2363              	.L209:
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2364              		.loc 1 2794 0
 2365 009e F36A     		ldr	r3, [r6, #44]
 2366 00a0 0122     		movs	r2, #1
 2367 00a2 9A40     		lsls	r2, r2, r3
 2368 00a4 1A49     		ldr	r1, .L221+36
 2369 00a6 0868     		ldr	r0, [r1]
 2370 00a8 0243     		orrs	r2, r2, r0
 2371 00aa 0A60     		str	r2, [r1]
 2372 00ac 03EB8303 		add	r3, r3, r3, lsl #2
 2373 00b0 9A00     		lsls	r2, r3, #2
 2374 00b2 3946     		mov	r1, r7
 2375 00b4 1448     		ldr	r0, .L221+28
 2376 00b6 1044     		add	r0, r0, r2
 2377 00b8 FFF7FEFF 		bl	vListInsertEnd
 2378              	.LVL204:
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2379              		.loc 1 2804 0
 2380 00bc F26A     		ldr	r2, [r6, #44]
 2381 00be 114B     		ldr	r3, .L221+24
 2382 00c0 1B68     		ldr	r3, [r3]
 2383 00c2 DB6A     		ldr	r3, [r3, #44]
 2384 00c4 9A42     		cmp	r2, r3
 2385 00c6 D4D2     		bcs	.L215
 2386 00c8 D4E7     		b	.L205
 2387              	.LVL205:
 2388              	.L214:
 2389              	.LBE140:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2390              		.loc 1 2711 0
 2391 00ca 0024     		movs	r4, #0
 2392 00cc D2E7     		b	.L205
 2393              	.LVL206:
 2394              	.L219:
 2395              	.LBB141:
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2396              		.loc 1 2751 0
 2397 00ce 0C4B     		ldr	r3, .L221+20
 2398 00d0 4FF0FF32 		mov	r2, #-1
 2399 00d4 1A60     		str	r2, [r3]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 144


2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2400              		.loc 1 2752 0
 2401 00d6 BBE7     		b	.L206
 2402              	.LVL207:
 2403              	.L220:
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2404              		.loc 1 2770 0
 2405 00d8 094A     		ldr	r2, .L221+20
 2406 00da 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2407              		.loc 1 2771 0
 2408 00dc B8E7     		b	.L206
 2409              	.LVL208:
 2410              	.L201:
 2411              	.LBE141:
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2412              		.loc 1 2864 0
 2413 00de 0D4A     		ldr	r2, .L221+40
 2414 00e0 1368     		ldr	r3, [r2]
 2415 00e2 0133     		adds	r3, r3, #1
 2416 00e4 1360     		str	r3, [r2]
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2417              		.loc 1 2711 0
 2418 00e6 0024     		movs	r4, #0
 2419              	.LVL209:
 2420              	.L200:
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2421              		.loc 1 2876 0
 2422 00e8 2046     		mov	r0, r4
 2423 00ea F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2424              	.L222:
 2425              		.align	2
 2426              	.L221:
 2427 00ec 00000000 		.word	.LANCHOR16
 2428 00f0 00000000 		.word	.LANCHOR15
 2429 00f4 00000000 		.word	.LANCHOR2
 2430 00f8 00000000 		.word	.LANCHOR8
 2431 00fc 00000000 		.word	.LANCHOR18
 2432 0100 00000000 		.word	.LANCHOR3
 2433 0104 00000000 		.word	.LANCHOR10
 2434 0108 00000000 		.word	.LANCHOR4
 2435 010c 00000000 		.word	.LANCHOR19
 2436 0110 00000000 		.word	.LANCHOR13
 2437 0114 00000000 		.word	.LANCHOR20
 2438              		.cfi_endproc
 2439              	.LFE31:
 2441              		.section	.text.xTaskResumeAll,"ax",%progbits
 2442              		.align	1
 2443              		.global	xTaskResumeAll
 2444              		.syntax unified
 2445              		.thumb
 2446              		.thumb_func
 2447              		.fpu fpv4-sp-d16
 2449              	xTaskResumeAll:
 2450              	.LFB24:
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2451              		.loc 1 2195 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 145


 2452              		.cfi_startproc
 2453              		@ args = 0, pretend = 0, frame = 0
 2454              		@ frame_needed = 0, uses_anonymous_args = 0
 2455 0000 38B5     		push	{r3, r4, r5, lr}
 2456              	.LCFI27:
 2457              		.cfi_def_cfa_offset 16
 2458              		.cfi_offset 3, -16
 2459              		.cfi_offset 4, -12
 2460              		.cfi_offset 5, -8
 2461              		.cfi_offset 14, -4
 2462              	.LVL210:
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2463              		.loc 1 2201 0
 2464 0002 334B     		ldr	r3, .L239
 2465 0004 1B68     		ldr	r3, [r3]
 2466 0006 43B9     		cbnz	r3, .L224
 2467              	.LBB142:
 2468              	.LBB143:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2469              		.loc 2 195 0
 2470              		.syntax unified
 2471              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2472 0008 4FF05003 			mov r3, #80												
 2473 000c 83F31188 		msr basepri, r3											
 2474 0010 BFF36F8F 		isb														
 2475 0014 BFF34F8F 		dsb														
 2476              	
 2477              	@ 0 "" 2
 2478              	.LVL211:
 2479              		.thumb
 2480              		.syntax unified
 2481              	.L225:
 2482 0018 FEE7     		b	.L225
 2483              	.L224:
 2484              	.LBE143:
 2485              	.LBE142:
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2486              		.loc 1 2208 0
 2487 001a FFF7FEFF 		bl	vPortEnterCritical
 2488              	.LVL212:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2489              		.loc 1 2210 0
 2490 001e 2C4B     		ldr	r3, .L239
 2491 0020 1A68     		ldr	r2, [r3]
 2492 0022 013A     		subs	r2, r2, #1
 2493 0024 1A60     		str	r2, [r3]
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2494              		.loc 1 2212 0
 2495 0026 1B68     		ldr	r3, [r3]
 2496 0028 002B     		cmp	r3, #0
 2497 002a 4DD1     		bne	.L234
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2498              		.loc 1 2214 0
 2499 002c 294B     		ldr	r3, .L239+4
 2500 002e 1B68     		ldr	r3, [r3]
 2501 0030 23B9     		cbnz	r3, .L235
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 146


 2502              		.loc 1 2197 0
 2503 0032 0024     		movs	r4, #0
 2504              	.LVL213:
 2505              	.L226:
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2506              		.loc 1 2298 0
 2507 0034 FFF7FEFF 		bl	vPortExitCritical
 2508              	.LVL214:
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2509              		.loc 1 2301 0
 2510 0038 2046     		mov	r0, r4
 2511 003a 38BD     		pop	{r3, r4, r5, pc}
 2512              	.LVL215:
 2513              	.L235:
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2514              		.loc 1 2196 0
 2515 003c 0024     		movs	r4, #0
 2516              	.LVL216:
 2517              	.L227:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2518              		.loc 1 2218 0
 2519 003e 264B     		ldr	r3, .L239+8
 2520 0040 1B68     		ldr	r3, [r3]
 2521 0042 1BB3     		cbz	r3, .L238
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2522              		.loc 1 2220 0
 2523 0044 244B     		ldr	r3, .L239+8
 2524 0046 DB68     		ldr	r3, [r3, #12]
 2525 0048 DC68     		ldr	r4, [r3, #12]
 2526              	.LVL217:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2527              		.loc 1 2221 0
 2528 004a 04F11800 		add	r0, r4, #24
 2529 004e FFF7FEFF 		bl	uxListRemove
 2530              	.LVL218:
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2531              		.loc 1 2222 0
 2532 0052 251D     		adds	r5, r4, #4
 2533 0054 2846     		mov	r0, r5
 2534 0056 FFF7FEFF 		bl	uxListRemove
 2535              	.LVL219:
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2536              		.loc 1 2223 0
 2537 005a E36A     		ldr	r3, [r4, #44]
 2538 005c 0122     		movs	r2, #1
 2539 005e 9A40     		lsls	r2, r2, r3
 2540 0060 1E49     		ldr	r1, .L239+12
 2541 0062 0868     		ldr	r0, [r1]
 2542 0064 0243     		orrs	r2, r2, r0
 2543 0066 0A60     		str	r2, [r1]
 2544 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2545 006c 9A00     		lsls	r2, r3, #2
 2546 006e 2946     		mov	r1, r5
 2547 0070 1B48     		ldr	r0, .L239+16
 2548 0072 1044     		add	r0, r0, r2
 2549 0074 FFF7FEFF 		bl	vListInsertEnd
 2550              	.LVL220:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 147


2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2551              		.loc 1 2227 0
 2552 0078 E26A     		ldr	r2, [r4, #44]
 2553 007a 1A4B     		ldr	r3, .L239+20
 2554 007c 1B68     		ldr	r3, [r3]
 2555 007e DB6A     		ldr	r3, [r3, #44]
 2556 0080 9A42     		cmp	r2, r3
 2557 0082 DCD3     		bcc	.L227
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2558              		.loc 1 2229 0
 2559 0084 184B     		ldr	r3, .L239+24
 2560 0086 0122     		movs	r2, #1
 2561 0088 1A60     		str	r2, [r3]
 2562 008a D8E7     		b	.L227
 2563              	.L238:
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2564              		.loc 1 2237 0
 2565 008c 0CB1     		cbz	r4, .L230
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2566              		.loc 1 2245 0
 2567 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2568              	.LVL221:
 2569              	.L230:
 2570              	.LBB144:
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2571              		.loc 1 2253 0
 2572 0092 164B     		ldr	r3, .L239+28
 2573 0094 1C68     		ldr	r4, [r3]
 2574              	.LVL222:
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2575              		.loc 1 2255 0
 2576 0096 54B1     		cbz	r4, .L231
 2577              	.L233:
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2578              		.loc 1 2259 0
 2579 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2580              	.LVL223:
 2581 009c 10B1     		cbz	r0, .L232
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2582              		.loc 1 2261 0
 2583 009e 124B     		ldr	r3, .L239+24
 2584 00a0 0122     		movs	r2, #1
 2585 00a2 1A60     		str	r2, [r3]
 2586              	.L232:
 2587              	.LVL224:
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2588              		.loc 1 2268 0
 2589 00a4 013C     		subs	r4, r4, #1
 2590              	.LVL225:
 2591 00a6 F7D1     		bne	.L233
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2592              		.loc 1 2270 0
 2593 00a8 104B     		ldr	r3, .L239+28
 2594 00aa 0022     		movs	r2, #0
 2595 00ac 1A60     		str	r2, [r3]
 2596              	.L231:
 2597              	.LBE144:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 148


2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2598              		.loc 1 2278 0
 2599 00ae 0E4B     		ldr	r3, .L239+24
 2600 00b0 1B68     		ldr	r3, [r3]
 2601 00b2 5BB1     		cbz	r3, .L236
 2602              	.LVL226:
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2603              		.loc 1 2285 0
 2604 00b4 0E4B     		ldr	r3, .L239+32
 2605 00b6 4FF08052 		mov	r2, #268435456
 2606 00ba 1A60     		str	r2, [r3]
 2607              		.syntax unified
 2608              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2609 00bc BFF34F8F 		dsb
 2610              	@ 0 "" 2
 2611              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2612 00c0 BFF36F8F 		isb
 2613              	@ 0 "" 2
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2614              		.loc 1 2282 0
 2615              		.thumb
 2616              		.syntax unified
 2617 00c4 0124     		movs	r4, #1
 2618              	.LVL227:
 2619 00c6 B5E7     		b	.L226
 2620              	.LVL228:
 2621              	.L234:
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2622              		.loc 1 2197 0
 2623 00c8 0024     		movs	r4, #0
 2624 00ca B3E7     		b	.L226
 2625              	.LVL229:
 2626              	.L236:
 2627 00cc 0024     		movs	r4, #0
 2628              	.LVL230:
 2629 00ce B1E7     		b	.L226
 2630              	.L240:
 2631              		.align	2
 2632              	.L239:
 2633 00d0 00000000 		.word	.LANCHOR16
 2634 00d4 00000000 		.word	.LANCHOR9
 2635 00d8 00000000 		.word	.LANCHOR1
 2636 00dc 00000000 		.word	.LANCHOR13
 2637 00e0 00000000 		.word	.LANCHOR4
 2638 00e4 00000000 		.word	.LANCHOR10
 2639 00e8 00000000 		.word	.LANCHOR19
 2640 00ec 00000000 		.word	.LANCHOR20
 2641 00f0 04ED00E0 		.word	-536810236
 2642              		.cfi_endproc
 2643              	.LFE24:
 2645              		.section	.text.vTaskDelay,"ax",%progbits
 2646              		.align	1
 2647              		.global	vTaskDelay
 2648              		.syntax unified
 2649              		.thumb
 2650              		.thumb_func
 2651              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 149


 2653              	vTaskDelay:
 2654              	.LFB12:
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2655              		.loc 1 1342 0
 2656              		.cfi_startproc
 2657              		@ args = 0, pretend = 0, frame = 0
 2658              		@ frame_needed = 0, uses_anonymous_args = 0
 2659              	.LVL231:
 2660 0000 10B5     		push	{r4, lr}
 2661              	.LCFI28:
 2662              		.cfi_def_cfa_offset 8
 2663              		.cfi_offset 4, -8
 2664              		.cfi_offset 14, -4
 2665              	.LVL232:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2666              		.loc 1 1346 0
 2667 0002 A8B1     		cbz	r0, .L242
 2668 0004 0446     		mov	r4, r0
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2669              		.loc 1 1348 0
 2670 0006 0F4B     		ldr	r3, .L247
 2671 0008 1B68     		ldr	r3, [r3]
 2672 000a 43B1     		cbz	r3, .L243
 2673              	.LBB145:
 2674              	.LBB146:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2675              		.loc 2 195 0
 2676              		.syntax unified
 2677              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2678 000c 4FF05003 			mov r3, #80												
 2679 0010 83F31188 		msr basepri, r3											
 2680 0014 BFF36F8F 		isb														
 2681 0018 BFF34F8F 		dsb														
 2682              	
 2683              	@ 0 "" 2
 2684              	.LVL233:
 2685              		.thumb
 2686              		.syntax unified
 2687              	.L244:
 2688 001c FEE7     		b	.L244
 2689              	.L243:
 2690              	.LBE146:
 2691              	.LBE145:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2692              		.loc 1 1349 0
 2693 001e FFF7FEFF 		bl	vTaskSuspendAll
 2694              	.LVL234:
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2695              		.loc 1 1360 0
 2696 0022 0021     		movs	r1, #0
 2697 0024 2046     		mov	r0, r4
 2698 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2699              	.LVL235:
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2700              		.loc 1 1362 0
 2701 002a FFF7FEFF 		bl	xTaskResumeAll
 2702              	.LVL236:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 150


1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2703              		.loc 1 1371 0
 2704 002e 38B9     		cbnz	r0, .L241
 2705              	.LVL237:
 2706              	.L242:
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2707              		.loc 1 1373 0
 2708 0030 054B     		ldr	r3, .L247+4
 2709 0032 4FF08052 		mov	r2, #268435456
 2710 0036 1A60     		str	r2, [r3]
 2711              		.syntax unified
 2712              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2713 0038 BFF34F8F 		dsb
 2714              	@ 0 "" 2
 2715              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2716 003c BFF36F8F 		isb
 2717              	@ 0 "" 2
 2718              		.thumb
 2719              		.syntax unified
 2720              	.L241:
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2721              		.loc 1 1379 0
 2722 0040 10BD     		pop	{r4, pc}
 2723              	.L248:
 2724 0042 00BF     		.align	2
 2725              	.L247:
 2726 0044 00000000 		.word	.LANCHOR16
 2727 0048 04ED00E0 		.word	-536810236
 2728              		.cfi_endproc
 2729              	.LFE12:
 2731              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2732              		.align	1
 2733              		.global	xTaskCatchUpTicks
 2734              		.syntax unified
 2735              		.thumb
 2736              		.thumb_func
 2737              		.fpu fpv4-sp-d16
 2739              	xTaskCatchUpTicks:
 2740              	.LFB30:
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2741              		.loc 1 2610 0
 2742              		.cfi_startproc
 2743              		@ args = 0, pretend = 0, frame = 0
 2744              		@ frame_needed = 0, uses_anonymous_args = 0
 2745              	.LVL238:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2746              		.loc 1 2615 0
 2747 0000 0B4B     		ldr	r3, .L254
 2748 0002 1B68     		ldr	r3, [r3]
 2749 0004 43B1     		cbz	r3, .L250
 2750              	.LBB147:
 2751              	.LBB148:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2752              		.loc 2 195 0
 2753              		.syntax unified
 2754              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2755 0006 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 151


 2756 000a 83F31188 		msr basepri, r3											
 2757 000e BFF36F8F 		isb														
 2758 0012 BFF34F8F 		dsb														
 2759              	
 2760              	@ 0 "" 2
 2761              	.LVL239:
 2762              		.thumb
 2763              		.syntax unified
 2764              	.L251:
 2765 0016 FEE7     		b	.L251
 2766              	.L250:
 2767              	.LBE148:
 2768              	.LBE147:
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2769              		.loc 1 2610 0
 2770 0018 10B5     		push	{r4, lr}
 2771              	.LCFI29:
 2772              		.cfi_def_cfa_offset 8
 2773              		.cfi_offset 4, -8
 2774              		.cfi_offset 14, -4
 2775 001a 0446     		mov	r4, r0
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 2776              		.loc 1 2619 0
 2777 001c FFF7FEFF 		bl	vTaskSuspendAll
 2778              	.LVL240:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2779              		.loc 1 2620 0
 2780 0020 044A     		ldr	r2, .L254+4
 2781 0022 1368     		ldr	r3, [r2]
 2782 0024 2344     		add	r3, r3, r4
 2783 0026 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2784              		.loc 1 2621 0
 2785 0028 FFF7FEFF 		bl	xTaskResumeAll
 2786              	.LVL241:
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2787              		.loc 1 2624 0
 2788 002c 10BD     		pop	{r4, pc}
 2789              	.LVL242:
 2790              	.L255:
 2791 002e 00BF     		.align	2
 2792              	.L254:
 2793 0030 00000000 		.word	.LANCHOR16
 2794 0034 00000000 		.word	.LANCHOR20
 2795              		.cfi_endproc
 2796              	.LFE30:
 2798              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2799              		.align	1
 2800              		.global	vTaskSwitchContext
 2801              		.syntax unified
 2802              		.thumb
 2803              		.thumb_func
 2804              		.fpu fpv4-sp-d16
 2806              	vTaskSwitchContext:
 2807              	.LFB32:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2808              		.loc 1 2990 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 152


 2809              		.cfi_startproc
 2810              		@ args = 0, pretend = 0, frame = 0
 2811              		@ frame_needed = 0, uses_anonymous_args = 0
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2812              		.loc 1 2991 0
 2813 0000 264B     		ldr	r3, .L267
 2814 0002 1B68     		ldr	r3, [r3]
 2815 0004 1BB1     		cbz	r3, .L257
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2816              		.loc 1 2995 0
 2817 0006 264B     		ldr	r3, .L267+4
 2818 0008 0122     		movs	r2, #1
 2819 000a 1A60     		str	r2, [r3]
 2820 000c 7047     		bx	lr
 2821              	.L257:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2822              		.loc 1 2990 0
 2823 000e 10B5     		push	{r4, lr}
 2824              	.LCFI30:
 2825              		.cfi_def_cfa_offset 8
 2826              		.cfi_offset 4, -8
 2827              		.cfi_offset 14, -4
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2828              		.loc 1 2999 0
 2829 0010 234B     		ldr	r3, .L267+4
 2830 0012 0022     		movs	r2, #0
 2831 0014 1A60     		str	r2, [r3]
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
 2832              		.loc 1 3007 0
 2833 0016 FFF7FEFF 		bl	getRunTimeCounterValue
 2834              	.LVL243:
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2835              		.loc 1 3017 0
 2836 001a 224B     		ldr	r3, .L267+8
 2837 001c 1B68     		ldr	r3, [r3]
 2838 001e 9842     		cmp	r0, r3
 2839 0020 05D9     		bls	.L259
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2840              		.loc 1 3019 0
 2841 0022 214A     		ldr	r2, .L267+12
 2842 0024 1168     		ldr	r1, [r2]
 2843 0026 C31A     		subs	r3, r0, r3
 2844 0028 8A6D     		ldr	r2, [r1, #88]
 2845 002a 1344     		add	r3, r3, r2
 2846 002c 8B65     		str	r3, [r1, #88]
 2847              	.L259:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2848              		.loc 1 3025 0
 2849 002e 1D4B     		ldr	r3, .L267+8
 2850 0030 1860     		str	r0, [r3]
 2851              	.LBB149:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2852              		.loc 1 3041 0
 2853 0032 1E4B     		ldr	r3, .L267+16
 2854 0034 1B68     		ldr	r3, [r3]
 2855              	.LVL244:
 2856              	.LBB150:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 153


 2857              	.LBB151:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2858              		.loc 2 134 0
 2859              		.syntax unified
 2860              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2861 0036 B3FA83F3 		clz r3, r3
 2862              	@ 0 "" 2
 2863              	.LVL245:
 2864              		.thumb
 2865              		.syntax unified
 2866 003a DBB2     		uxtb	r3, r3
 2867              	.LBE151:
 2868              	.LBE150:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2869              		.loc 1 3041 0
 2870 003c C3F11F03 		rsb	r3, r3, #31
 2871              	.LVL246:
 2872 0040 03EB8301 		add	r1, r3, r3, lsl #2
 2873 0044 8A00     		lsls	r2, r1, #2
 2874 0046 1A49     		ldr	r1, .L267+20
 2875 0048 8A58     		ldr	r2, [r1, r2]
 2876 004a 42B9     		cbnz	r2, .L260
 2877              	.LBB152:
 2878              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2879              		.loc 2 195 0
 2880              		.syntax unified
 2881              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2882 004c 4FF05003 			mov r3, #80												
 2883 0050 83F31188 		msr basepri, r3											
 2884 0054 BFF36F8F 		isb														
 2885 0058 BFF34F8F 		dsb														
 2886              	
 2887              	@ 0 "" 2
 2888              	.LVL247:
 2889              		.thumb
 2890              		.syntax unified
 2891              	.L261:
 2892 005c FEE7     		b	.L261
 2893              	.LVL248:
 2894              	.L260:
 2895              	.LBE153:
 2896              	.LBE152:
 2897              	.LBB154:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2898              		.loc 1 3041 0 discriminator 2
 2899 005e 1448     		ldr	r0, .L267+20
 2900 0060 9A00     		lsls	r2, r3, #2
 2901 0062 D418     		adds	r4, r2, r3
 2902 0064 A100     		lsls	r1, r4, #2
 2903 0066 0144     		add	r1, r1, r0
 2904 0068 4C68     		ldr	r4, [r1, #4]
 2905 006a 6468     		ldr	r4, [r4, #4]
 2906 006c 4C60     		str	r4, [r1, #4]
 2907 006e 1A44     		add	r2, r2, r3
 2908 0070 9100     		lsls	r1, r2, #2
 2909 0072 0831     		adds	r1, r1, #8
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 154


 2910 0074 0844     		add	r0, r0, r1
 2911 0076 8442     		cmp	r4, r0
 2912 0078 09D0     		beq	.L266
 2913              	.L262:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2914              		.loc 1 3041 0 is_stmt 0 discriminator 5
 2915 007a 03EB8303 		add	r3, r3, r3, lsl #2
 2916              	.LVL249:
 2917 007e 9A00     		lsls	r2, r3, #2
 2918 0080 0B4B     		ldr	r3, .L267+20
 2919 0082 1344     		add	r3, r3, r2
 2920 0084 5B68     		ldr	r3, [r3, #4]
 2921 0086 DA68     		ldr	r2, [r3, #12]
 2922 0088 074B     		ldr	r3, .L267+12
 2923 008a 1A60     		str	r2, [r3]
 2924              	.LBE154:
 2925              	.LBE149:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2926              		.loc 1 3061 0 is_stmt 1 discriminator 5
 2927 008c 10BD     		pop	{r4, pc}
 2928              	.LVL250:
 2929              	.L266:
 2930              	.LBB156:
 2931              	.LBB155:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2932              		.loc 1 3041 0 discriminator 3
 2933 008e 6168     		ldr	r1, [r4, #4]
 2934 0090 0748     		ldr	r0, .L267+20
 2935 0092 1422     		movs	r2, #20
 2936 0094 02FB0302 		mla	r2, r2, r3, r0
 2937 0098 5160     		str	r1, [r2, #4]
 2938 009a EEE7     		b	.L262
 2939              	.L268:
 2940              		.align	2
 2941              	.L267:
 2942 009c 00000000 		.word	.LANCHOR16
 2943 00a0 00000000 		.word	.LANCHOR19
 2944 00a4 00000000 		.word	.LANCHOR21
 2945 00a8 00000000 		.word	.LANCHOR10
 2946 00ac 00000000 		.word	.LANCHOR13
 2947 00b0 00000000 		.word	.LANCHOR4
 2948              	.LBE155:
 2949              	.LBE156:
 2950              		.cfi_endproc
 2951              	.LFE32:
 2953              		.section	.text.vTaskSuspend,"ax",%progbits
 2954              		.align	1
 2955              		.global	vTaskSuspend
 2956              		.syntax unified
 2957              		.thumb
 2958              		.thumb_func
 2959              		.fpu fpv4-sp-d16
 2961              	vTaskSuspend:
 2962              	.LFB17:
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2963              		.loc 1 1705 0
 2964              		.cfi_startproc
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 155


 2965              		@ args = 0, pretend = 0, frame = 0
 2966              		@ frame_needed = 0, uses_anonymous_args = 0
 2967              	.LVL251:
 2968 0000 38B5     		push	{r3, r4, r5, lr}
 2969              	.LCFI31:
 2970              		.cfi_def_cfa_offset 16
 2971              		.cfi_offset 3, -16
 2972              		.cfi_offset 4, -12
 2973              		.cfi_offset 5, -8
 2974              		.cfi_offset 14, -4
 2975 0002 0446     		mov	r4, r0
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2976              		.loc 1 1708 0
 2977 0004 FFF7FEFF 		bl	vPortEnterCritical
 2978              	.LVL252:
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2979              		.loc 1 1712 0
 2980 0008 64B3     		cbz	r4, .L281
 2981              	.LVL253:
 2982              	.L270:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2983              		.loc 1 1718 0 discriminator 4
 2984 000a 251D     		adds	r5, r4, #4
 2985 000c 2846     		mov	r0, r5
 2986 000e FFF7FEFF 		bl	uxListRemove
 2987              	.LVL254:
 2988 0012 70B9     		cbnz	r0, .L271
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2989              		.loc 1 1720 0
 2990 0014 E26A     		ldr	r2, [r4, #44]
 2991 0016 02EB8201 		add	r1, r2, r2, lsl #2
 2992 001a 8B00     		lsls	r3, r1, #2
 2993 001c 2B49     		ldr	r1, .L285
 2994 001e CB58     		ldr	r3, [r1, r3]
 2995 0020 3BB9     		cbnz	r3, .L271
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2996              		.loc 1 1720 0 is_stmt 0 discriminator 1
 2997 0022 0123     		movs	r3, #1
 2998 0024 03FA02F2 		lsl	r2, r3, r2
 2999 0028 2949     		ldr	r1, .L285+4
 3000 002a 0B68     		ldr	r3, [r1]
 3001 002c 23EA0203 		bic	r3, r3, r2
 3002 0030 0B60     		str	r3, [r1]
 3003              	.L271:
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3004              		.loc 1 1728 0 is_stmt 1
 3005 0032 A36A     		ldr	r3, [r4, #40]
 3006 0034 1BB1     		cbz	r3, .L272
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3007              		.loc 1 1730 0
 3008 0036 04F11800 		add	r0, r4, #24
 3009 003a FFF7FEFF 		bl	uxListRemove
 3010              	.LVL255:
 3011              	.L272:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3012              		.loc 1 1737 0
 3013 003e 2946     		mov	r1, r5
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 156


 3014 0040 2448     		ldr	r0, .L285+8
 3015 0042 FFF7FEFF 		bl	vListInsertEnd
 3016              	.LVL256:
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3017              		.loc 1 1741 0
 3018 0046 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 3019 004a DBB2     		uxtb	r3, r3
 3020 004c 012B     		cmp	r3, #1
 3021 004e 0CD0     		beq	.L282
 3022              	.L273:
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3023              		.loc 1 1750 0
 3024 0050 FFF7FEFF 		bl	vPortExitCritical
 3025              	.LVL257:
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3026              		.loc 1 1752 0
 3027 0054 204B     		ldr	r3, .L285+12
 3028 0056 1B68     		ldr	r3, [r3]
 3029 0058 5BB9     		cbnz	r3, .L283
 3030              	.L274:
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3031              		.loc 1 1767 0
 3032 005a 204B     		ldr	r3, .L285+16
 3033 005c 1B68     		ldr	r3, [r3]
 3034 005e A342     		cmp	r3, r4
 3035 0060 0ED0     		beq	.L284
 3036              	.L269:
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3037              		.loc 1 1798 0
 3038 0062 38BD     		pop	{r3, r4, r5, pc}
 3039              	.LVL258:
 3040              	.L281:
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3041              		.loc 1 1712 0 discriminator 1
 3042 0064 1D4B     		ldr	r3, .L285+16
 3043 0066 1C68     		ldr	r4, [r3]
 3044              	.LVL259:
 3045 0068 CFE7     		b	.L270
 3046              	.LVL260:
 3047              	.L282:
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3048              		.loc 1 1745 0
 3049 006a 0023     		movs	r3, #0
 3050 006c 84F86030 		strb	r3, [r4, #96]
 3051 0070 EEE7     		b	.L273
 3052              	.L283:
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3053              		.loc 1 1756 0
 3054 0072 FFF7FEFF 		bl	vPortEnterCritical
 3055              	.LVL261:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3056              		.loc 1 1758 0
 3057 0076 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3058              	.LVL262:
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3059              		.loc 1 1760 0
 3060 007a FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 157


 3061              	.LVL263:
 3062 007e ECE7     		b	.L274
 3063              	.L284:
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3064              		.loc 1 1769 0
 3065 0080 154B     		ldr	r3, .L285+12
 3066 0082 1B68     		ldr	r3, [r3]
 3067 0084 A3B1     		cbz	r3, .L276
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3068              		.loc 1 1772 0
 3069 0086 164B     		ldr	r3, .L285+20
 3070 0088 1B68     		ldr	r3, [r3]
 3071 008a 43B1     		cbz	r3, .L277
 3072              	.LBB157:
 3073              	.LBB158:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3074              		.loc 2 195 0
 3075              		.syntax unified
 3076              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3077 008c 4FF05003 			mov r3, #80												
 3078 0090 83F31188 		msr basepri, r3											
 3079 0094 BFF36F8F 		isb														
 3080 0098 BFF34F8F 		dsb														
 3081              	
 3082              	@ 0 "" 2
 3083              	.LVL264:
 3084              		.thumb
 3085              		.syntax unified
 3086              	.L278:
 3087 009c FEE7     		b	.L278
 3088              	.L277:
 3089              	.LBE158:
 3090              	.LBE157:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3091              		.loc 1 1773 0
 3092 009e 114B     		ldr	r3, .L285+24
 3093 00a0 4FF08052 		mov	r2, #268435456
 3094 00a4 1A60     		str	r2, [r3]
 3095              		.syntax unified
 3096              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3097 00a6 BFF34F8F 		dsb
 3098              	@ 0 "" 2
 3099              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3100 00aa BFF36F8F 		isb
 3101              	@ 0 "" 2
 3102              		.thumb
 3103              		.syntax unified
 3104 00ae D8E7     		b	.L269
 3105              	.L276:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3106              		.loc 1 1780 0
 3107 00b0 084B     		ldr	r3, .L285+8
 3108 00b2 1A68     		ldr	r2, [r3]
 3109 00b4 0C4B     		ldr	r3, .L285+28
 3110 00b6 1B68     		ldr	r3, [r3]
 3111 00b8 9A42     		cmp	r2, r3
 3112 00ba 03D1     		bne	.L279
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 158


1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3113              		.loc 1 1786 0
 3114 00bc 074B     		ldr	r3, .L285+16
 3115 00be 0022     		movs	r2, #0
 3116 00c0 1A60     		str	r2, [r3]
 3117 00c2 CEE7     		b	.L269
 3118              	.L279:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3119              		.loc 1 1790 0
 3120 00c4 FFF7FEFF 		bl	vTaskSwitchContext
 3121              	.LVL265:
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3122              		.loc 1 1798 0
 3123 00c8 CBE7     		b	.L269
 3124              	.L286:
 3125 00ca 00BF     		.align	2
 3126              	.L285:
 3127 00cc 00000000 		.word	.LANCHOR4
 3128 00d0 00000000 		.word	.LANCHOR13
 3129 00d4 00000000 		.word	.LANCHOR0
 3130 00d8 00000000 		.word	.LANCHOR11
 3131 00dc 00000000 		.word	.LANCHOR10
 3132 00e0 00000000 		.word	.LANCHOR16
 3133 00e4 04ED00E0 		.word	-536810236
 3134 00e8 00000000 		.word	.LANCHOR9
 3135              		.cfi_endproc
 3136              	.LFE17:
 3138              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3139              		.align	1
 3140              		.global	vTaskPlaceOnEventList
 3141              		.syntax unified
 3142              		.thumb
 3143              		.thumb_func
 3144              		.fpu fpv4-sp-d16
 3146              	vTaskPlaceOnEventList:
 3147              	.LFB33:
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3148              		.loc 1 3065 0
 3149              		.cfi_startproc
 3150              		@ args = 0, pretend = 0, frame = 0
 3151              		@ frame_needed = 0, uses_anonymous_args = 0
 3152              	.LVL266:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3153              		.loc 1 3066 0
 3154 0000 40B9     		cbnz	r0, .L288
 3155              	.LBB159:
 3156              	.LBB160:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3157              		.loc 2 195 0
 3158              		.syntax unified
 3159              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3160 0002 4FF05003 			mov r3, #80												
 3161 0006 83F31188 		msr basepri, r3											
 3162 000a BFF36F8F 		isb														
 3163 000e BFF34F8F 		dsb														
 3164              	
 3165              	@ 0 "" 2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 159


 3166              	.LVL267:
 3167              		.thumb
 3168              		.syntax unified
 3169              	.L289:
 3170 0012 FEE7     		b	.L289
 3171              	.L288:
 3172              	.LBE160:
 3173              	.LBE159:
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3174              		.loc 1 3065 0
 3175 0014 10B5     		push	{r4, lr}
 3176              	.LCFI32:
 3177              		.cfi_def_cfa_offset 8
 3178              		.cfi_offset 4, -8
 3179              		.cfi_offset 14, -4
 3180 0016 0C46     		mov	r4, r1
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3181              		.loc 1 3075 0
 3182 0018 044B     		ldr	r3, .L292
 3183 001a 1968     		ldr	r1, [r3]
 3184              	.LVL268:
 3185 001c 1831     		adds	r1, r1, #24
 3186 001e FFF7FEFF 		bl	vListInsert
 3187              	.LVL269:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3188              		.loc 1 3077 0
 3189 0022 0121     		movs	r1, #1
 3190 0024 2046     		mov	r0, r4
 3191 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3192              	.LVL270:
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3193              		.loc 1 3078 0
 3194 002a 10BD     		pop	{r4, pc}
 3195              	.LVL271:
 3196              	.L293:
 3197              		.align	2
 3198              	.L292:
 3199 002c 00000000 		.word	.LANCHOR10
 3200              		.cfi_endproc
 3201              	.LFE33:
 3203              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3204              		.align	1
 3205              		.global	vTaskPlaceOnUnorderedEventList
 3206              		.syntax unified
 3207              		.thumb
 3208              		.thumb_func
 3209              		.fpu fpv4-sp-d16
 3211              	vTaskPlaceOnUnorderedEventList:
 3212              	.LFB34:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3213              		.loc 1 3082 0
 3214              		.cfi_startproc
 3215              		@ args = 0, pretend = 0, frame = 0
 3216              		@ frame_needed = 0, uses_anonymous_args = 0
 3217              	.LVL272:
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3218              		.loc 1 3083 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 160


 3219 0000 40B9     		cbnz	r0, .L295
 3220              	.LBB161:
 3221              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3222              		.loc 2 195 0
 3223              		.syntax unified
 3224              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3225 0002 4FF05003 			mov r3, #80												
 3226 0006 83F31188 		msr basepri, r3											
 3227 000a BFF36F8F 		isb														
 3228 000e BFF34F8F 		dsb														
 3229              	
 3230              	@ 0 "" 2
 3231              	.LVL273:
 3232              		.thumb
 3233              		.syntax unified
 3234              	.L296:
 3235 0012 FEE7     		b	.L296
 3236              	.L295:
 3237 0014 0346     		mov	r3, r0
 3238              	.LBE162:
 3239              	.LBE161:
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3240              		.loc 1 3087 0
 3241 0016 0F48     		ldr	r0, .L301
 3242              	.LVL274:
 3243 0018 0068     		ldr	r0, [r0]
 3244 001a 40B9     		cbnz	r0, .L297
 3245              	.LBB163:
 3246              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3247              		.loc 2 195 0
 3248              		.syntax unified
 3249              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3250 001c 4FF05003 			mov r3, #80												
 3251 0020 83F31188 		msr basepri, r3											
 3252 0024 BFF36F8F 		isb														
 3253 0028 BFF34F8F 		dsb														
 3254              	
 3255              	@ 0 "" 2
 3256              	.LVL275:
 3257              		.thumb
 3258              		.syntax unified
 3259              	.L298:
 3260 002c FEE7     		b	.L298
 3261              	.LVL276:
 3262              	.L297:
 3263              	.LBE164:
 3264              	.LBE163:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3265              		.loc 1 3082 0
 3266 002e 10B5     		push	{r4, lr}
 3267              	.LCFI33:
 3268              		.cfi_def_cfa_offset 8
 3269              		.cfi_offset 4, -8
 3270              		.cfi_offset 14, -4
 3271 0030 1846     		mov	r0, r3
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 161


 3272 0032 1446     		mov	r4, r2
 3273 0034 0B46     		mov	r3, r1
 3274              	.LVL277:
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3275              		.loc 1 3092 0
 3276 0036 084A     		ldr	r2, .L301+4
 3277              	.LVL278:
 3278 0038 1168     		ldr	r1, [r2]
 3279              	.LVL279:
 3280 003a 43F00043 		orr	r3, r3, #-2147483648
 3281              	.LVL280:
 3282 003e 8B61     		str	r3, [r1, #24]
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3283              		.loc 1 3099 0
 3284 0040 1168     		ldr	r1, [r2]
 3285 0042 1831     		adds	r1, r1, #24
 3286 0044 FFF7FEFF 		bl	vListInsertEnd
 3287              	.LVL281:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3288              		.loc 1 3101 0
 3289 0048 0121     		movs	r1, #1
 3290 004a 2046     		mov	r0, r4
 3291 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3292              	.LVL282:
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3293              		.loc 1 3102 0
 3294 0050 10BD     		pop	{r4, pc}
 3295              	.LVL283:
 3296              	.L302:
 3297 0052 00BF     		.align	2
 3298              	.L301:
 3299 0054 00000000 		.word	.LANCHOR16
 3300 0058 00000000 		.word	.LANCHOR10
 3301              		.cfi_endproc
 3302              	.LFE34:
 3304              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3305              		.align	1
 3306              		.global	xTaskRemoveFromEventList
 3307              		.syntax unified
 3308              		.thumb
 3309              		.thumb_func
 3310              		.fpu fpv4-sp-d16
 3312              	xTaskRemoveFromEventList:
 3313              	.LFB35:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3314              		.loc 1 3139 0
 3315              		.cfi_startproc
 3316              		@ args = 0, pretend = 0, frame = 0
 3317              		@ frame_needed = 0, uses_anonymous_args = 0
 3318              	.LVL284:
 3319 0000 38B5     		push	{r3, r4, r5, lr}
 3320              	.LCFI34:
 3321              		.cfi_def_cfa_offset 16
 3322              		.cfi_offset 3, -16
 3323              		.cfi_offset 4, -12
 3324              		.cfi_offset 5, -8
 3325              		.cfi_offset 14, -4
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 162


3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3326              		.loc 1 3156 0
 3327 0002 C368     		ldr	r3, [r0, #12]
 3328 0004 DC68     		ldr	r4, [r3, #12]
 3329              	.LVL285:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3330              		.loc 1 3157 0
 3331 0006 44B9     		cbnz	r4, .L304
 3332              	.LBB165:
 3333              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3334              		.loc 2 195 0
 3335              		.syntax unified
 3336              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3337 0008 4FF05003 			mov r3, #80												
 3338 000c 83F31188 		msr basepri, r3											
 3339 0010 BFF36F8F 		isb														
 3340 0014 BFF34F8F 		dsb														
 3341              	
 3342              	@ 0 "" 2
 3343              	.LVL286:
 3344              		.thumb
 3345              		.syntax unified
 3346              	.L305:
 3347 0018 FEE7     		b	.L305
 3348              	.L304:
 3349              	.LBE166:
 3350              	.LBE165:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3351              		.loc 1 3158 0
 3352 001a 04F11805 		add	r5, r4, #24
 3353 001e 2846     		mov	r0, r5
 3354              	.LVL287:
 3355 0020 FFF7FEFF 		bl	uxListRemove
 3356              	.LVL288:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3357              		.loc 1 3160 0
 3358 0024 134B     		ldr	r3, .L311
 3359 0026 1B68     		ldr	r3, [r3]
 3360 0028 E3B9     		cbnz	r3, .L306
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3361              		.loc 1 3162 0
 3362 002a 251D     		adds	r5, r4, #4
 3363 002c 2846     		mov	r0, r5
 3364 002e FFF7FEFF 		bl	uxListRemove
 3365              	.LVL289:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3366              		.loc 1 3163 0
 3367 0032 E36A     		ldr	r3, [r4, #44]
 3368 0034 0122     		movs	r2, #1
 3369 0036 9A40     		lsls	r2, r2, r3
 3370 0038 0F49     		ldr	r1, .L311+4
 3371 003a 0868     		ldr	r0, [r1]
 3372 003c 0243     		orrs	r2, r2, r0
 3373 003e 0A60     		str	r2, [r1]
 3374 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3375 0044 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 163


 3376 0046 2946     		mov	r1, r5
 3377 0048 0C48     		ldr	r0, .L311+8
 3378 004a 1044     		add	r0, r0, r2
 3379 004c FFF7FEFF 		bl	vListInsertEnd
 3380              	.LVL290:
 3381              	.L307:
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3382              		.loc 1 3186 0
 3383 0050 E26A     		ldr	r2, [r4, #44]
 3384 0052 0B4B     		ldr	r3, .L311+12
 3385 0054 1B68     		ldr	r3, [r3]
 3386 0056 DB6A     		ldr	r3, [r3, #44]
 3387 0058 9A42     		cmp	r2, r3
 3388 005a 08D9     		bls	.L309
 3389              	.LVL291:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3390              		.loc 1 3195 0
 3391 005c 0120     		movs	r0, #1
 3392 005e 094B     		ldr	r3, .L311+16
 3393 0060 1860     		str	r0, [r3]
 3394              	.LVL292:
 3395              	.L303:
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3396              		.loc 1 3203 0
 3397 0062 38BD     		pop	{r3, r4, r5, pc}
 3398              	.LVL293:
 3399              	.L306:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3400              		.loc 1 3183 0
 3401 0064 2946     		mov	r1, r5
 3402 0066 0848     		ldr	r0, .L311+20
 3403 0068 FFF7FEFF 		bl	vListInsertEnd
 3404              	.LVL294:
 3405 006c F0E7     		b	.L307
 3406              	.L309:
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3407              		.loc 1 3199 0
 3408 006e 0020     		movs	r0, #0
 3409              	.LVL295:
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3410              		.loc 1 3202 0
 3411 0070 F7E7     		b	.L303
 3412              	.L312:
 3413 0072 00BF     		.align	2
 3414              	.L311:
 3415 0074 00000000 		.word	.LANCHOR16
 3416 0078 00000000 		.word	.LANCHOR13
 3417 007c 00000000 		.word	.LANCHOR4
 3418 0080 00000000 		.word	.LANCHOR10
 3419 0084 00000000 		.word	.LANCHOR19
 3420 0088 00000000 		.word	.LANCHOR1
 3421              		.cfi_endproc
 3422              	.LFE35:
 3424              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3425              		.align	1
 3426              		.global	vTaskRemoveFromUnorderedEventList
 3427              		.syntax unified
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 164


 3428              		.thumb
 3429              		.thumb_func
 3430              		.fpu fpv4-sp-d16
 3432              	vTaskRemoveFromUnorderedEventList:
 3433              	.LFB36:
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3434              		.loc 1 3207 0
 3435              		.cfi_startproc
 3436              		@ args = 0, pretend = 0, frame = 0
 3437              		@ frame_needed = 0, uses_anonymous_args = 0
 3438              	.LVL296:
 3439 0000 38B5     		push	{r3, r4, r5, lr}
 3440              	.LCFI35:
 3441              		.cfi_def_cfa_offset 16
 3442              		.cfi_offset 3, -16
 3443              		.cfi_offset 4, -12
 3444              		.cfi_offset 5, -8
 3445              		.cfi_offset 14, -4
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3446              		.loc 1 3212 0
 3447 0002 1C4B     		ldr	r3, .L321
 3448 0004 1B68     		ldr	r3, [r3]
 3449 0006 43B9     		cbnz	r3, .L314
 3450              	.LBB167:
 3451              	.LBB168:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3452              		.loc 2 195 0
 3453              		.syntax unified
 3454              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3455 0008 4FF05003 			mov r3, #80												
 3456 000c 83F31188 		msr basepri, r3											
 3457 0010 BFF36F8F 		isb														
 3458 0014 BFF34F8F 		dsb														
 3459              	
 3460              	@ 0 "" 2
 3461              	.LVL297:
 3462              		.thumb
 3463              		.syntax unified
 3464              	.L315:
 3465 0018 FEE7     		b	.L315
 3466              	.L314:
 3467              	.LBE168:
 3468              	.LBE167:
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3469              		.loc 1 3215 0
 3470 001a 41F00041 		orr	r1, r1, #-2147483648
 3471              	.LVL298:
 3472 001e 0160     		str	r1, [r0]
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3473              		.loc 1 3219 0
 3474 0020 C468     		ldr	r4, [r0, #12]
 3475              	.LVL299:
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3476              		.loc 1 3220 0
 3477 0022 F4B1     		cbz	r4, .L320
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3478              		.loc 1 3221 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 165


 3479 0024 FFF7FEFF 		bl	uxListRemove
 3480              	.LVL300:
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3481              		.loc 1 3240 0
 3482 0028 251D     		adds	r5, r4, #4
 3483 002a 2846     		mov	r0, r5
 3484 002c FFF7FEFF 		bl	uxListRemove
 3485              	.LVL301:
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3486              		.loc 1 3241 0
 3487 0030 E36A     		ldr	r3, [r4, #44]
 3488 0032 0122     		movs	r2, #1
 3489 0034 9A40     		lsls	r2, r2, r3
 3490 0036 1049     		ldr	r1, .L321+4
 3491 0038 0868     		ldr	r0, [r1]
 3492 003a 0243     		orrs	r2, r2, r0
 3493 003c 0A60     		str	r2, [r1]
 3494 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3495 0042 9A00     		lsls	r2, r3, #2
 3496 0044 2946     		mov	r1, r5
 3497 0046 0D48     		ldr	r0, .L321+8
 3498 0048 1044     		add	r0, r0, r2
 3499 004a FFF7FEFF 		bl	vListInsertEnd
 3500              	.LVL302:
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3501              		.loc 1 3243 0
 3502 004e E26A     		ldr	r2, [r4, #44]
 3503 0050 0B4B     		ldr	r3, .L321+12
 3504 0052 1B68     		ldr	r3, [r3]
 3505 0054 DB6A     		ldr	r3, [r3, #44]
 3506 0056 9A42     		cmp	r2, r3
 3507 0058 02D9     		bls	.L313
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3508              		.loc 1 3249 0
 3509 005a 0A4B     		ldr	r3, .L321+16
 3510 005c 0122     		movs	r2, #1
 3511 005e 1A60     		str	r2, [r3]
 3512              	.L313:
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3513              		.loc 1 3251 0
 3514 0060 38BD     		pop	{r3, r4, r5, pc}
 3515              	.LVL303:
 3516              	.L320:
 3517              	.LBB169:
 3518              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3519              		.loc 2 195 0
 3520              		.syntax unified
 3521              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3522 0062 4FF05003 			mov r3, #80												
 3523 0066 83F31188 		msr basepri, r3											
 3524 006a BFF36F8F 		isb														
 3525 006e BFF34F8F 		dsb														
 3526              	
 3527              	@ 0 "" 2
 3528              	.LVL304:
 3529              		.thumb
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 166


 3530              		.syntax unified
 3531              	.L317:
 3532 0072 FEE7     		b	.L317
 3533              	.L322:
 3534              		.align	2
 3535              	.L321:
 3536 0074 00000000 		.word	.LANCHOR16
 3537 0078 00000000 		.word	.LANCHOR13
 3538 007c 00000000 		.word	.LANCHOR4
 3539 0080 00000000 		.word	.LANCHOR10
 3540 0084 00000000 		.word	.LANCHOR19
 3541              	.LBE170:
 3542              	.LBE169:
 3543              		.cfi_endproc
 3544              	.LFE36:
 3546              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3547              		.align	1
 3548              		.global	vTaskSetTimeOutState
 3549              		.syntax unified
 3550              		.thumb
 3551              		.thumb_func
 3552              		.fpu fpv4-sp-d16
 3554              	vTaskSetTimeOutState:
 3555              	.LFB37:
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3556              		.loc 1 3255 0
 3557              		.cfi_startproc
 3558              		@ args = 0, pretend = 0, frame = 0
 3559              		@ frame_needed = 0, uses_anonymous_args = 0
 3560              	.LVL305:
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3561              		.loc 1 3256 0
 3562 0000 40B9     		cbnz	r0, .L324
 3563              	.LBB171:
 3564              	.LBB172:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3565              		.loc 2 195 0
 3566              		.syntax unified
 3567              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3568 0002 4FF05003 			mov r3, #80												
 3569 0006 83F31188 		msr basepri, r3											
 3570 000a BFF36F8F 		isb														
 3571 000e BFF34F8F 		dsb														
 3572              	
 3573              	@ 0 "" 2
 3574              	.LVL306:
 3575              		.thumb
 3576              		.syntax unified
 3577              	.L325:
 3578 0012 FEE7     		b	.L325
 3579              	.L324:
 3580              	.LBE172:
 3581              	.LBE171:
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3582              		.loc 1 3255 0
 3583 0014 10B5     		push	{r4, lr}
 3584              	.LCFI36:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 167


 3585              		.cfi_def_cfa_offset 8
 3586              		.cfi_offset 4, -8
 3587              		.cfi_offset 14, -4
 3588 0016 0446     		mov	r4, r0
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3589              		.loc 1 3257 0
 3590 0018 FFF7FEFF 		bl	vPortEnterCritical
 3591              	.LVL307:
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3592              		.loc 1 3259 0
 3593 001c 044B     		ldr	r3, .L328
 3594 001e 1B68     		ldr	r3, [r3]
 3595 0020 2360     		str	r3, [r4]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3596              		.loc 1 3260 0
 3597 0022 044B     		ldr	r3, .L328+4
 3598 0024 1B68     		ldr	r3, [r3]
 3599 0026 6360     		str	r3, [r4, #4]
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3600              		.loc 1 3262 0
 3601 0028 FFF7FEFF 		bl	vPortExitCritical
 3602              	.LVL308:
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3603              		.loc 1 3263 0
 3604 002c 10BD     		pop	{r4, pc}
 3605              	.LVL309:
 3606              	.L329:
 3607 002e 00BF     		.align	2
 3608              	.L328:
 3609 0030 00000000 		.word	.LANCHOR18
 3610 0034 00000000 		.word	.LANCHOR15
 3611              		.cfi_endproc
 3612              	.LFE37:
 3614              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3615              		.align	1
 3616              		.global	vTaskInternalSetTimeOutState
 3617              		.syntax unified
 3618              		.thumb
 3619              		.thumb_func
 3620              		.fpu fpv4-sp-d16
 3622              	vTaskInternalSetTimeOutState:
 3623              	.LFB38:
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3624              		.loc 1 3267 0
 3625              		.cfi_startproc
 3626              		@ args = 0, pretend = 0, frame = 0
 3627              		@ frame_needed = 0, uses_anonymous_args = 0
 3628              		@ link register save eliminated.
 3629              	.LVL310:
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3630              		.loc 1 3269 0
 3631 0000 034B     		ldr	r3, .L331
 3632 0002 1B68     		ldr	r3, [r3]
 3633 0004 0360     		str	r3, [r0]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3634              		.loc 1 3270 0
 3635 0006 034B     		ldr	r3, .L331+4
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 168


 3636 0008 1B68     		ldr	r3, [r3]
 3637 000a 4360     		str	r3, [r0, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3638              		.loc 1 3271 0
 3639 000c 7047     		bx	lr
 3640              	.L332:
 3641 000e 00BF     		.align	2
 3642              	.L331:
 3643 0010 00000000 		.word	.LANCHOR18
 3644 0014 00000000 		.word	.LANCHOR15
 3645              		.cfi_endproc
 3646              	.LFE38:
 3648              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3649              		.align	1
 3650              		.global	xTaskCheckForTimeOut
 3651              		.syntax unified
 3652              		.thumb
 3653              		.thumb_func
 3654              		.fpu fpv4-sp-d16
 3656              	xTaskCheckForTimeOut:
 3657              	.LFB39:
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3658              		.loc 1 3275 0
 3659              		.cfi_startproc
 3660              		@ args = 0, pretend = 0, frame = 0
 3661              		@ frame_needed = 0, uses_anonymous_args = 0
 3662              	.LVL311:
 3663 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3664              	.LCFI37:
 3665              		.cfi_def_cfa_offset 24
 3666              		.cfi_offset 3, -24
 3667              		.cfi_offset 4, -20
 3668              		.cfi_offset 5, -16
 3669              		.cfi_offset 6, -12
 3670              		.cfi_offset 7, -8
 3671              		.cfi_offset 14, -4
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3672              		.loc 1 3278 0
 3673 0002 50B1     		cbz	r0, .L344
 3674 0004 0546     		mov	r5, r0
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3675              		.loc 1 3279 0
 3676 0006 89B9     		cbnz	r1, .L336
 3677              	.LBB173:
 3678              	.LBB174:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3679              		.loc 2 195 0
 3680              		.syntax unified
 3681              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3682 0008 4FF05003 			mov r3, #80												
 3683 000c 83F31188 		msr basepri, r3											
 3684 0010 BFF36F8F 		isb														
 3685 0014 BFF34F8F 		dsb														
 3686              	
 3687              	@ 0 "" 2
 3688              	.LVL312:
 3689              		.thumb
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 169


 3690              		.syntax unified
 3691              	.L337:
 3692 0018 FEE7     		b	.L337
 3693              	.L344:
 3694              	.LBE174:
 3695              	.LBE173:
 3696              	.LBB175:
 3697              	.LBB176:
 3698              		.syntax unified
 3699              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3700 001a 4FF05003 			mov r3, #80												
 3701 001e 83F31188 		msr basepri, r3											
 3702 0022 BFF36F8F 		isb														
 3703 0026 BFF34F8F 		dsb														
 3704              	
 3705              	@ 0 "" 2
 3706              	.LVL313:
 3707              		.thumb
 3708              		.syntax unified
 3709              	.L335:
 3710 002a FEE7     		b	.L335
 3711              	.L336:
 3712 002c 0C46     		mov	r4, r1
 3713              	.LBE176:
 3714              	.LBE175:
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3715              		.loc 1 3281 0
 3716 002e FFF7FEFF 		bl	vPortEnterCritical
 3717              	.LVL314:
 3718              	.LBB177:
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3719              		.loc 1 3284 0
 3720 0032 114B     		ldr	r3, .L346
 3721 0034 1968     		ldr	r1, [r3]
 3722              	.LVL315:
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3723              		.loc 1 3285 0
 3724 0036 6868     		ldr	r0, [r5, #4]
 3725 0038 0A1A     		subs	r2, r1, r0
 3726              	.LVL316:
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3727              		.loc 1 3299 0
 3728 003a 2368     		ldr	r3, [r4]
 3729 003c B3F1FF3F 		cmp	r3, #-1
 3730 0040 16D0     		beq	.L341
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3731              		.loc 1 3309 0
 3732 0042 2F68     		ldr	r7, [r5]
 3733 0044 0D4E     		ldr	r6, .L346+4
 3734 0046 3668     		ldr	r6, [r6]
 3735 0048 B742     		cmp	r7, r6
 3736 004a 01D0     		beq	.L339
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3737              		.loc 1 3309 0 is_stmt 0 discriminator 1
 3738 004c 8842     		cmp	r0, r1
 3739 004e 11D9     		bls	.L342
 3740              	.L339:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 170


3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3741              		.loc 1 3318 0 is_stmt 1
 3742 0050 9342     		cmp	r3, r2
 3743 0052 03D8     		bhi	.L345
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3744              		.loc 1 3327 0
 3745 0054 0023     		movs	r3, #0
 3746 0056 2360     		str	r3, [r4]
 3747              	.LVL317:
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3748              		.loc 1 3328 0
 3749 0058 0124     		movs	r4, #1
 3750              	.LVL318:
 3751 005a 05E0     		b	.L338
 3752              	.LVL319:
 3753              	.L345:
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3754              		.loc 1 3321 0
 3755 005c 9B1A     		subs	r3, r3, r2
 3756 005e 2360     		str	r3, [r4]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3757              		.loc 1 3322 0
 3758 0060 2846     		mov	r0, r5
 3759 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3760              	.LVL320:
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3761              		.loc 1 3323 0
 3762 0066 0024     		movs	r4, #0
 3763              	.LVL321:
 3764              	.L338:
 3765              	.LBE177:
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3766              		.loc 1 3331 0
 3767 0068 FFF7FEFF 		bl	vPortExitCritical
 3768              	.LVL322:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3769              		.loc 1 3334 0
 3770 006c 2046     		mov	r0, r4
 3771 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3772              	.LVL323:
 3773              	.L341:
 3774              	.LBB178:
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3775              		.loc 1 3304 0
 3776 0070 0024     		movs	r4, #0
 3777              	.LVL324:
 3778 0072 F9E7     		b	.L338
 3779              	.LVL325:
 3780              	.L342:
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3781              		.loc 1 3316 0
 3782 0074 0124     		movs	r4, #1
 3783              	.LVL326:
 3784 0076 F7E7     		b	.L338
 3785              	.L347:
 3786              		.align	2
 3787              	.L346:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 171


 3788 0078 00000000 		.word	.LANCHOR15
 3789 007c 00000000 		.word	.LANCHOR18
 3790              	.LBE178:
 3791              		.cfi_endproc
 3792              	.LFE39:
 3794              		.section	.text.vTaskMissedYield,"ax",%progbits
 3795              		.align	1
 3796              		.global	vTaskMissedYield
 3797              		.syntax unified
 3798              		.thumb
 3799              		.thumb_func
 3800              		.fpu fpv4-sp-d16
 3802              	vTaskMissedYield:
 3803              	.LFB40:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3804              		.loc 1 3338 0
 3805              		.cfi_startproc
 3806              		@ args = 0, pretend = 0, frame = 0
 3807              		@ frame_needed = 0, uses_anonymous_args = 0
 3808              		@ link register save eliminated.
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3809              		.loc 1 3339 0
 3810 0000 014B     		ldr	r3, .L349
 3811 0002 0122     		movs	r2, #1
 3812 0004 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3813              		.loc 1 3340 0
 3814 0006 7047     		bx	lr
 3815              	.L350:
 3816              		.align	2
 3817              	.L349:
 3818 0008 00000000 		.word	.LANCHOR19
 3819              		.cfi_endproc
 3820              	.LFE40:
 3822              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3823              		.align	1
 3824              		.global	uxTaskGetTaskNumber
 3825              		.syntax unified
 3826              		.thumb
 3827              		.thumb_func
 3828              		.fpu fpv4-sp-d16
 3830              	uxTaskGetTaskNumber:
 3831              	.LFB41:
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 3832              		.loc 1 3346 0
 3833              		.cfi_startproc
 3834              		@ args = 0, pretend = 0, frame = 0
 3835              		@ frame_needed = 0, uses_anonymous_args = 0
 3836              		@ link register save eliminated.
 3837              	.LVL327:
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3838              		.loc 1 3350 0
 3839 0000 08B1     		cbz	r0, .L353
 3840              	.LVL328:
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3841              		.loc 1 3353 0
 3842 0002 C06C     		ldr	r0, [r0, #76]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 172


 3843              	.LVL329:
 3844 0004 7047     		bx	lr
 3845              	.LVL330:
 3846              	.L353:
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3847              		.loc 1 3357 0
 3848 0006 0020     		movs	r0, #0
 3849              	.LVL331:
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3850              		.loc 1 3361 0
 3851 0008 7047     		bx	lr
 3852              		.cfi_endproc
 3853              	.LFE41:
 3855              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3856              		.align	1
 3857              		.global	vTaskSetTaskNumber
 3858              		.syntax unified
 3859              		.thumb
 3860              		.thumb_func
 3861              		.fpu fpv4-sp-d16
 3863              	vTaskSetTaskNumber:
 3864              	.LFB42:
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3865              		.loc 1 3369 0
 3866              		.cfi_startproc
 3867              		@ args = 0, pretend = 0, frame = 0
 3868              		@ frame_needed = 0, uses_anonymous_args = 0
 3869              		@ link register save eliminated.
 3870              	.LVL332:
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3871              		.loc 1 3372 0
 3872 0000 00B1     		cbz	r0, .L354
 3873              	.LVL333:
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3874              		.loc 1 3375 0
 3875 0002 C164     		str	r1, [r0, #76]
 3876              	.LVL334:
 3877              	.L354:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3878              		.loc 1 3377 0
 3879 0004 7047     		bx	lr
 3880              		.cfi_endproc
 3881              	.LFE42:
 3883              		.section	.text.vTaskGetInfo,"ax",%progbits
 3884              		.align	1
 3885              		.global	vTaskGetInfo
 3886              		.syntax unified
 3887              		.thumb
 3888              		.thumb_func
 3889              		.fpu fpv4-sp-d16
 3891              	vTaskGetInfo:
 3892              	.LFB46:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3893              		.loc 1 3671 0
 3894              		.cfi_startproc
 3895              		@ args = 0, pretend = 0, frame = 0
 3896              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 173


 3897              	.LVL335:
 3898 0000 70B5     		push	{r4, r5, r6, lr}
 3899              	.LCFI38:
 3900              		.cfi_def_cfa_offset 16
 3901              		.cfi_offset 4, -16
 3902              		.cfi_offset 5, -12
 3903              		.cfi_offset 6, -8
 3904              		.cfi_offset 14, -4
 3905 0002 0C46     		mov	r4, r1
 3906 0004 1646     		mov	r6, r2
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3907              		.loc 1 3675 0
 3908 0006 0546     		mov	r5, r0
 3909 0008 D0B1     		cbz	r0, .L365
 3910              	.LVL336:
 3911              	.L357:
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 3912              		.loc 1 3677 0 discriminator 4
 3913 000a 2560     		str	r5, [r4]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 3914              		.loc 1 3678 0 discriminator 4
 3915 000c 05F13402 		add	r2, r5, #52
 3916 0010 6260     		str	r2, [r4, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 3917              		.loc 1 3679 0 discriminator 4
 3918 0012 EA6A     		ldr	r2, [r5, #44]
 3919 0014 2261     		str	r2, [r4, #16]
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 3920              		.loc 1 3680 0 discriminator 4
 3921 0016 2A6B     		ldr	r2, [r5, #48]
 3922 0018 E261     		str	r2, [r4, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3923              		.loc 1 3681 0 discriminator 4
 3924 001a AA6C     		ldr	r2, [r5, #72]
 3925 001c A260     		str	r2, [r4, #8]
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3926              		.loc 1 3685 0 discriminator 4
 3927 001e 2A6D     		ldr	r2, [r5, #80]
 3928 0020 6261     		str	r2, [r4, #20]
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3929              		.loc 1 3695 0 discriminator 4
 3930 0022 AA6D     		ldr	r2, [r5, #88]
 3931 0024 A261     		str	r2, [r4, #24]
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3932              		.loc 1 3706 0 discriminator 4
 3933 0026 052B     		cmp	r3, #5
 3934 0028 19D0     		beq	.L358
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3935              		.loc 1 3708 0
 3936 002a 124A     		ldr	r2, .L369
 3937 002c 1268     		ldr	r2, [r2]
 3938 002e AA42     		cmp	r2, r5
 3939 0030 09D0     		beq	.L366
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3940              		.loc 1 3714 0
 3941 0032 2373     		strb	r3, [r4, #12]
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 174


 3942              		.loc 1 3721 0
 3943 0034 032B     		cmp	r3, #3
 3944 0036 09D0     		beq	.L367
 3945              	.LVL337:
 3946              	.L360:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3947              		.loc 1 3743 0
 3948 0038 B6B9     		cbnz	r6, .L368
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3949              		.loc 1 3757 0
 3950 003a 0023     		movs	r3, #0
 3951 003c 2384     		strh	r3, [r4, #32]	@ movhi
 3952              	.L356:
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3953              		.loc 1 3759 0
 3954 003e 70BD     		pop	{r4, r5, r6, pc}
 3955              	.LVL338:
 3956              	.L365:
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3957              		.loc 1 3675 0 discriminator 1
 3958 0040 0C4A     		ldr	r2, .L369
 3959              	.LVL339:
 3960 0042 1568     		ldr	r5, [r2]
 3961              	.LVL340:
 3962 0044 E1E7     		b	.L357
 3963              	.LVL341:
 3964              	.L366:
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3965              		.loc 1 3710 0
 3966 0046 0023     		movs	r3, #0
 3967              	.LVL342:
 3968 0048 2373     		strb	r3, [r4, #12]
 3969 004a F5E7     		b	.L360
 3970              	.LVL343:
 3971              	.L367:
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 3972              		.loc 1 3723 0
 3973 004c FFF7FEFF 		bl	vTaskSuspendAll
 3974              	.LVL344:
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 3975              		.loc 1 3725 0
 3976 0050 AB6A     		ldr	r3, [r5, #40]
 3977 0052 0BB1     		cbz	r3, .L361
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 3978              		.loc 1 3727 0
 3979 0054 0223     		movs	r3, #2
 3980 0056 2373     		strb	r3, [r4, #12]
 3981              	.L361:
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3982              		.loc 1 3730 0
 3983 0058 FFF7FEFF 		bl	xTaskResumeAll
 3984              	.LVL345:
 3985 005c ECE7     		b	.L360
 3986              	.LVL346:
 3987              	.L358:
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3988              		.loc 1 3738 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 175


 3989 005e 2846     		mov	r0, r5
 3990 0060 FFF7FEFF 		bl	eTaskGetState
 3991              	.LVL347:
 3992 0064 2073     		strb	r0, [r4, #12]
 3993 0066 E7E7     		b	.L360
 3994              	.L368:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3995              		.loc 1 3751 0
 3996 0068 286B     		ldr	r0, [r5, #48]
 3997 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3998              	.LVL348:
 3999 006e 2084     		strh	r0, [r4, #32]	@ movhi
 4000 0070 E5E7     		b	.L356
 4001              	.L370:
 4002 0072 00BF     		.align	2
 4003              	.L369:
 4004 0074 00000000 		.word	.LANCHOR10
 4005              		.cfi_endproc
 4006              	.LFE46:
 4008              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4009              		.align	1
 4010              		.syntax unified
 4011              		.thumb
 4012              		.thumb_func
 4013              		.fpu fpv4-sp-d16
 4015              	prvListTasksWithinSingleList:
 4016              	.LFB47:
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4017              		.loc 1 3767 0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 0
 4020              		@ frame_needed = 0, uses_anonymous_args = 0
 4021              	.LVL349:
 4022 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4023              	.LCFI39:
 4024              		.cfi_def_cfa_offset 32
 4025              		.cfi_offset 4, -32
 4026              		.cfi_offset 5, -28
 4027              		.cfi_offset 6, -24
 4028              		.cfi_offset 7, -20
 4029              		.cfi_offset 8, -16
 4030              		.cfi_offset 9, -12
 4031              		.cfi_offset 10, -8
 4032              		.cfi_offset 14, -4
 4033              	.LVL350:
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4034              		.loc 1 3771 0
 4035 0004 0B68     		ldr	r3, [r1]
 4036 0006 3BB3     		cbz	r3, .L376
 4037              	.LVL351:
 4038              	.LBB179:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4039              		.loc 1 3773 0
 4040 0008 4B68     		ldr	r3, [r1, #4]
 4041 000a 5B68     		ldr	r3, [r3, #4]
 4042 000c 4B60     		str	r3, [r1, #4]
 4043 000e 01F10809 		add	r9, r1, #8
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 176


 4044 0012 4B45     		cmp	r3, r9
 4045 0014 07D0     		beq	.L378
 4046              	.L373:
 4047 0016 9046     		mov	r8, r2
 4048 0018 0C46     		mov	r4, r1
 4049 001a 0746     		mov	r7, r0
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4050              		.loc 1 3773 0 is_stmt 0 discriminator 3
 4051 001c 4B68     		ldr	r3, [r1, #4]
 4052 001e D3F80CA0 		ldr	r10, [r3, #12]
 4053              	.LVL352:
 4054              	.LBE179:
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4055              		.loc 1 3769 0 is_stmt 1 discriminator 3
 4056 0022 0025     		movs	r5, #0
 4057 0024 10E0     		b	.L375
 4058              	.LVL353:
 4059              	.L378:
 4060              	.LBB180:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4061              		.loc 1 3773 0 discriminator 1
 4062 0026 5B68     		ldr	r3, [r3, #4]
 4063 0028 4B60     		str	r3, [r1, #4]
 4064 002a F4E7     		b	.L373
 4065              	.LVL354:
 4066              	.L374:
 4067              	.LBE180:
 4068              	.LBB181:
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4069              		.loc 1 3781 0 discriminator 3
 4070 002c 6368     		ldr	r3, [r4, #4]
 4071 002e DE68     		ldr	r6, [r3, #12]
 4072              	.LVL355:
 4073              	.LBE181:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4074              		.loc 1 3782 0 discriminator 3
 4075 0030 05EBC503 		add	r3, r5, r5, lsl #3
 4076 0034 9900     		lsls	r1, r3, #2
 4077 0036 4346     		mov	r3, r8
 4078 0038 0122     		movs	r2, #1
 4079 003a 3944     		add	r1, r1, r7
 4080 003c 3046     		mov	r0, r6
 4081 003e FFF7FEFF 		bl	vTaskGetInfo
 4082              	.LVL356:
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4083              		.loc 1 3783 0 discriminator 3
 4084 0042 0135     		adds	r5, r5, #1
 4085              	.LVL357:
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4086              		.loc 1 3784 0 discriminator 3
 4087 0044 B245     		cmp	r10, r6
 4088 0046 08D0     		beq	.L371
 4089              	.LVL358:
 4090              	.L375:
 4091              	.LBB182:
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4092              		.loc 1 3781 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 177


 4093 0048 6368     		ldr	r3, [r4, #4]
 4094 004a 5B68     		ldr	r3, [r3, #4]
 4095 004c 6360     		str	r3, [r4, #4]
 4096 004e 9945     		cmp	r9, r3
 4097 0050 ECD1     		bne	.L374
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4098              		.loc 1 3781 0 is_stmt 0 discriminator 1
 4099 0052 5B68     		ldr	r3, [r3, #4]
 4100 0054 6360     		str	r3, [r4, #4]
 4101 0056 E9E7     		b	.L374
 4102              	.LVL359:
 4103              	.L376:
 4104              	.LBE182:
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4105              		.loc 1 3769 0 is_stmt 1
 4106 0058 0025     		movs	r5, #0
 4107              	.LVL360:
 4108              	.L371:
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4109              		.loc 1 3792 0
 4110 005a 2846     		mov	r0, r5
 4111 005c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4112              		.cfi_endproc
 4113              	.LFE47:
 4115              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4116              		.align	1
 4117              		.global	uxTaskGetSystemState
 4118              		.syntax unified
 4119              		.thumb
 4120              		.thumb_func
 4121              		.fpu fpv4-sp-d16
 4123              	uxTaskGetSystemState:
 4124              	.LFB29:
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4125              		.loc 1 2506 0
 4126              		.cfi_startproc
 4127              		@ args = 0, pretend = 0, frame = 0
 4128              		@ frame_needed = 0, uses_anonymous_args = 0
 4129              	.LVL361:
 4130 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4131              	.LCFI40:
 4132              		.cfi_def_cfa_offset 24
 4133              		.cfi_offset 3, -24
 4134              		.cfi_offset 4, -20
 4135              		.cfi_offset 5, -16
 4136              		.cfi_offset 6, -12
 4137              		.cfi_offset 7, -8
 4138              		.cfi_offset 14, -4
 4139 0002 0746     		mov	r7, r0
 4140 0004 0C46     		mov	r4, r1
 4141 0006 1646     		mov	r6, r2
 4142              	.LVL362:
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4143              		.loc 1 2509 0
 4144 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4145              	.LVL363:
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 178


 4146              		.loc 1 2512 0
 4147 000c 224B     		ldr	r3, .L384
 4148 000e 1B68     		ldr	r3, [r3]
 4149 0010 A342     		cmp	r3, r4
 4150 0012 3CD8     		bhi	.L382
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4151              		.loc 1 2507 0
 4152 0014 0725     		movs	r5, #7
 4153 0016 0024     		movs	r4, #0
 4154              	.LVL364:
 4155              	.L381:
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4156              		.loc 1 2518 0 discriminator 1
 4157 0018 013D     		subs	r5, r5, #1
 4158              	.LVL365:
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4159              		.loc 1 2519 0 discriminator 1
 4160 001a 04EBC403 		add	r3, r4, r4, lsl #3
 4161 001e 9800     		lsls	r0, r3, #2
 4162 0020 05EB8502 		add	r2, r5, r5, lsl #2
 4163 0024 9300     		lsls	r3, r2, #2
 4164 0026 0122     		movs	r2, #1
 4165 0028 1C49     		ldr	r1, .L384+4
 4166 002a 1944     		add	r1, r1, r3
 4167 002c 3844     		add	r0, r0, r7
 4168 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4169              	.LVL366:
 4170 0032 0444     		add	r4, r4, r0
 4171              	.LVL367:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4172              		.loc 1 2521 0 discriminator 1
 4173 0034 002D     		cmp	r5, #0
 4174 0036 EFD1     		bne	.L381
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4175              		.loc 1 2525 0
 4176 0038 04EBC403 		add	r3, r4, r4, lsl #3
 4177 003c 9800     		lsls	r0, r3, #2
 4178 003e 184B     		ldr	r3, .L384+8
 4179 0040 1968     		ldr	r1, [r3]
 4180 0042 0222     		movs	r2, #2
 4181 0044 3844     		add	r0, r0, r7
 4182 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4183              	.LVL368:
 4184 004a 0444     		add	r4, r4, r0
 4185              	.LVL369:
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4186              		.loc 1 2526 0
 4187 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4188 0050 9800     		lsls	r0, r3, #2
 4189 0052 144B     		ldr	r3, .L384+12
 4190 0054 1968     		ldr	r1, [r3]
 4191 0056 0222     		movs	r2, #2
 4192 0058 3844     		add	r0, r0, r7
 4193 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4194              	.LVL370:
 4195 005e 0444     		add	r4, r4, r0
 4196              	.LVL371:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 179


2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4197              		.loc 1 2532 0
 4198 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4199 0064 9800     		lsls	r0, r3, #2
 4200 0066 0422     		movs	r2, #4
 4201 0068 0F49     		ldr	r1, .L384+16
 4202 006a 3844     		add	r0, r0, r7
 4203 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4204              	.LVL372:
 4205 0070 0444     		add	r4, r4, r0
 4206              	.LVL373:
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4207              		.loc 1 2540 0
 4208 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4209 0076 9800     		lsls	r0, r3, #2
 4210 0078 0322     		movs	r2, #3
 4211 007a 0C49     		ldr	r1, .L384+20
 4212 007c 3844     		add	r0, r0, r7
 4213 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4214              	.LVL374:
 4215 0082 0444     		add	r4, r4, r0
 4216              	.LVL375:
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4217              		.loc 1 2546 0
 4218 0084 26B1     		cbz	r6, .L380
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
 4219              		.loc 1 2551 0
 4220 0086 FFF7FEFF 		bl	getRunTimeCounterValue
 4221              	.LVL376:
 4222 008a 3060     		str	r0, [r6]
 4223 008c 00E0     		b	.L380
 4224              	.LVL377:
 4225              	.L382:
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4226              		.loc 1 2507 0
 4227 008e 0024     		movs	r4, #0
 4228              	.LVL378:
 4229              	.L380:
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4230              		.loc 1 2569 0
 4231 0090 FFF7FEFF 		bl	xTaskResumeAll
 4232              	.LVL379:
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4233              		.loc 1 2572 0
 4234 0094 2046     		mov	r0, r4
 4235 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4236              	.LVL380:
 4237              	.L385:
 4238              		.align	2
 4239              	.L384:
 4240 0098 00000000 		.word	.LANCHOR9
 4241 009c 00000000 		.word	.LANCHOR4
 4242 00a0 00000000 		.word	.LANCHOR2
 4243 00a4 00000000 		.word	.LANCHOR8
 4244 00a8 00000000 		.word	.LANCHOR7
 4245 00ac 00000000 		.word	.LANCHOR0
 4246              		.cfi_endproc
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 180


 4247              	.LFE29:
 4249              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4250              		.align	1
 4251              		.global	xTaskGetCurrentTaskHandle
 4252              		.syntax unified
 4253              		.thumb
 4254              		.thumb_func
 4255              		.fpu fpv4-sp-d16
 4257              	xTaskGetCurrentTaskHandle:
 4258              	.LFB51:
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4259              		.loc 1 3970 0
 4260              		.cfi_startproc
 4261              		@ args = 0, pretend = 0, frame = 0
 4262              		@ frame_needed = 0, uses_anonymous_args = 0
 4263              		@ link register save eliminated.
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4264              		.loc 1 3976 0
 4265 0000 014B     		ldr	r3, .L387
 4266 0002 1868     		ldr	r0, [r3]
 4267              	.LVL381:
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4268              		.loc 1 3979 0
 4269 0004 7047     		bx	lr
 4270              	.L388:
 4271 0006 00BF     		.align	2
 4272              	.L387:
 4273 0008 00000000 		.word	.LANCHOR10
 4274              		.cfi_endproc
 4275              	.LFE51:
 4277              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4278              		.align	1
 4279              		.global	xTaskGetSchedulerState
 4280              		.syntax unified
 4281              		.thumb
 4282              		.thumb_func
 4283              		.fpu fpv4-sp-d16
 4285              	xTaskGetSchedulerState:
 4286              	.LFB52:
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4287              		.loc 1 3987 0
 4288              		.cfi_startproc
 4289              		@ args = 0, pretend = 0, frame = 0
 4290              		@ frame_needed = 0, uses_anonymous_args = 0
 4291              		@ link register save eliminated.
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4292              		.loc 1 3990 0
 4293 0000 054B     		ldr	r3, .L394
 4294 0002 1B68     		ldr	r3, [r3]
 4295 0004 33B1     		cbz	r3, .L391
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4296              		.loc 1 3996 0
 4297 0006 054B     		ldr	r3, .L394+4
 4298 0008 1B68     		ldr	r3, [r3]
 4299 000a 0BB1     		cbz	r3, .L393
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4300              		.loc 1 4002 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 181


 4301 000c 0020     		movs	r0, #0
 4302              	.LVL382:
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4303              		.loc 1 4007 0
 4304 000e 7047     		bx	lr
 4305              	.LVL383:
 4306              	.L393:
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4307              		.loc 1 3998 0
 4308 0010 0220     		movs	r0, #2
 4309 0012 7047     		bx	lr
 4310              	.L391:
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4311              		.loc 1 3992 0
 4312 0014 0120     		movs	r0, #1
 4313 0016 7047     		bx	lr
 4314              	.L395:
 4315              		.align	2
 4316              	.L394:
 4317 0018 00000000 		.word	.LANCHOR11
 4318 001c 00000000 		.word	.LANCHOR16
 4319              		.cfi_endproc
 4320              	.LFE52:
 4322              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4323              		.align	1
 4324              		.global	xTaskPriorityInherit
 4325              		.syntax unified
 4326              		.thumb
 4327              		.thumb_func
 4328              		.fpu fpv4-sp-d16
 4330              	xTaskPriorityInherit:
 4331              	.LFB53:
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4332              		.loc 1 4015 0
 4333              		.cfi_startproc
 4334              		@ args = 0, pretend = 0, frame = 0
 4335              		@ frame_needed = 0, uses_anonymous_args = 0
 4336              	.LVL384:
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4337              		.loc 1 4022 0
 4338 0000 0028     		cmp	r0, #0
 4339 0002 4BD0     		beq	.L402
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4340              		.loc 1 4015 0
 4341 0004 38B5     		push	{r3, r4, r5, lr}
 4342              	.LCFI41:
 4343              		.cfi_def_cfa_offset 16
 4344              		.cfi_offset 3, -16
 4345              		.cfi_offset 4, -12
 4346              		.cfi_offset 5, -8
 4347              		.cfi_offset 14, -4
 4348 0006 0446     		mov	r4, r0
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4349              		.loc 1 4027 0
 4350 0008 C26A     		ldr	r2, [r0, #44]
 4351 000a 2549     		ldr	r1, .L410
 4352 000c 0968     		ldr	r1, [r1]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 182


 4353 000e C96A     		ldr	r1, [r1, #44]
 4354 0010 8A42     		cmp	r2, r1
 4355 0012 39D2     		bcs	.L398
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4356              		.loc 1 4032 0
 4357 0014 8169     		ldr	r1, [r0, #24]
 4358 0016 0029     		cmp	r1, #0
 4359 0018 05DB     		blt	.L399
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4360              		.loc 1 4034 0
 4361 001a 2149     		ldr	r1, .L410
 4362 001c 0968     		ldr	r1, [r1]
 4363 001e C96A     		ldr	r1, [r1, #44]
 4364 0020 C1F10701 		rsb	r1, r1, #7
 4365 0024 8161     		str	r1, [r0, #24]
 4366              	.L399:
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4367              		.loc 1 4043 0
 4368 0026 6069     		ldr	r0, [r4, #20]
 4369              	.LVL385:
 4370 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4371 002c 9100     		lsls	r1, r2, #2
 4372 002e 1D4A     		ldr	r2, .L410+4
 4373 0030 0A44     		add	r2, r2, r1
 4374 0032 9042     		cmp	r0, r2
 4375 0034 05D0     		beq	.L408
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4376              		.loc 1 4064 0
 4377 0036 1A4A     		ldr	r2, .L410
 4378 0038 1268     		ldr	r2, [r2]
 4379 003a D26A     		ldr	r2, [r2, #44]
 4380 003c E262     		str	r2, [r4, #44]
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4381              		.loc 1 4070 0
 4382 003e 0120     		movs	r0, #1
 4383              	.LVL386:
 4384              	.L396:
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4385              		.loc 1 4097 0
 4386 0040 38BD     		pop	{r3, r4, r5, pc}
 4387              	.LVL387:
 4388              	.L408:
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4389              		.loc 1 4045 0
 4390 0042 251D     		adds	r5, r4, #4
 4391 0044 2846     		mov	r0, r5
 4392 0046 FFF7FEFF 		bl	uxListRemove
 4393              	.LVL388:
 4394 004a 40B9     		cbnz	r0, .L401
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4395              		.loc 1 4050 0
 4396 004c E26A     		ldr	r2, [r4, #44]
 4397 004e 0123     		movs	r3, #1
 4398 0050 03FA02F2 		lsl	r2, r3, r2
 4399 0054 1449     		ldr	r1, .L410+8
 4400 0056 0B68     		ldr	r3, [r1]
 4401 0058 23EA0203 		bic	r3, r3, r2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 183


 4402 005c 0B60     		str	r3, [r1]
 4403              	.L401:
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4404              		.loc 1 4058 0
 4405 005e 104B     		ldr	r3, .L410
 4406 0060 1B68     		ldr	r3, [r3]
 4407 0062 DB6A     		ldr	r3, [r3, #44]
 4408 0064 E362     		str	r3, [r4, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4409              		.loc 1 4059 0
 4410 0066 0124     		movs	r4, #1
 4411              	.LVL389:
 4412 0068 04FA03F2 		lsl	r2, r4, r3
 4413 006c 0E49     		ldr	r1, .L410+8
 4414 006e 0868     		ldr	r0, [r1]
 4415 0070 0243     		orrs	r2, r2, r0
 4416 0072 0A60     		str	r2, [r1]
 4417 0074 03EB8303 		add	r3, r3, r3, lsl #2
 4418 0078 9A00     		lsls	r2, r3, #2
 4419 007a 2946     		mov	r1, r5
 4420 007c 0948     		ldr	r0, .L410+4
 4421 007e 1044     		add	r0, r0, r2
 4422 0080 FFF7FEFF 		bl	vListInsertEnd
 4423              	.LVL390:
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4424              		.loc 1 4070 0
 4425 0084 2046     		mov	r0, r4
 4426 0086 DBE7     		b	.L396
 4427              	.LVL391:
 4428              	.L398:
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4429              		.loc 1 4074 0
 4430 0088 026D     		ldr	r2, [r0, #80]
 4431 008a 054B     		ldr	r3, .L410
 4432 008c 1B68     		ldr	r3, [r3]
 4433 008e DB6A     		ldr	r3, [r3, #44]
 4434 0090 9A42     		cmp	r2, r3
 4435 0092 01D2     		bcs	.L409
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4436              		.loc 1 4083 0
 4437 0094 0120     		movs	r0, #1
 4438              	.LVL392:
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4439              		.loc 1 4096 0
 4440 0096 D3E7     		b	.L396
 4441              	.LVL393:
 4442              	.L409:
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4443              		.loc 1 4017 0
 4444 0098 0020     		movs	r0, #0
 4445              	.LVL394:
 4446 009a D1E7     		b	.L396
 4447              	.LVL395:
 4448              	.L402:
 4449              	.LCFI42:
 4450              		.cfi_def_cfa_offset 0
 4451              		.cfi_restore 3
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 184


 4452              		.cfi_restore 4
 4453              		.cfi_restore 5
 4454              		.cfi_restore 14
 4455 009c 0020     		movs	r0, #0
 4456              	.LVL396:
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4457              		.loc 1 4097 0
 4458 009e 7047     		bx	lr
 4459              	.L411:
 4460              		.align	2
 4461              	.L410:
 4462 00a0 00000000 		.word	.LANCHOR10
 4463 00a4 00000000 		.word	.LANCHOR4
 4464 00a8 00000000 		.word	.LANCHOR13
 4465              		.cfi_endproc
 4466              	.LFE53:
 4468              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4469              		.align	1
 4470              		.global	xTaskPriorityDisinherit
 4471              		.syntax unified
 4472              		.thumb
 4473              		.thumb_func
 4474              		.fpu fpv4-sp-d16
 4476              	xTaskPriorityDisinherit:
 4477              	.LFB54:
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4478              		.loc 1 4105 0
 4479              		.cfi_startproc
 4480              		@ args = 0, pretend = 0, frame = 0
 4481              		@ frame_needed = 0, uses_anonymous_args = 0
 4482              	.LVL397:
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4483              		.loc 1 4109 0
 4484 0000 0028     		cmp	r0, #0
 4485 0002 49D0     		beq	.L419
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4486              		.loc 1 4105 0
 4487 0004 38B5     		push	{r3, r4, r5, lr}
 4488              	.LCFI43:
 4489              		.cfi_def_cfa_offset 16
 4490              		.cfi_offset 3, -16
 4491              		.cfi_offset 4, -12
 4492              		.cfi_offset 5, -8
 4493              		.cfi_offset 14, -4
 4494 0006 0446     		mov	r4, r0
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4495              		.loc 1 4115 0
 4496 0008 264A     		ldr	r2, .L426
 4497 000a 1268     		ldr	r2, [r2]
 4498 000c 8242     		cmp	r2, r0
 4499 000e 08D0     		beq	.L414
 4500              	.LBB183:
 4501              	.LBB184:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4502              		.loc 2 195 0
 4503              		.syntax unified
 4504              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 185


 4505 0010 4FF05003 			mov r3, #80												
 4506 0014 83F31188 		msr basepri, r3											
 4507 0018 BFF36F8F 		isb														
 4508 001c BFF34F8F 		dsb														
 4509              	
 4510              	@ 0 "" 2
 4511              	.LVL398:
 4512              		.thumb
 4513              		.syntax unified
 4514              	.L415:
 4515 0020 FEE7     		b	.L415
 4516              	.L414:
 4517              	.LBE184:
 4518              	.LBE183:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4519              		.loc 1 4116 0
 4520 0022 426D     		ldr	r2, [r0, #84]
 4521 0024 42B9     		cbnz	r2, .L416
 4522              	.LBB185:
 4523              	.LBB186:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4524              		.loc 2 195 0
 4525              		.syntax unified
 4526              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4527 0026 4FF05003 			mov r3, #80												
 4528 002a 83F31188 		msr basepri, r3											
 4529 002e BFF36F8F 		isb														
 4530 0032 BFF34F8F 		dsb														
 4531              	
 4532              	@ 0 "" 2
 4533              	.LVL399:
 4534              		.thumb
 4535              		.syntax unified
 4536              	.L417:
 4537 0036 FEE7     		b	.L417
 4538              	.L416:
 4539              	.LBE186:
 4540              	.LBE185:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4541              		.loc 1 4117 0
 4542 0038 013A     		subs	r2, r2, #1
 4543 003a 4265     		str	r2, [r0, #84]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4544              		.loc 1 4121 0
 4545 003c C06A     		ldr	r0, [r0, #44]
 4546              	.LVL400:
 4547 003e 216D     		ldr	r1, [r4, #80]
 4548 0040 8842     		cmp	r0, r1
 4549 0042 2BD0     		beq	.L420
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4550              		.loc 1 4124 0
 4551 0044 62BB     		cbnz	r2, .L421
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4552              		.loc 1 4131 0
 4553 0046 251D     		adds	r5, r4, #4
 4554 0048 2846     		mov	r0, r5
 4555 004a FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 186


 4556              	.LVL401:
 4557 004e 70B9     		cbnz	r0, .L418
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4558              		.loc 1 4133 0
 4559 0050 E26A     		ldr	r2, [r4, #44]
 4560 0052 1423     		movs	r3, #20
 4561 0054 03FB02F3 		mul	r3, r3, r2
 4562 0058 1349     		ldr	r1, .L426+4
 4563 005a CB58     		ldr	r3, [r1, r3]
 4564 005c 3BB9     		cbnz	r3, .L418
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4565              		.loc 1 4133 0 is_stmt 0 discriminator 1
 4566 005e 0123     		movs	r3, #1
 4567 0060 03FA02F2 		lsl	r2, r3, r2
 4568 0064 1149     		ldr	r1, .L426+8
 4569 0066 0B68     		ldr	r3, [r1]
 4570 0068 23EA0203 		bic	r3, r3, r2
 4571 006c 0B60     		str	r3, [r1]
 4572              	.L418:
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4573              		.loc 1 4143 0 is_stmt 1
 4574 006e 236D     		ldr	r3, [r4, #80]
 4575 0070 E362     		str	r3, [r4, #44]
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4576              		.loc 1 4148 0
 4577 0072 C3F10702 		rsb	r2, r3, #7
 4578 0076 A261     		str	r2, [r4, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4579              		.loc 1 4149 0
 4580 0078 0124     		movs	r4, #1
 4581              	.LVL402:
 4582 007a 04FA03F2 		lsl	r2, r4, r3
 4583 007e 0B49     		ldr	r1, .L426+8
 4584 0080 0868     		ldr	r0, [r1]
 4585 0082 0243     		orrs	r2, r2, r0
 4586 0084 0A60     		str	r2, [r1]
 4587 0086 2946     		mov	r1, r5
 4588 0088 074A     		ldr	r2, .L426+4
 4589 008a 1420     		movs	r0, #20
 4590 008c 00FB0320 		mla	r0, r0, r3, r2
 4591 0090 FFF7FEFF 		bl	vListInsertEnd
 4592              	.LVL403:
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4593              		.loc 1 4159 0
 4594 0094 2046     		mov	r0, r4
 4595              	.LVL404:
 4596              	.L412:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4597              		.loc 1 4177 0
 4598 0096 38BD     		pop	{r3, r4, r5, pc}
 4599              	.LVL405:
 4600              	.L419:
 4601              	.LCFI44:
 4602              		.cfi_def_cfa_offset 0
 4603              		.cfi_restore 3
 4604              		.cfi_restore 4
 4605              		.cfi_restore 5
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 187


 4606              		.cfi_restore 14
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4607              		.loc 1 4107 0
 4608 0098 0020     		movs	r0, #0
 4609              	.LVL406:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4610              		.loc 1 4177 0
 4611 009a 7047     		bx	lr
 4612              	.LVL407:
 4613              	.L420:
 4614              	.LCFI45:
 4615              		.cfi_def_cfa_offset 16
 4616              		.cfi_offset 3, -16
 4617              		.cfi_offset 4, -12
 4618              		.cfi_offset 5, -8
 4619              		.cfi_offset 14, -4
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4620              		.loc 1 4107 0
 4621 009c 0020     		movs	r0, #0
 4622 009e FAE7     		b	.L412
 4623              	.L421:
 4624 00a0 0020     		movs	r0, #0
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4625              		.loc 1 4176 0
 4626 00a2 F8E7     		b	.L412
 4627              	.L427:
 4628              		.align	2
 4629              	.L426:
 4630 00a4 00000000 		.word	.LANCHOR10
 4631 00a8 00000000 		.word	.LANCHOR4
 4632 00ac 00000000 		.word	.LANCHOR13
 4633              		.cfi_endproc
 4634              	.LFE54:
 4636              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4637              		.align	1
 4638              		.global	vTaskPriorityDisinheritAfterTimeout
 4639              		.syntax unified
 4640              		.thumb
 4641              		.thumb_func
 4642              		.fpu fpv4-sp-d16
 4644              	vTaskPriorityDisinheritAfterTimeout:
 4645              	.LFB55:
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4646              		.loc 1 4185 0
 4647              		.cfi_startproc
 4648              		@ args = 0, pretend = 0, frame = 0
 4649              		@ frame_needed = 0, uses_anonymous_args = 0
 4650              	.LVL408:
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4651              		.loc 1 4190 0
 4652 0000 0028     		cmp	r0, #0
 4653 0002 4FD0     		beq	.L438
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4654              		.loc 1 4185 0
 4655 0004 38B5     		push	{r3, r4, r5, lr}
 4656              	.LCFI46:
 4657              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 188


 4658              		.cfi_offset 3, -16
 4659              		.cfi_offset 4, -12
 4660              		.cfi_offset 5, -8
 4661              		.cfi_offset 14, -4
 4662 0006 0346     		mov	r3, r0
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4663              		.loc 1 4194 0
 4664 0008 406D     		ldr	r0, [r0, #84]
 4665              	.LVL409:
 4666 000a 40B9     		cbnz	r0, .L430
 4667              	.LBB187:
 4668              	.LBB188:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4669              		.loc 2 195 0
 4670              		.syntax unified
 4671              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4672 000c 4FF05003 			mov r3, #80												
 4673 0010 83F31188 		msr basepri, r3											
 4674 0014 BFF36F8F 		isb														
 4675 0018 BFF34F8F 		dsb														
 4676              	
 4677              	@ 0 "" 2
 4678              	.LVL410:
 4679              		.thumb
 4680              		.syntax unified
 4681              	.L431:
 4682 001c FEE7     		b	.L431
 4683              	.LVL411:
 4684              	.L430:
 4685              	.LBE188:
 4686              	.LBE187:
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4687              		.loc 1 4200 0
 4688 001e 1A6D     		ldr	r2, [r3, #80]
 4689 0020 8A42     		cmp	r2, r1
 4690 0022 00D2     		bcs	.L432
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4691              		.loc 1 4202 0
 4692 0024 0A46     		mov	r2, r1
 4693              	.L432:
 4694              	.LVL412:
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4695              		.loc 1 4210 0
 4696 0026 D96A     		ldr	r1, [r3, #44]
 4697              	.LVL413:
 4698 0028 9142     		cmp	r1, r2
 4699 002a 01D0     		beq	.L428
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4700              		.loc 1 4216 0
 4701 002c 0128     		cmp	r0, #1
 4702 002e 00D0     		beq	.L441
 4703              	.LVL414:
 4704              	.L428:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4705              		.loc 1 4282 0
 4706 0030 38BD     		pop	{r3, r4, r5, pc}
 4707              	.LVL415:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 189


 4708              	.L441:
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4709              		.loc 1 4221 0
 4710 0032 1D48     		ldr	r0, .L442
 4711 0034 0068     		ldr	r0, [r0]
 4712 0036 9842     		cmp	r0, r3
 4713 0038 08D1     		bne	.L433
 4714              	.LBB189:
 4715              	.LBB190:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4716              		.loc 2 195 0
 4717              		.syntax unified
 4718              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4719 003a 4FF05003 			mov r3, #80												
 4720 003e 83F31188 		msr basepri, r3											
 4721 0042 BFF36F8F 		isb														
 4722 0046 BFF34F8F 		dsb														
 4723              	
 4724              	@ 0 "" 2
 4725              	.LVL416:
 4726              		.thumb
 4727              		.syntax unified
 4728              	.L434:
 4729 004a FEE7     		b	.L434
 4730              	.LVL417:
 4731              	.L433:
 4732              	.LBE190:
 4733              	.LBE189:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4734              		.loc 1 4228 0
 4735 004c DA62     		str	r2, [r3, #44]
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4736              		.loc 1 4232 0
 4737 004e 9869     		ldr	r0, [r3, #24]
 4738 0050 0028     		cmp	r0, #0
 4739 0052 02DB     		blt	.L435
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4740              		.loc 1 4234 0
 4741 0054 C2F10702 		rsb	r2, r2, #7
 4742              	.LVL418:
 4743 0058 9A61     		str	r2, [r3, #24]
 4744              	.L435:
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4745              		.loc 1 4247 0
 4746 005a 5A69     		ldr	r2, [r3, #20]
 4747 005c 1348     		ldr	r0, .L442+4
 4748 005e 1424     		movs	r4, #20
 4749 0060 04FB0101 		mla	r1, r4, r1, r0
 4750              	.LVL419:
 4751 0064 8A42     		cmp	r2, r1
 4752 0066 E3D1     		bne	.L428
 4753 0068 1C46     		mov	r4, r3
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4754              		.loc 1 4249 0
 4755 006a 1D1D     		adds	r5, r3, #4
 4756 006c 2846     		mov	r0, r5
 4757 006e FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 190


 4758              	.LVL420:
 4759 0072 40B9     		cbnz	r0, .L436
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4760              		.loc 1 4254 0
 4761 0074 E26A     		ldr	r2, [r4, #44]
 4762 0076 0123     		movs	r3, #1
 4763 0078 03FA02F2 		lsl	r2, r3, r2
 4764 007c 0C49     		ldr	r1, .L442+8
 4765 007e 0B68     		ldr	r3, [r1]
 4766 0080 23EA0203 		bic	r3, r3, r2
 4767 0084 0B60     		str	r3, [r1]
 4768              	.L436:
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4769              		.loc 1 4261 0
 4770 0086 E26A     		ldr	r2, [r4, #44]
 4771 0088 0123     		movs	r3, #1
 4772 008a 9340     		lsls	r3, r3, r2
 4773 008c 0849     		ldr	r1, .L442+8
 4774 008e 0868     		ldr	r0, [r1]
 4775 0090 0343     		orrs	r3, r3, r0
 4776 0092 0B60     		str	r3, [r1]
 4777 0094 2946     		mov	r1, r5
 4778 0096 054B     		ldr	r3, .L442+4
 4779 0098 1420     		movs	r0, #20
 4780 009a 00FB0230 		mla	r0, r0, r2, r3
 4781 009e FFF7FEFF 		bl	vListInsertEnd
 4782              	.LVL421:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4783              		.loc 1 4282 0
 4784 00a2 C5E7     		b	.L428
 4785              	.LVL422:
 4786              	.L438:
 4787              	.LCFI47:
 4788              		.cfi_def_cfa_offset 0
 4789              		.cfi_restore 3
 4790              		.cfi_restore 4
 4791              		.cfi_restore 5
 4792              		.cfi_restore 14
 4793 00a4 7047     		bx	lr
 4794              	.L443:
 4795 00a6 00BF     		.align	2
 4796              	.L442:
 4797 00a8 00000000 		.word	.LANCHOR10
 4798 00ac 00000000 		.word	.LANCHOR4
 4799 00b0 00000000 		.word	.LANCHOR13
 4800              		.cfi_endproc
 4801              	.LFE55:
 4803              		.section	.text.vTaskList,"ax",%progbits
 4804              		.align	1
 4805              		.global	vTaskList
 4806              		.syntax unified
 4807              		.thumb
 4808              		.thumb_func
 4809              		.fpu fpv4-sp-d16
 4811              	vTaskList:
 4812              	.LFB57:
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 191


 4813              		.loc 1 4379 0
 4814              		.cfi_startproc
 4815              		@ args = 0, pretend = 0, frame = 0
 4816              		@ frame_needed = 0, uses_anonymous_args = 0
 4817              	.LVL423:
 4818 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4819              	.LCFI48:
 4820              		.cfi_def_cfa_offset 28
 4821              		.cfi_offset 4, -28
 4822              		.cfi_offset 5, -24
 4823              		.cfi_offset 6, -20
 4824              		.cfi_offset 7, -16
 4825              		.cfi_offset 8, -12
 4826              		.cfi_offset 9, -8
 4827              		.cfi_offset 14, -4
 4828 0004 83B0     		sub	sp, sp, #12
 4829              	.LCFI49:
 4830              		.cfi_def_cfa_offset 40
 4831 0006 0546     		mov	r5, r0
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4832              		.loc 1 4410 0
 4833 0008 0023     		movs	r3, #0
 4834 000a 0370     		strb	r3, [r0]
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4835              		.loc 1 4414 0
 4836 000c 284B     		ldr	r3, .L458
 4837 000e 1C68     		ldr	r4, [r3]
 4838              	.LVL424:
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4839              		.loc 1 4419 0
 4840 0010 1B68     		ldr	r3, [r3]
 4841 0012 03EBC303 		add	r3, r3, r3, lsl #3
 4842 0016 9800     		lsls	r0, r3, #2
 4843              	.LVL425:
 4844 0018 FFF7FEFF 		bl	pvPortMalloc
 4845              	.LVL426:
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4846              		.loc 1 4421 0
 4847 001c 0028     		cmp	r0, #0
 4848 001e 44D0     		beq	.L444
 4849 0020 0746     		mov	r7, r0
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4850              		.loc 1 4424 0
 4851 0022 0022     		movs	r2, #0
 4852 0024 2146     		mov	r1, r4
 4853 0026 FFF7FEFF 		bl	uxTaskGetSystemState
 4854              	.LVL427:
 4855 002a 8046     		mov	r8, r0
 4856              	.LVL428:
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4857              		.loc 1 4427 0
 4858 002c 0026     		movs	r6, #0
 4859 002e 23E0     		b	.L446
 4860              	.LVL429:
 4861              	.L448:
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 4862              		.loc 1 4431 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 192


 4863 0030 4FF05809 		mov	r9, #88
 4864 0034 0DE0     		b	.L450
 4865              	.L451:
 4866              	.LVL430:
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 4867              		.loc 1 4437 0
 4868 0036 4FF04209 		mov	r9, #66
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4869              		.loc 1 4438 0
 4870 003a 0AE0     		b	.L450
 4871              	.LVL431:
 4872              	.L452:
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 4873              		.loc 1 4440 0
 4874 003c 4FF05309 		mov	r9, #83
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4875              		.loc 1 4441 0
 4876 0040 07E0     		b	.L450
 4877              	.LVL432:
 4878              	.L453:
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 4879              		.loc 1 4443 0
 4880 0042 4FF04409 		mov	r9, #68
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4881              		.loc 1 4444 0
 4882 0046 04E0     		b	.L450
 4883              	.LVL433:
 4884              	.L447:
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 4885              		.loc 1 4449 0
 4886 0048 4FF00009 		mov	r9, #0
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4887              		.loc 1 4450 0
 4888 004c 01E0     		b	.L450
 4889              	.LVL434:
 4890              	.L455:
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 4891              		.loc 1 4434 0
 4892 004e 4FF05209 		mov	r9, #82
 4893              	.L450:
 4894              	.LVL435:
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4895              		.loc 1 4455 0 discriminator 2
 4896 0052 6168     		ldr	r1, [r4, #4]
 4897 0054 2846     		mov	r0, r5
 4898 0056 FFF7FEFF 		bl	prvWriteNameToBuffer
 4899              	.LVL436:
 4900 005a 0546     		mov	r5, r0
 4901              	.LVL437:
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
 4902              		.loc 1 4458 0 discriminator 2
 4903 005c 2369     		ldr	r3, [r4, #16]
 4904 005e 228C     		ldrh	r2, [r4, #32]
 4905 0060 A168     		ldr	r1, [r4, #8]
 4906 0062 0191     		str	r1, [sp, #4]
 4907 0064 0092     		str	r2, [sp]
 4908 0066 4A46     		mov	r2, r9
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 193


 4909 0068 1249     		ldr	r1, .L458+4
 4910 006a FFF7FEFF 		bl	sprintf
 4911              	.LVL438:
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4912              		.loc 1 4459 0 discriminator 2
 4913 006e 2846     		mov	r0, r5
 4914 0070 FFF7FEFF 		bl	strlen
 4915              	.LVL439:
 4916 0074 0544     		add	r5, r5, r0
 4917              	.LVL440:
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4918              		.loc 1 4427 0 discriminator 2
 4919 0076 0136     		adds	r6, r6, #1
 4920              	.LVL441:
 4921              	.L446:
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4922              		.loc 1 4427 0 is_stmt 0 discriminator 1
 4923 0078 4645     		cmp	r6, r8
 4924 007a 13D2     		bcs	.L457
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4925              		.loc 1 4429 0 is_stmt 1
 4926 007c 06EBC603 		add	r3, r6, r6, lsl #3
 4927 0080 9C00     		lsls	r4, r3, #2
 4928 0082 3C44     		add	r4, r4, r7
 4929 0084 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 4930 0086 042B     		cmp	r3, #4
 4931 0088 DED8     		bhi	.L447
 4932 008a 01A2     		adr	r2, .L449
 4933 008c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4934              		.p2align 2
 4935              	.L449:
 4936 0090 31000000 		.word	.L448+1
 4937 0094 4F000000 		.word	.L455+1
 4938 0098 37000000 		.word	.L451+1
 4939 009c 3D000000 		.word	.L452+1
 4940 00a0 43000000 		.word	.L453+1
 4941              		.p2align 1
 4942              	.L457:
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4943              		.loc 1 4464 0
 4944 00a4 3846     		mov	r0, r7
 4945 00a6 FFF7FEFF 		bl	vPortFree
 4946              	.LVL442:
 4947              	.L444:
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4948              		.loc 1 4470 0
 4949 00aa 03B0     		add	sp, sp, #12
 4950              	.LCFI50:
 4951              		.cfi_def_cfa_offset 28
 4952              		@ sp needed
 4953 00ac BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4954              	.LVL443:
 4955              	.L459:
 4956              		.align	2
 4957              	.L458:
 4958 00b0 00000000 		.word	.LANCHOR9
 4959 00b4 00000000 		.word	.LC1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 194


 4960              		.cfi_endproc
 4961              	.LFE57:
 4963              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
 4964              		.align	1
 4965              		.global	vTaskGetRunTimeStats
 4966              		.syntax unified
 4967              		.thumb
 4968              		.thumb_func
 4969              		.fpu fpv4-sp-d16
 4971              	vTaskGetRunTimeStats:
 4972              	.LFB58:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4973              		.loc 1 4478 0
 4974              		.cfi_startproc
 4975              		@ args = 0, pretend = 0, frame = 8
 4976              		@ frame_needed = 0, uses_anonymous_args = 0
 4977              	.LVL444:
 4978 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4979              	.LCFI51:
 4980              		.cfi_def_cfa_offset 28
 4981              		.cfi_offset 4, -28
 4982              		.cfi_offset 5, -24
 4983              		.cfi_offset 6, -20
 4984              		.cfi_offset 7, -16
 4985              		.cfi_offset 8, -12
 4986              		.cfi_offset 9, -8
 4987              		.cfi_offset 14, -4
 4988 0004 83B0     		sub	sp, sp, #12
 4989              	.LCFI52:
 4990              		.cfi_def_cfa_offset 40
 4991 0006 0746     		mov	r7, r0
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4992              		.loc 1 4515 0
 4993 0008 0023     		movs	r3, #0
 4994 000a 0370     		strb	r3, [r0]
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4995              		.loc 1 4519 0
 4996 000c 1E4B     		ldr	r3, .L469
 4997 000e 1C68     		ldr	r4, [r3]
 4998              	.LVL445:
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4999              		.loc 1 4524 0
 5000 0010 1B68     		ldr	r3, [r3]
 5001 0012 03EBC303 		add	r3, r3, r3, lsl #3
 5002 0016 9800     		lsls	r0, r3, #2
 5003              	.LVL446:
 5004 0018 FFF7FEFF 		bl	pvPortMalloc
 5005              	.LVL447:
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5006              		.loc 1 4526 0
 5007 001c 78B1     		cbz	r0, .L460
 5008 001e 8046     		mov	r8, r0
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5009              		.loc 1 4529 0
 5010 0020 01AA     		add	r2, sp, #4
 5011 0022 2146     		mov	r1, r4
 5012 0024 FFF7FEFF 		bl	uxTaskGetSystemState
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 195


 5013              	.LVL448:
 5014 0028 8146     		mov	r9, r0
 5015              	.LVL449:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5016              		.loc 1 4532 0
 5017 002a 019B     		ldr	r3, [sp, #4]
 5018 002c 174A     		ldr	r2, .L469+4
 5019 002e A2FB0323 		umull	r2, r3, r2, r3
 5020 0032 5B09     		lsrs	r3, r3, #5
 5021 0034 0193     		str	r3, [sp, #4]
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5022              		.loc 1 4535 0
 5023 0036 2BBB     		cbnz	r3, .L467
 5024              	.LVL450:
 5025              	.L463:
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5026              		.loc 1 4591 0
 5027 0038 4046     		mov	r0, r8
 5028 003a FFF7FEFF 		bl	vPortFree
 5029              	.LVL451:
 5030              	.L460:
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5031              		.loc 1 4597 0
 5032 003e 03B0     		add	sp, sp, #12
 5033              	.LCFI53:
 5034              		.cfi_remember_state
 5035              		.cfi_def_cfa_offset 28
 5036              		@ sp needed
 5037 0040 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 5038              	.LVL452:
 5039              	.L464:
 5040              	.LCFI54:
 5041              		.cfi_restore_state
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 5042              		.loc 1 4576 0
 5043 0044 A269     		ldr	r2, [r4, #24]
 5044 0046 1249     		ldr	r1, .L469+8
 5045 0048 FFF7FEFF 		bl	sprintf
 5046              	.LVL453:
 5047              	.L465:
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5048              		.loc 1 4581 0 discriminator 2
 5049 004c 3846     		mov	r0, r7
 5050 004e FFF7FEFF 		bl	strlen
 5051              	.LVL454:
 5052 0052 0744     		add	r7, r7, r0
 5053              	.LVL455:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5054              		.loc 1 4538 0 discriminator 2
 5055 0054 0135     		adds	r5, r5, #1
 5056              	.LVL456:
 5057              	.L462:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5058              		.loc 1 4538 0 is_stmt 0 discriminator 1
 5059 0056 4D45     		cmp	r5, r9
 5060 0058 EED2     		bcs	.L463
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 196


 5061              		.loc 1 4543 0 is_stmt 1
 5062 005a 05EBC503 		add	r3, r5, r5, lsl #3
 5063 005e 9C00     		lsls	r4, r3, #2
 5064 0060 4444     		add	r4, r4, r8
 5065 0062 A669     		ldr	r6, [r4, #24]
 5066 0064 019B     		ldr	r3, [sp, #4]
 5067 0066 B6FBF3F6 		udiv	r6, r6, r3
 5068              	.LVL457:
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5069              		.loc 1 4548 0
 5070 006a 6168     		ldr	r1, [r4, #4]
 5071 006c 3846     		mov	r0, r7
 5072 006e FFF7FEFF 		bl	prvWriteNameToBuffer
 5073              	.LVL458:
 5074 0072 0746     		mov	r7, r0
 5075              	.LVL459:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5076              		.loc 1 4550 0
 5077 0074 002E     		cmp	r6, #0
 5078 0076 E5D0     		beq	.L464
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 5079              		.loc 1 4560 0
 5080 0078 3346     		mov	r3, r6
 5081 007a A269     		ldr	r2, [r4, #24]
 5082 007c 0549     		ldr	r1, .L469+12
 5083 007e FFF7FEFF 		bl	sprintf
 5084              	.LVL460:
 5085 0082 E3E7     		b	.L465
 5086              	.LVL461:
 5087              	.L467:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5088              		.loc 1 4538 0
 5089 0084 0025     		movs	r5, #0
 5090 0086 E6E7     		b	.L462
 5091              	.L470:
 5092              		.align	2
 5093              	.L469:
 5094 0088 00000000 		.word	.LANCHOR9
 5095 008c 1F85EB51 		.word	1374389535
 5096 0090 0C000000 		.word	.LC3
 5097 0094 00000000 		.word	.LC2
 5098              		.cfi_endproc
 5099              	.LFE58:
 5101              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5102              		.align	1
 5103              		.global	uxTaskResetEventItemValue
 5104              		.syntax unified
 5105              		.thumb
 5106              		.thumb_func
 5107              		.fpu fpv4-sp-d16
 5109              	uxTaskResetEventItemValue:
 5110              	.LFB59:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 5111              		.loc 1 4603 0
 5112              		.cfi_startproc
 5113              		@ args = 0, pretend = 0, frame = 0
 5114              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 197


 5115              		@ link register save eliminated.
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5116              		.loc 1 4606 0
 5117 0000 044A     		ldr	r2, .L472
 5118 0002 1368     		ldr	r3, [r2]
 5119 0004 9869     		ldr	r0, [r3, #24]
 5120              	.LVL462:
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5121              		.loc 1 4610 0
 5122 0006 1368     		ldr	r3, [r2]
 5123 0008 DB6A     		ldr	r3, [r3, #44]
 5124 000a 1268     		ldr	r2, [r2]
 5125 000c C3F10703 		rsb	r3, r3, #7
 5126 0010 9361     		str	r3, [r2, #24]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5127              		.loc 1 4613 0
 5128 0012 7047     		bx	lr
 5129              	.L473:
 5130              		.align	2
 5131              	.L472:
 5132 0014 00000000 		.word	.LANCHOR10
 5133              		.cfi_endproc
 5134              	.LFE59:
 5136              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5137              		.align	1
 5138              		.global	pvTaskIncrementMutexHeldCount
 5139              		.syntax unified
 5140              		.thumb
 5141              		.thumb_func
 5142              		.fpu fpv4-sp-d16
 5144              	pvTaskIncrementMutexHeldCount:
 5145              	.LFB60:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5146              		.loc 1 4619 0
 5147              		.cfi_startproc
 5148              		@ args = 0, pretend = 0, frame = 0
 5149              		@ frame_needed = 0, uses_anonymous_args = 0
 5150              		@ link register save eliminated.
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5151              		.loc 1 4622 0
 5152 0000 054B     		ldr	r3, .L476
 5153 0002 1B68     		ldr	r3, [r3]
 5154 0004 23B1     		cbz	r3, .L475
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5155              		.loc 1 4624 0
 5156 0006 044B     		ldr	r3, .L476
 5157 0008 1A68     		ldr	r2, [r3]
 5158 000a 536D     		ldr	r3, [r2, #84]
 5159 000c 0133     		adds	r3, r3, #1
 5160 000e 5365     		str	r3, [r2, #84]
 5161              	.L475:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5162              		.loc 1 4627 0
 5163 0010 014B     		ldr	r3, .L476
 5164 0012 1868     		ldr	r0, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5165              		.loc 1 4628 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 198


 5166 0014 7047     		bx	lr
 5167              	.L477:
 5168 0016 00BF     		.align	2
 5169              	.L476:
 5170 0018 00000000 		.word	.LANCHOR10
 5171              		.cfi_endproc
 5172              	.LFE60:
 5174              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5175              		.align	1
 5176              		.global	ulTaskNotifyTake
 5177              		.syntax unified
 5178              		.thumb
 5179              		.thumb_func
 5180              		.fpu fpv4-sp-d16
 5182              	ulTaskNotifyTake:
 5183              	.LFB61:
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5184              		.loc 1 4636 0
 5185              		.cfi_startproc
 5186              		@ args = 0, pretend = 0, frame = 0
 5187              		@ frame_needed = 0, uses_anonymous_args = 0
 5188              	.LVL463:
 5189 0000 38B5     		push	{r3, r4, r5, lr}
 5190              	.LCFI55:
 5191              		.cfi_def_cfa_offset 16
 5192              		.cfi_offset 3, -16
 5193              		.cfi_offset 4, -12
 5194              		.cfi_offset 5, -8
 5195              		.cfi_offset 14, -4
 5196 0002 0546     		mov	r5, r0
 5197 0004 0C46     		mov	r4, r1
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5198              		.loc 1 4639 0
 5199 0006 FFF7FEFF 		bl	vPortEnterCritical
 5200              	.LVL464:
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5201              		.loc 1 4642 0
 5202 000a 194B     		ldr	r3, .L485
 5203 000c 1B68     		ldr	r3, [r3]
 5204 000e DB6D     		ldr	r3, [r3, #92]
 5205 0010 2BB9     		cbnz	r3, .L479
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5206              		.loc 1 4645 0
 5207 0012 174B     		ldr	r3, .L485
 5208 0014 1B68     		ldr	r3, [r3]
 5209 0016 0122     		movs	r2, #1
 5210 0018 83F86020 		strb	r2, [r3, #96]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5211              		.loc 1 4647 0
 5212 001c ACB9     		cbnz	r4, .L483
 5213              	.L479:
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5214              		.loc 1 4668 0
 5215 001e FFF7FEFF 		bl	vPortExitCritical
 5216              	.LVL465:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5217              		.loc 1 4670 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 199


 5218 0022 FFF7FEFF 		bl	vPortEnterCritical
 5219              	.LVL466:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5220              		.loc 1 4673 0
 5221 0026 124B     		ldr	r3, .L485
 5222 0028 1B68     		ldr	r3, [r3]
 5223 002a DC6D     		ldr	r4, [r3, #92]
 5224              	.LVL467:
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5225              		.loc 1 4675 0
 5226 002c 24B1     		cbz	r4, .L480
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5227              		.loc 1 4677 0
 5228 002e CDB9     		cbnz	r5, .L484
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5229              		.loc 1 4683 0
 5230 0030 0F4B     		ldr	r3, .L485
 5231 0032 1B68     		ldr	r3, [r3]
 5232 0034 621E     		subs	r2, r4, #1
 5233 0036 DA65     		str	r2, [r3, #92]
 5234              	.L480:
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5235              		.loc 1 4691 0
 5236 0038 0D4B     		ldr	r3, .L485
 5237 003a 1B68     		ldr	r3, [r3]
 5238 003c 0022     		movs	r2, #0
 5239 003e 83F86020 		strb	r2, [r3, #96]
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5240              		.loc 1 4693 0
 5241 0042 FFF7FEFF 		bl	vPortExitCritical
 5242              	.LVL468:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5243              		.loc 1 4696 0
 5244 0046 2046     		mov	r0, r4
 5245 0048 38BD     		pop	{r3, r4, r5, pc}
 5246              	.LVL469:
 5247              	.L483:
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5248              		.loc 1 4649 0
 5249 004a 1146     		mov	r1, r2
 5250 004c 2046     		mov	r0, r4
 5251 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5252              	.LVL470:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5253              		.loc 1 4656 0
 5254 0052 084B     		ldr	r3, .L485+4
 5255 0054 4FF08052 		mov	r2, #268435456
 5256 0058 1A60     		str	r2, [r3]
 5257              		.syntax unified
 5258              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5259 005a BFF34F8F 		dsb
 5260              	@ 0 "" 2
 5261              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5262 005e BFF36F8F 		isb
 5263              	@ 0 "" 2
 5264              		.thumb
 5265              		.syntax unified
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 200


 5266 0062 DCE7     		b	.L479
 5267              	.LVL471:
 5268              	.L484:
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5269              		.loc 1 4679 0
 5270 0064 024B     		ldr	r3, .L485
 5271 0066 1B68     		ldr	r3, [r3]
 5272 0068 0022     		movs	r2, #0
 5273 006a DA65     		str	r2, [r3, #92]
 5274 006c E4E7     		b	.L480
 5275              	.L486:
 5276 006e 00BF     		.align	2
 5277              	.L485:
 5278 0070 00000000 		.word	.LANCHOR10
 5279 0074 04ED00E0 		.word	-536810236
 5280              		.cfi_endproc
 5281              	.LFE61:
 5283              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5284              		.align	1
 5285              		.global	xTaskNotifyWait
 5286              		.syntax unified
 5287              		.thumb
 5288              		.thumb_func
 5289              		.fpu fpv4-sp-d16
 5291              	xTaskNotifyWait:
 5292              	.LFB62:
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5293              		.loc 1 4704 0
 5294              		.cfi_startproc
 5295              		@ args = 0, pretend = 0, frame = 0
 5296              		@ frame_needed = 0, uses_anonymous_args = 0
 5297              	.LVL472:
 5298 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5299              	.LCFI56:
 5300              		.cfi_def_cfa_offset 24
 5301              		.cfi_offset 3, -24
 5302              		.cfi_offset 4, -20
 5303              		.cfi_offset 5, -16
 5304              		.cfi_offset 6, -12
 5305              		.cfi_offset 7, -8
 5306              		.cfi_offset 14, -4
 5307 0002 0746     		mov	r7, r0
 5308 0004 0D46     		mov	r5, r1
 5309 0006 1446     		mov	r4, r2
 5310 0008 1E46     		mov	r6, r3
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5311              		.loc 1 4707 0
 5312 000a FFF7FEFF 		bl	vPortEnterCritical
 5313              	.LVL473:
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5314              		.loc 1 4710 0
 5315 000e 204B     		ldr	r3, .L495
 5316 0010 1B68     		ldr	r3, [r3]
 5317 0012 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 5318 0016 DBB2     		uxtb	r3, r3
 5319 0018 022B     		cmp	r3, #2
 5320 001a 0AD0     		beq	.L488
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 201


4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5321              		.loc 1 4715 0
 5322 001c 1C4B     		ldr	r3, .L495
 5323 001e 1A68     		ldr	r2, [r3]
 5324 0020 D06D     		ldr	r0, [r2, #92]
 5325 0022 20EA0700 		bic	r0, r0, r7
 5326 0026 D065     		str	r0, [r2, #92]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5327              		.loc 1 4718 0
 5328 0028 1B68     		ldr	r3, [r3]
 5329 002a 0122     		movs	r2, #1
 5330 002c 83F86020 		strb	r2, [r3, #96]
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5331              		.loc 1 4720 0
 5332 0030 CEB9     		cbnz	r6, .L493
 5333              	.L488:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5334              		.loc 1 4741 0
 5335 0032 FFF7FEFF 		bl	vPortExitCritical
 5336              	.LVL474:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5337              		.loc 1 4743 0
 5338 0036 FFF7FEFF 		bl	vPortEnterCritical
 5339              	.LVL475:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5340              		.loc 1 4747 0
 5341 003a 1CB1     		cbz	r4, .L489
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5342              		.loc 1 4751 0
 5343 003c 144B     		ldr	r3, .L495
 5344 003e 1B68     		ldr	r3, [r3]
 5345 0040 DB6D     		ldr	r3, [r3, #92]
 5346 0042 2360     		str	r3, [r4]
 5347              	.L489:
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5348              		.loc 1 4758 0
 5349 0044 124B     		ldr	r3, .L495
 5350 0046 1B68     		ldr	r3, [r3]
 5351 0048 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 5352 004c DBB2     		uxtb	r3, r3
 5353 004e 022B     		cmp	r3, #2
 5354 0050 16D0     		beq	.L494
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5355              		.loc 1 4761 0
 5356 0052 0024     		movs	r4, #0
 5357              	.LVL476:
 5358              	.L490:
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5359              		.loc 1 4771 0
 5360 0054 0E4B     		ldr	r3, .L495
 5361 0056 1B68     		ldr	r3, [r3]
 5362 0058 0022     		movs	r2, #0
 5363 005a 83F86020 		strb	r2, [r3, #96]
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5364              		.loc 1 4773 0
 5365 005e FFF7FEFF 		bl	vPortExitCritical
 5366              	.LVL477:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 202


4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5367              		.loc 1 4776 0
 5368 0062 2046     		mov	r0, r4
 5369 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5370              	.LVL478:
 5371              	.L493:
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5372              		.loc 1 4722 0
 5373 0066 1146     		mov	r1, r2
 5374 0068 3046     		mov	r0, r6
 5375 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5376              	.LVL479:
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5377              		.loc 1 4729 0
 5378 006e 094B     		ldr	r3, .L495+4
 5379 0070 4FF08052 		mov	r2, #268435456
 5380 0074 1A60     		str	r2, [r3]
 5381              		.syntax unified
 5382              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5383 0076 BFF34F8F 		dsb
 5384              	@ 0 "" 2
 5385              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5386 007a BFF36F8F 		isb
 5387              	@ 0 "" 2
 5388              		.thumb
 5389              		.syntax unified
 5390 007e D8E7     		b	.L488
 5391              	.L494:
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5392              		.loc 1 4767 0
 5393 0080 034B     		ldr	r3, .L495
 5394 0082 1A68     		ldr	r2, [r3]
 5395 0084 D36D     		ldr	r3, [r2, #92]
 5396 0086 23EA0505 		bic	r5, r3, r5
 5397              	.LVL480:
 5398 008a D565     		str	r5, [r2, #92]
 5399              	.LVL481:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5400              		.loc 1 4768 0
 5401 008c 0124     		movs	r4, #1
 5402              	.LVL482:
 5403 008e E1E7     		b	.L490
 5404              	.L496:
 5405              		.align	2
 5406              	.L495:
 5407 0090 00000000 		.word	.LANCHOR10
 5408 0094 04ED00E0 		.word	-536810236
 5409              		.cfi_endproc
 5410              	.LFE62:
 5412              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5413              		.align	1
 5414              		.global	xTaskGenericNotify
 5415              		.syntax unified
 5416              		.thumb
 5417              		.thumb_func
 5418              		.fpu fpv4-sp-d16
 5420              	xTaskGenericNotify:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 203


 5421              	.LFB63:
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5422              		.loc 1 4784 0
 5423              		.cfi_startproc
 5424              		@ args = 0, pretend = 0, frame = 0
 5425              		@ frame_needed = 0, uses_anonymous_args = 0
 5426              	.LVL483:
 5427 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5428              	.LCFI57:
 5429              		.cfi_def_cfa_offset 24
 5430              		.cfi_offset 3, -24
 5431              		.cfi_offset 4, -20
 5432              		.cfi_offset 5, -16
 5433              		.cfi_offset 6, -12
 5434              		.cfi_offset 7, -8
 5435              		.cfi_offset 14, -4
 5436              	.LVL484:
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5437              		.loc 1 4789 0
 5438 0002 40B9     		cbnz	r0, .L498
 5439              	.LBB191:
 5440              	.LBB192:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5441              		.loc 2 195 0
 5442              		.syntax unified
 5443              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5444 0004 4FF05003 			mov r3, #80												
 5445 0008 83F31188 		msr basepri, r3											
 5446 000c BFF36F8F 		isb														
 5447 0010 BFF34F8F 		dsb														
 5448              	
 5449              	@ 0 "" 2
 5450              	.LVL485:
 5451              		.thumb
 5452              		.syntax unified
 5453              	.L499:
 5454 0014 FEE7     		b	.L499
 5455              	.LVL486:
 5456              	.L498:
 5457 0016 0446     		mov	r4, r0
 5458 0018 1F46     		mov	r7, r3
 5459 001a 1646     		mov	r6, r2
 5460 001c 0D46     		mov	r5, r1
 5461              	.LVL487:
 5462              	.LBE192:
 5463              	.LBE191:
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5464              		.loc 1 4792 0
 5465 001e FFF7FEFF 		bl	vPortEnterCritical
 5466              	.LVL488:
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5467              		.loc 1 4794 0
 5468 0022 0FB1     		cbz	r7, .L500
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5469              		.loc 1 4796 0
 5470 0024 E36D     		ldr	r3, [r4, #92]
 5471 0026 3B60     		str	r3, [r7]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 204


 5472              	.L500:
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5473              		.loc 1 4799 0
 5474 0028 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 5475 002c DBB2     		uxtb	r3, r3
 5476              	.LVL489:
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5477              		.loc 1 4801 0
 5478 002e 0222     		movs	r2, #2
 5479 0030 84F86020 		strb	r2, [r4, #96]
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5480              		.loc 1 4803 0
 5481 0034 042E     		cmp	r6, #4
 5482 0036 1BD8     		bhi	.L501
 5483 0038 DFE806F0 		tbb	[pc, r6]
 5484              	.L503:
 5485 003c 27       		.byte	(.L512-.L503)/2
 5486 003d 03       		.byte	(.L504-.L503)/2
 5487 003e 0D       		.byte	(.L505-.L503)/2
 5488 003f 12       		.byte	(.L506-.L503)/2
 5489 0040 15       		.byte	(.L507-.L503)/2
 5490 0041 00       		.p2align 1
 5491              	.L504:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5492              		.loc 1 4806 0
 5493 0042 E26D     		ldr	r2, [r4, #92]
 5494 0044 1543     		orrs	r5, r5, r2
 5495              	.LVL490:
 5496 0046 E565     		str	r5, [r4, #92]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5497              		.loc 1 4786 0
 5498 0048 0125     		movs	r5, #1
 5499              	.L502:
 5500              	.LVL491:
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5501              		.loc 1 4847 0
 5502 004a 012B     		cmp	r3, #1
 5503 004c 23D0     		beq	.L516
 5504              	.LVL492:
 5505              	.L509:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5506              		.loc 1 4887 0
 5507 004e FFF7FEFF 		bl	vPortExitCritical
 5508              	.LVL493:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5509              		.loc 1 4890 0
 5510 0052 2846     		mov	r0, r5
 5511 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5512              	.LVL494:
 5513              	.L505:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5514              		.loc 1 4810 0
 5515 0056 E26D     		ldr	r2, [r4, #92]
 5516 0058 0132     		adds	r2, r2, #1
 5517 005a E265     		str	r2, [r4, #92]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5518              		.loc 1 4786 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 205


 5519 005c 0125     		movs	r5, #1
 5520              	.LVL495:
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5521              		.loc 1 4811 0
 5522 005e F4E7     		b	.L502
 5523              	.LVL496:
 5524              	.L506:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5525              		.loc 1 4814 0
 5526 0060 E565     		str	r5, [r4, #92]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5527              		.loc 1 4786 0
 5528 0062 0125     		movs	r5, #1
 5529              	.LVL497:
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5530              		.loc 1 4815 0
 5531 0064 F1E7     		b	.L502
 5532              	.LVL498:
 5533              	.L507:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5534              		.loc 1 4818 0
 5535 0066 022B     		cmp	r3, #2
 5536 0068 11D0     		beq	.L513
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5537              		.loc 1 4820 0
 5538 006a E565     		str	r5, [r4, #92]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5539              		.loc 1 4786 0
 5540 006c 0125     		movs	r5, #1
 5541              	.LVL499:
 5542 006e ECE7     		b	.L502
 5543              	.LVL500:
 5544              	.L501:
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5545              		.loc 1 4838 0
 5546 0070 E26D     		ldr	r2, [r4, #92]
 5547 0072 B2F1FF3F 		cmp	r2, #-1
 5548 0076 0CD0     		beq	.L514
 5549              	.LBB193:
 5550              	.LBB194:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5551              		.loc 2 195 0
 5552              		.syntax unified
 5553              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5554 0078 4FF05003 			mov r3, #80												
 5555 007c 83F31188 		msr basepri, r3											
 5556 0080 BFF36F8F 		isb														
 5557 0084 BFF34F8F 		dsb														
 5558              	
 5559              	@ 0 "" 2
 5560              	.LVL501:
 5561              		.thumb
 5562              		.syntax unified
 5563              	.L508:
 5564 0088 FEE7     		b	.L508
 5565              	.LVL502:
 5566              	.L512:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 206


 5567              	.LBE194:
 5568              	.LBE193:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5569              		.loc 1 4786 0
 5570 008a 0125     		movs	r5, #1
 5571              	.LVL503:
 5572 008c DDE7     		b	.L502
 5573              	.LVL504:
 5574              	.L513:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5575              		.loc 1 4825 0
 5576 008e 0025     		movs	r5, #0
 5577              	.LVL505:
 5578 0090 DBE7     		b	.L502
 5579              	.LVL506:
 5580              	.L514:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5581              		.loc 1 4786 0
 5582 0092 0125     		movs	r5, #1
 5583              	.LVL507:
 5584 0094 D9E7     		b	.L502
 5585              	.LVL508:
 5586              	.L516:
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5587              		.loc 1 4849 0
 5588 0096 261D     		adds	r6, r4, #4
 5589 0098 3046     		mov	r0, r6
 5590 009a FFF7FEFF 		bl	uxListRemove
 5591              	.LVL509:
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5592              		.loc 1 4850 0
 5593 009e E26A     		ldr	r2, [r4, #44]
 5594 00a0 0123     		movs	r3, #1
 5595 00a2 9340     		lsls	r3, r3, r2
 5596 00a4 1249     		ldr	r1, .L517
 5597 00a6 0868     		ldr	r0, [r1]
 5598 00a8 0343     		orrs	r3, r3, r0
 5599 00aa 0B60     		str	r3, [r1]
 5600 00ac 3146     		mov	r1, r6
 5601 00ae 114B     		ldr	r3, .L517+4
 5602 00b0 1420     		movs	r0, #20
 5603 00b2 00FB0230 		mla	r0, r0, r2, r3
 5604 00b6 FFF7FEFF 		bl	vListInsertEnd
 5605              	.LVL510:
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5606              		.loc 1 4853 0
 5607 00ba A36A     		ldr	r3, [r4, #40]
 5608 00bc 43B1     		cbz	r3, .L510
 5609              	.LBB195:
 5610              	.LBB196:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5611              		.loc 2 195 0
 5612              		.syntax unified
 5613              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5614 00be 4FF05003 			mov r3, #80												
 5615 00c2 83F31188 		msr basepri, r3											
 5616 00c6 BFF36F8F 		isb														
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 207


 5617 00ca BFF34F8F 		dsb														
 5618              	
 5619              	@ 0 "" 2
 5620              	.LVL511:
 5621              		.thumb
 5622              		.syntax unified
 5623              	.L511:
 5624 00ce FEE7     		b	.L511
 5625              	.L510:
 5626              	.LBE196:
 5627              	.LBE195:
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5628              		.loc 1 4871 0
 5629 00d0 E26A     		ldr	r2, [r4, #44]
 5630 00d2 094B     		ldr	r3, .L517+8
 5631 00d4 1B68     		ldr	r3, [r3]
 5632 00d6 DB6A     		ldr	r3, [r3, #44]
 5633 00d8 9A42     		cmp	r2, r3
 5634 00da B8D9     		bls	.L509
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5635              		.loc 1 4875 0
 5636 00dc 074B     		ldr	r3, .L517+12
 5637 00de 4FF08052 		mov	r2, #268435456
 5638 00e2 1A60     		str	r2, [r3]
 5639              		.syntax unified
 5640              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5641 00e4 BFF34F8F 		dsb
 5642              	@ 0 "" 2
 5643              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5644 00e8 BFF36F8F 		isb
 5645              	@ 0 "" 2
 5646              		.thumb
 5647              		.syntax unified
 5648 00ec AFE7     		b	.L509
 5649              	.L518:
 5650 00ee 00BF     		.align	2
 5651              	.L517:
 5652 00f0 00000000 		.word	.LANCHOR13
 5653 00f4 00000000 		.word	.LANCHOR4
 5654 00f8 00000000 		.word	.LANCHOR10
 5655 00fc 04ED00E0 		.word	-536810236
 5656              		.cfi_endproc
 5657              	.LFE63:
 5659              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5660              		.align	1
 5661              		.global	xTaskGenericNotifyFromISR
 5662              		.syntax unified
 5663              		.thumb
 5664              		.thumb_func
 5665              		.fpu fpv4-sp-d16
 5667              	xTaskGenericNotifyFromISR:
 5668              	.LFB64:
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5669              		.loc 1 4898 0
 5670              		.cfi_startproc
 5671              		@ args = 4, pretend = 0, frame = 0
 5672              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 208


 5673              	.LVL512:
 5674 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5675              	.LCFI58:
 5676              		.cfi_def_cfa_offset 32
 5677              		.cfi_offset 3, -32
 5678              		.cfi_offset 4, -28
 5679              		.cfi_offset 5, -24
 5680              		.cfi_offset 6, -20
 5681              		.cfi_offset 7, -16
 5682              		.cfi_offset 8, -12
 5683              		.cfi_offset 9, -8
 5684              		.cfi_offset 14, -4
 5685 0004 089E     		ldr	r6, [sp, #32]
 5686              	.LVL513:
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5687              		.loc 1 4904 0
 5688 0006 40B9     		cbnz	r0, .L520
 5689              	.LBB197:
 5690              	.LBB198:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5691              		.loc 2 195 0
 5692              		.syntax unified
 5693              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5694 0008 4FF05003 			mov r3, #80												
 5695 000c 83F31188 		msr basepri, r3											
 5696 0010 BFF36F8F 		isb														
 5697 0014 BFF34F8F 		dsb														
 5698              	
 5699              	@ 0 "" 2
 5700              	.LVL514:
 5701              		.thumb
 5702              		.syntax unified
 5703              	.L521:
 5704 0018 FEE7     		b	.L521
 5705              	.LVL515:
 5706              	.L520:
 5707 001a 0446     		mov	r4, r0
 5708 001c 9946     		mov	r9, r3
 5709 001e 9046     		mov	r8, r2
 5710 0020 0D46     		mov	r5, r1
 5711              	.LBE198:
 5712              	.LBE197:
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5713              		.loc 1 4922 0
 5714 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5715              	.LVL516:
 5716              	.LBB199:
 5717              	.LBB200:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5718              		.loc 2 211 0
 5719              		.syntax unified
 5720              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5721 0026 EFF31187 			mrs r7, basepri											
 5722 002a 4FF05003 		mov r3, #80												
 5723 002e 83F31188 		msr basepri, r3											
 5724 0032 BFF36F8F 		isb														
 5725 0036 BFF34F8F 		dsb														
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 209


 5726              	
 5727              	@ 0 "" 2
 5728              		.thumb
 5729              		.syntax unified
 5730              	.LBE200:
 5731              	.LBE199:
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5732              		.loc 1 4928 0
 5733 003a B9F1000F 		cmp	r9, #0
 5734 003e 02D0     		beq	.L522
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5735              		.loc 1 4930 0
 5736 0040 E36D     		ldr	r3, [r4, #92]
 5737 0042 C9F80030 		str	r3, [r9]
 5738              	.L522:
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5739              		.loc 1 4933 0
 5740 0046 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 5741 004a DBB2     		uxtb	r3, r3
 5742              	.LVL517:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5743              		.loc 1 4934 0
 5744 004c 0222     		movs	r2, #2
 5745 004e 84F86020 		strb	r2, [r4, #96]
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5746              		.loc 1 4936 0
 5747 0052 B8F1040F 		cmp	r8, #4
 5748 0056 1CD8     		bhi	.L523
 5749 0058 DFE808F0 		tbb	[pc, r8]
 5750              	.L525:
 5751 005c 28       		.byte	(.L537-.L525)/2
 5752 005d 03       		.byte	(.L526-.L525)/2
 5753 005e 0E       		.byte	(.L527-.L525)/2
 5754 005f 13       		.byte	(.L528-.L525)/2
 5755 0060 16       		.byte	(.L529-.L525)/2
 5756 0061 00       		.p2align 1
 5757              	.L526:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5758              		.loc 1 4939 0
 5759 0062 E26D     		ldr	r2, [r4, #92]
 5760 0064 1543     		orrs	r5, r5, r2
 5761              	.LVL518:
 5762 0066 E565     		str	r5, [r4, #92]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5763              		.loc 1 4901 0
 5764 0068 0125     		movs	r5, #1
 5765              	.L524:
 5766              	.LVL519:
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5767              		.loc 1 4979 0
 5768 006a 012B     		cmp	r3, #1
 5769 006c 24D0     		beq	.L541
 5770              	.LVL520:
 5771              	.L531:
 5772              	.LBB201:
 5773              	.LBB202:
 5774              		.loc 2 229 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 210


 5775              		.syntax unified
 5776              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5777 006e 87F31188 			msr basepri, r7	
 5778              	@ 0 "" 2
 5779              	.LVL521:
 5780              		.thumb
 5781              		.syntax unified
 5782              	.LBE202:
 5783              	.LBE201:
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5784              		.loc 1 5019 0
 5785 0072 2846     		mov	r0, r5
 5786 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5787              	.LVL522:
 5788              	.L527:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5789              		.loc 1 4943 0
 5790 0078 E26D     		ldr	r2, [r4, #92]
 5791 007a 0132     		adds	r2, r2, #1
 5792 007c E265     		str	r2, [r4, #92]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5793              		.loc 1 4901 0
 5794 007e 0125     		movs	r5, #1
 5795              	.LVL523:
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5796              		.loc 1 4944 0
 5797 0080 F3E7     		b	.L524
 5798              	.LVL524:
 5799              	.L528:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5800              		.loc 1 4947 0
 5801 0082 E565     		str	r5, [r4, #92]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5802              		.loc 1 4901 0
 5803 0084 0125     		movs	r5, #1
 5804              	.LVL525:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5805              		.loc 1 4948 0
 5806 0086 F0E7     		b	.L524
 5807              	.LVL526:
 5808              	.L529:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5809              		.loc 1 4951 0
 5810 0088 022B     		cmp	r3, #2
 5811 008a 11D0     		beq	.L538
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5812              		.loc 1 4953 0
 5813 008c E565     		str	r5, [r4, #92]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5814              		.loc 1 4901 0
 5815 008e 0125     		movs	r5, #1
 5816              	.LVL527:
 5817 0090 EBE7     		b	.L524
 5818              	.LVL528:
 5819              	.L523:
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5820              		.loc 1 4971 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 211


 5821 0092 E26D     		ldr	r2, [r4, #92]
 5822 0094 B2F1FF3F 		cmp	r2, #-1
 5823 0098 0CD0     		beq	.L539
 5824              	.LBB203:
 5825              	.LBB204:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5826              		.loc 2 195 0
 5827              		.syntax unified
 5828              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5829 009a 4FF05003 			mov r3, #80												
 5830 009e 83F31188 		msr basepri, r3											
 5831 00a2 BFF36F8F 		isb														
 5832 00a6 BFF34F8F 		dsb														
 5833              	
 5834              	@ 0 "" 2
 5835              	.LVL529:
 5836              		.thumb
 5837              		.syntax unified
 5838              	.L530:
 5839 00aa FEE7     		b	.L530
 5840              	.LVL530:
 5841              	.L537:
 5842              	.LBE204:
 5843              	.LBE203:
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5844              		.loc 1 4901 0
 5845 00ac 0125     		movs	r5, #1
 5846              	.LVL531:
 5847 00ae DCE7     		b	.L524
 5848              	.LVL532:
 5849              	.L538:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5850              		.loc 1 4958 0
 5851 00b0 0025     		movs	r5, #0
 5852              	.LVL533:
 5853 00b2 DAE7     		b	.L524
 5854              	.LVL534:
 5855              	.L539:
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5856              		.loc 1 4901 0
 5857 00b4 0125     		movs	r5, #1
 5858              	.LVL535:
 5859 00b6 D8E7     		b	.L524
 5860              	.LVL536:
 5861              	.L541:
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5862              		.loc 1 4982 0
 5863 00b8 A36A     		ldr	r3, [r4, #40]
 5864              	.LVL537:
 5865 00ba 43B1     		cbz	r3, .L532
 5866              	.LBB205:
 5867              	.LBB206:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5868              		.loc 2 195 0
 5869              		.syntax unified
 5870              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5871 00bc 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 212


 5872 00c0 83F31188 		msr basepri, r3											
 5873 00c4 BFF36F8F 		isb														
 5874 00c8 BFF34F8F 		dsb														
 5875              	
 5876              	@ 0 "" 2
 5877              	.LVL538:
 5878              		.thumb
 5879              		.syntax unified
 5880              	.L533:
 5881 00cc FEE7     		b	.L533
 5882              	.L532:
 5883              	.LBE206:
 5884              	.LBE205:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5885              		.loc 1 4984 0
 5886 00ce 144B     		ldr	r3, .L542
 5887 00d0 1B68     		ldr	r3, [r3]
 5888 00d2 FBB9     		cbnz	r3, .L534
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5889              		.loc 1 4986 0
 5890 00d4 04F10408 		add	r8, r4, #4
 5891 00d8 4046     		mov	r0, r8
 5892 00da FFF7FEFF 		bl	uxListRemove
 5893              	.LVL539:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5894              		.loc 1 4987 0
 5895 00de E26A     		ldr	r2, [r4, #44]
 5896 00e0 0123     		movs	r3, #1
 5897 00e2 9340     		lsls	r3, r3, r2
 5898 00e4 0F49     		ldr	r1, .L542+4
 5899 00e6 0868     		ldr	r0, [r1]
 5900 00e8 0343     		orrs	r3, r3, r0
 5901 00ea 0B60     		str	r3, [r1]
 5902 00ec 4146     		mov	r1, r8
 5903 00ee 0E4B     		ldr	r3, .L542+8
 5904 00f0 1420     		movs	r0, #20
 5905 00f2 00FB0230 		mla	r0, r0, r2, r3
 5906 00f6 FFF7FEFF 		bl	vListInsertEnd
 5907              	.LVL540:
 5908              	.L535:
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5909              		.loc 1 4996 0
 5910 00fa E26A     		ldr	r2, [r4, #44]
 5911 00fc 0B4B     		ldr	r3, .L542+12
 5912 00fe 1B68     		ldr	r3, [r3]
 5913 0100 DB6A     		ldr	r3, [r3, #44]
 5914 0102 9A42     		cmp	r2, r3
 5915 0104 B3D9     		bls	.L531
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5916              		.loc 1 5000 0
 5917 0106 0EB1     		cbz	r6, .L536
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5918              		.loc 1 5002 0
 5919 0108 0123     		movs	r3, #1
 5920 010a 3360     		str	r3, [r6]
 5921              	.L536:
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 213


 5922              		.loc 1 5008 0
 5923 010c 084B     		ldr	r3, .L542+16
 5924 010e 0122     		movs	r2, #1
 5925 0110 1A60     		str	r2, [r3]
 5926 0112 ACE7     		b	.L531
 5927              	.L534:
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5928              		.loc 1 4993 0
 5929 0114 04F11801 		add	r1, r4, #24
 5930 0118 0648     		ldr	r0, .L542+20
 5931 011a FFF7FEFF 		bl	vListInsertEnd
 5932              	.LVL541:
 5933 011e ECE7     		b	.L535
 5934              	.L543:
 5935              		.align	2
 5936              	.L542:
 5937 0120 00000000 		.word	.LANCHOR16
 5938 0124 00000000 		.word	.LANCHOR13
 5939 0128 00000000 		.word	.LANCHOR4
 5940 012c 00000000 		.word	.LANCHOR10
 5941 0130 00000000 		.word	.LANCHOR19
 5942 0134 00000000 		.word	.LANCHOR1
 5943              		.cfi_endproc
 5944              	.LFE64:
 5946              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5947              		.align	1
 5948              		.global	vTaskNotifyGiveFromISR
 5949              		.syntax unified
 5950              		.thumb
 5951              		.thumb_func
 5952              		.fpu fpv4-sp-d16
 5954              	vTaskNotifyGiveFromISR:
 5955              	.LFB65:
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5956              		.loc 1 5027 0
 5957              		.cfi_startproc
 5958              		@ args = 0, pretend = 0, frame = 0
 5959              		@ frame_needed = 0, uses_anonymous_args = 0
 5960              	.LVL542:
 5961 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5962              	.LCFI59:
 5963              		.cfi_def_cfa_offset 24
 5964              		.cfi_offset 3, -24
 5965              		.cfi_offset 4, -20
 5966              		.cfi_offset 5, -16
 5967              		.cfi_offset 6, -12
 5968              		.cfi_offset 7, -8
 5969              		.cfi_offset 14, -4
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5970              		.loc 1 5032 0
 5971 0002 40B9     		cbnz	r0, .L545
 5972              	.LBB207:
 5973              	.LBB208:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5974              		.loc 2 195 0
 5975              		.syntax unified
 5976              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 214


 5977 0004 4FF05003 			mov r3, #80												
 5978 0008 83F31188 		msr basepri, r3											
 5979 000c BFF36F8F 		isb														
 5980 0010 BFF34F8F 		dsb														
 5981              	
 5982              	@ 0 "" 2
 5983              	.LVL543:
 5984              		.thumb
 5985              		.syntax unified
 5986              	.L546:
 5987 0014 FEE7     		b	.L546
 5988              	.L545:
 5989 0016 0446     		mov	r4, r0
 5990 0018 0D46     		mov	r5, r1
 5991              	.LBE208:
 5992              	.LBE207:
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5993              		.loc 1 5050 0
 5994 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 5995              	.LVL544:
 5996              	.LBB209:
 5997              	.LBB210:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5998              		.loc 2 211 0
 5999              		.syntax unified
 6000              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6001 001e EFF31186 			mrs r6, basepri											
 6002 0022 4FF05003 		mov r3, #80												
 6003 0026 83F31188 		msr basepri, r3											
 6004 002a BFF36F8F 		isb														
 6005 002e BFF34F8F 		dsb														
 6006              	
 6007              	@ 0 "" 2
 6008              		.thumb
 6009              		.syntax unified
 6010              	.LBE210:
 6011              	.LBE209:
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6012              		.loc 1 5056 0
 6013 0032 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 6014 0036 DBB2     		uxtb	r3, r3
 6015              	.LVL545:
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6016              		.loc 1 5057 0
 6017 0038 0222     		movs	r2, #2
 6018 003a 84F86020 		strb	r2, [r4, #96]
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6019              		.loc 1 5061 0
 6020 003e E26D     		ldr	r2, [r4, #92]
 6021 0040 0132     		adds	r2, r2, #1
 6022 0042 E265     		str	r2, [r4, #92]
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6023              		.loc 1 5067 0
 6024 0044 012B     		cmp	r3, #1
 6025 0046 02D0     		beq	.L554
 6026              	.LVL546:
 6027              	.L547:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 215


 6028              	.LBB211:
 6029              	.LBB212:
 6030              		.loc 2 229 0
 6031              		.syntax unified
 6032              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6033 0048 86F31188 			msr basepri, r6	
 6034              	@ 0 "" 2
 6035              	.LVL547:
 6036              		.thumb
 6037              		.syntax unified
 6038              	.LBE212:
 6039              	.LBE211:
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6040              		.loc 1 5105 0
 6041 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6042              	.LVL548:
 6043              	.L554:
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6044              		.loc 1 5070 0
 6045 004e A36A     		ldr	r3, [r4, #40]
 6046              	.LVL549:
 6047 0050 43B1     		cbz	r3, .L548
 6048              	.LBB213:
 6049              	.LBB214:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6050              		.loc 2 195 0
 6051              		.syntax unified
 6052              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6053 0052 4FF05003 			mov r3, #80												
 6054 0056 83F31188 		msr basepri, r3											
 6055 005a BFF36F8F 		isb														
 6056 005e BFF34F8F 		dsb														
 6057              	
 6058              	@ 0 "" 2
 6059              	.LVL550:
 6060              		.thumb
 6061              		.syntax unified
 6062              	.L549:
 6063 0062 FEE7     		b	.L549
 6064              	.L548:
 6065              	.LBE214:
 6066              	.LBE213:
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6067              		.loc 1 5072 0
 6068 0064 134B     		ldr	r3, .L555
 6069 0066 1B68     		ldr	r3, [r3]
 6070 0068 F3B9     		cbnz	r3, .L550
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6071              		.loc 1 5074 0
 6072 006a 271D     		adds	r7, r4, #4
 6073 006c 3846     		mov	r0, r7
 6074 006e FFF7FEFF 		bl	uxListRemove
 6075              	.LVL551:
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6076              		.loc 1 5075 0
 6077 0072 E26A     		ldr	r2, [r4, #44]
 6078 0074 0123     		movs	r3, #1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 216


 6079 0076 9340     		lsls	r3, r3, r2
 6080 0078 0F49     		ldr	r1, .L555+4
 6081 007a 0868     		ldr	r0, [r1]
 6082 007c 0343     		orrs	r3, r3, r0
 6083 007e 0B60     		str	r3, [r1]
 6084 0080 3946     		mov	r1, r7
 6085 0082 0E4B     		ldr	r3, .L555+8
 6086 0084 1420     		movs	r0, #20
 6087 0086 00FB0230 		mla	r0, r0, r2, r3
 6088 008a FFF7FEFF 		bl	vListInsertEnd
 6089              	.LVL552:
 6090              	.L551:
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6091              		.loc 1 5084 0
 6092 008e E26A     		ldr	r2, [r4, #44]
 6093 0090 0B4B     		ldr	r3, .L555+12
 6094 0092 1B68     		ldr	r3, [r3]
 6095 0094 DB6A     		ldr	r3, [r3, #44]
 6096 0096 9A42     		cmp	r2, r3
 6097 0098 D6D9     		bls	.L547
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6098              		.loc 1 5088 0
 6099 009a 0DB1     		cbz	r5, .L552
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6100              		.loc 1 5090 0
 6101 009c 0123     		movs	r3, #1
 6102 009e 2B60     		str	r3, [r5]
 6103              	.L552:
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6104              		.loc 1 5096 0
 6105 00a0 084B     		ldr	r3, .L555+16
 6106 00a2 0122     		movs	r2, #1
 6107 00a4 1A60     		str	r2, [r3]
 6108 00a6 CFE7     		b	.L547
 6109              	.L550:
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6110              		.loc 1 5081 0
 6111 00a8 04F11801 		add	r1, r4, #24
 6112 00ac 0648     		ldr	r0, .L555+20
 6113 00ae FFF7FEFF 		bl	vListInsertEnd
 6114              	.LVL553:
 6115 00b2 ECE7     		b	.L551
 6116              	.L556:
 6117              		.align	2
 6118              	.L555:
 6119 00b4 00000000 		.word	.LANCHOR16
 6120 00b8 00000000 		.word	.LANCHOR13
 6121 00bc 00000000 		.word	.LANCHOR4
 6122 00c0 00000000 		.word	.LANCHOR10
 6123 00c4 00000000 		.word	.LANCHOR19
 6124 00c8 00000000 		.word	.LANCHOR1
 6125              		.cfi_endproc
 6126              	.LFE65:
 6128              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6129              		.align	1
 6130              		.global	xTaskNotifyStateClear
 6131              		.syntax unified
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 217


 6132              		.thumb
 6133              		.thumb_func
 6134              		.fpu fpv4-sp-d16
 6136              	xTaskNotifyStateClear:
 6137              	.LFB66:
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6138              		.loc 1 5113 0
 6139              		.cfi_startproc
 6140              		@ args = 0, pretend = 0, frame = 0
 6141              		@ frame_needed = 0, uses_anonymous_args = 0
 6142              	.LVL554:
 6143 0000 10B5     		push	{r4, lr}
 6144              	.LCFI60:
 6145              		.cfi_def_cfa_offset 8
 6146              		.cfi_offset 4, -8
 6147              		.cfi_offset 14, -4
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6148              		.loc 1 5119 0
 6149 0002 0446     		mov	r4, r0
 6150 0004 58B1     		cbz	r0, .L562
 6151              	.LVL555:
 6152              	.L558:
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6153              		.loc 1 5121 0 discriminator 4
 6154 0006 FFF7FEFF 		bl	vPortEnterCritical
 6155              	.LVL556:
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6156              		.loc 1 5123 0 discriminator 4
 6157 000a 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 6158 000e DBB2     		uxtb	r3, r3
 6159 0010 022B     		cmp	r3, #2
 6160 0012 07D0     		beq	.L563
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6161              		.loc 1 5130 0
 6162 0014 0024     		movs	r4, #0
 6163              	.LVL557:
 6164              	.L559:
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6165              		.loc 1 5133 0
 6166 0016 FFF7FEFF 		bl	vPortExitCritical
 6167              	.LVL558:
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6168              		.loc 1 5136 0
 6169 001a 2046     		mov	r0, r4
 6170 001c 10BD     		pop	{r4, pc}
 6171              	.LVL559:
 6172              	.L562:
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6173              		.loc 1 5119 0 discriminator 1
 6174 001e 044B     		ldr	r3, .L564
 6175 0020 1C68     		ldr	r4, [r3]
 6176              	.LVL560:
 6177 0022 F0E7     		b	.L558
 6178              	.LVL561:
 6179              	.L563:
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6180              		.loc 1 5125 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 218


 6181 0024 0023     		movs	r3, #0
 6182 0026 84F86030 		strb	r3, [r4, #96]
 6183              	.LVL562:
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6184              		.loc 1 5126 0
 6185 002a 0124     		movs	r4, #1
 6186              	.LVL563:
 6187 002c F3E7     		b	.L559
 6188              	.L565:
 6189 002e 00BF     		.align	2
 6190              	.L564:
 6191 0030 00000000 		.word	.LANCHOR10
 6192              		.cfi_endproc
 6193              	.LFE66:
 6195              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 6196              		.align	1
 6197              		.global	ulTaskNotifyValueClear
 6198              		.syntax unified
 6199              		.thumb
 6200              		.thumb_func
 6201              		.fpu fpv4-sp-d16
 6203              	ulTaskNotifyValueClear:
 6204              	.LFB67:
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6205              		.loc 1 5144 0
 6206              		.cfi_startproc
 6207              		@ args = 0, pretend = 0, frame = 0
 6208              		@ frame_needed = 0, uses_anonymous_args = 0
 6209              	.LVL564:
 6210 0000 70B5     		push	{r4, r5, r6, lr}
 6211              	.LCFI61:
 6212              		.cfi_def_cfa_offset 16
 6213              		.cfi_offset 4, -16
 6214              		.cfi_offset 5, -12
 6215              		.cfi_offset 6, -8
 6216              		.cfi_offset 14, -4
 6217 0002 0E46     		mov	r6, r1
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6218              		.loc 1 5150 0
 6219 0004 0446     		mov	r4, r0
 6220 0006 60B1     		cbz	r0, .L569
 6221              	.LVL565:
 6222              	.L567:
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6223              		.loc 1 5152 0 discriminator 4
 6224 0008 FFF7FEFF 		bl	vPortEnterCritical
 6225              	.LVL566:
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 6226              		.loc 1 5156 0 discriminator 4
 6227 000c 064B     		ldr	r3, .L570
 6228 000e 1B68     		ldr	r3, [r3]
 6229 0010 DD6D     		ldr	r5, [r3, #92]
 6230              	.LVL567:
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 6231              		.loc 1 5157 0 discriminator 4
 6232 0012 E16D     		ldr	r1, [r4, #92]
 6233 0014 21EA0601 		bic	r1, r1, r6
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 219


 6234 0018 E165     		str	r1, [r4, #92]
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6235              		.loc 1 5159 0 discriminator 4
 6236 001a FFF7FEFF 		bl	vPortExitCritical
 6237              	.LVL568:
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6238              		.loc 1 5162 0 discriminator 4
 6239 001e 2846     		mov	r0, r5
 6240 0020 70BD     		pop	{r4, r5, r6, pc}
 6241              	.LVL569:
 6242              	.L569:
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6243              		.loc 1 5150 0 discriminator 1
 6244 0022 014B     		ldr	r3, .L570
 6245 0024 1C68     		ldr	r4, [r3]
 6246              	.LVL570:
 6247 0026 EFE7     		b	.L567
 6248              	.L571:
 6249              		.align	2
 6250              	.L570:
 6251 0028 00000000 		.word	.LANCHOR10
 6252              		.cfi_endproc
 6253              	.LFE67:
 6255              		.global	pxCurrentTCB
 6256              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6257              		.align	2
 6258              		.set	.LANCHOR10,. + 0
 6261              	pxCurrentTCB:
 6262 0000 00000000 		.space	4
 6263              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6264              		.align	2
 6265              		.set	.LANCHOR2,. + 0
 6268              	pxDelayedTaskList:
 6269 0000 00000000 		.space	4
 6270              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6271              		.align	2
 6272              		.set	.LANCHOR8,. + 0
 6275              	pxOverflowDelayedTaskList:
 6276 0000 00000000 		.space	4
 6277              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6278              		.align	2
 6279              		.set	.LANCHOR4,. + 0
 6282              	pxReadyTasksLists:
 6283 0000 00000000 		.space	140
 6283      00000000 
 6283      00000000 
 6283      00000000 
 6283      00000000 
 6284              		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 6285              		.align	2
 6286              		.set	.LANCHOR21,. + 0
 6289              	ulTaskSwitchedInTime:
 6290 0000 00000000 		.space	4
 6291              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6292              		.align	2
 6293              		.set	.LANCHOR9,. + 0
 6296              	uxCurrentNumberOfTasks:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 220


 6297 0000 00000000 		.space	4
 6298              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6299              		.align	2
 6300              		.set	.LANCHOR14,. + 0
 6303              	uxDeletedTasksWaitingCleanUp:
 6304 0000 00000000 		.space	4
 6305              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6306              		.align	2
 6307              		.set	.LANCHOR16,. + 0
 6310              	uxSchedulerSuspended:
 6311 0000 00000000 		.space	4
 6312              		.section	.bss.uxTaskNumber,"aw",%nobits
 6313              		.align	2
 6314              		.set	.LANCHOR12,. + 0
 6317              	uxTaskNumber:
 6318 0000 00000000 		.space	4
 6319              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6320              		.align	2
 6321              		.set	.LANCHOR13,. + 0
 6324              	uxTopReadyPriority:
 6325 0000 00000000 		.space	4
 6326              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6327              		.align	2
 6328              		.set	.LANCHOR5,. + 0
 6331              	xDelayedTaskList1:
 6332 0000 00000000 		.space	20
 6332      00000000 
 6332      00000000 
 6332      00000000 
 6332      00000000 
 6333              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6334              		.align	2
 6335              		.set	.LANCHOR6,. + 0
 6338              	xDelayedTaskList2:
 6339 0000 00000000 		.space	20
 6339      00000000 
 6339      00000000 
 6339      00000000 
 6339      00000000 
 6340              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 6341              		.align	2
 6342              		.set	.LANCHOR17,. + 0
 6345              	xIdleTaskHandle:
 6346 0000 00000000 		.space	4
 6347              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6348              		.align	2
 6349              		.set	.LANCHOR3,. + 0
 6352              	xNextTaskUnblockTime:
 6353 0000 00000000 		.space	4
 6354              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6355              		.align	2
 6356              		.set	.LANCHOR18,. + 0
 6359              	xNumOfOverflows:
 6360 0000 00000000 		.space	4
 6361              		.section	.bss.xPendedTicks,"aw",%nobits
 6362              		.align	2
 6363              		.set	.LANCHOR20,. + 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 221


 6366              	xPendedTicks:
 6367 0000 00000000 		.space	4
 6368              		.section	.bss.xPendingReadyList,"aw",%nobits
 6369              		.align	2
 6370              		.set	.LANCHOR1,. + 0
 6373              	xPendingReadyList:
 6374 0000 00000000 		.space	20
 6374      00000000 
 6374      00000000 
 6374      00000000 
 6374      00000000 
 6375              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6376              		.align	2
 6377              		.set	.LANCHOR11,. + 0
 6380              	xSchedulerRunning:
 6381 0000 00000000 		.space	4
 6382              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6383              		.align	2
 6384              		.set	.LANCHOR0,. + 0
 6387              	xSuspendedTaskList:
 6388 0000 00000000 		.space	20
 6388      00000000 
 6388      00000000 
 6388      00000000 
 6388      00000000 
 6389              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6390              		.align	2
 6391              		.set	.LANCHOR7,. + 0
 6394              	xTasksWaitingTermination:
 6395 0000 00000000 		.space	20
 6395      00000000 
 6395      00000000 
 6395      00000000 
 6395      00000000 
 6396              		.section	.bss.xTickCount,"aw",%nobits
 6397              		.align	2
 6398              		.set	.LANCHOR15,. + 0
 6401              	xTickCount:
 6402 0000 00000000 		.space	4
 6403              		.section	.bss.xYieldPending,"aw",%nobits
 6404              		.align	2
 6405              		.set	.LANCHOR19,. + 0
 6408              	xYieldPending:
 6409 0000 00000000 		.space	4
 6410              		.section	.rodata.vTaskGetRunTimeStats.str1.4,"aMS",%progbits,1
 6411              		.align	2
 6412              	.LC2:
 6413 0000 09257509 		.ascii	"\011%u\011\011%u%%\015\012\000"
 6413      09257525 
 6413      250D0A00 
 6414              	.LC3:
 6415 000c 09257509 		.ascii	"\011%u\011\011<1%%\015\012\000"
 6415      093C3125 
 6415      250D0A00 
 6416              		.section	.rodata.vTaskList.str1.4,"aMS",%progbits,1
 6417              		.align	2
 6418              	.LC1:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 222


 6419 0000 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 6419      25750925 
 6419      75092575 
 6419      0D0A00
 6420              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6421              		.align	2
 6422              	.LC0:
 6423 0000 49444C45 		.ascii	"IDLE\000"
 6423      00
 6424              		.text
 6425              	.Letext0:
 6426              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 6427              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6428              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6429              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6430              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6431              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6432              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6433              		.file 10 "Inc/FreeRTOSConfig.h"
 6434              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6435              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6436              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6437              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 6438              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 6439              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 223


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:18     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:92     .text.prvTaskIsTaskSuspended:00000038 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:98     .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:104    .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:138    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:144    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:178    .text.prvResetNextTaskUnblockTime:00000024 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:184    .text.prvDeleteTCB:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:190    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:218    .text.prvInitialiseNewTask:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:224    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:357    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:363    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:430    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:442    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:448    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:558    .text.prvAddNewTaskToReadyList:00000090 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:569    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:575    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:642    .text.prvCheckTasksWaitingTermination:00000040 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:649    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:655    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:756    .text.prvAddCurrentTaskToDelayedList:0000007c $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:767    .text.prvIdleTask:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:773    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:801    .text.prvWriteNameToBuffer:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:807    .text.prvWriteNameToBuffer:00000000 prvWriteNameToBuffer
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:850    .text.xTaskCreate:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:857    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:962    .text.vTaskDelete:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:969    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1121   .text.vTaskDelete:000000b8 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1135   .text.eTaskGetState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1142   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1271   .text.eTaskGetState:0000007c $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1280   .text.uxTaskPriorityGet:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1287   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1326   .text.uxTaskPriorityGet:0000001c $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1331   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1338   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1401   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1406   .text.vTaskPrioritySet:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1413   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1591   .text.vTaskPrioritySet:000000cc $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1599   .text.vTaskResume:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1606   .text.vTaskResume:00000000 vTaskResume
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1709   .text.vTaskResume:00000074 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1717   .text.xTaskResumeFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1724   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1857   .text.xTaskResumeFromISR:00000090 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1866   .text.vTaskStartScheduler:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1873   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1970   .text.vTaskStartScheduler:00000068 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1982   .text.vTaskEndScheduler:00000000 $t
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 224


C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:1989   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2027   .text.vTaskEndScheduler:00000020 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2032   .text.vTaskSuspendAll:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2039   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2057   .text.vTaskSuspendAll:0000000c $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2062   .text.xTaskGetTickCount:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2069   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2085   .text.xTaskGetTickCount:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2090   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2097   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2120   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2125   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2132   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2147   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2152   .text.pcTaskGetName:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2159   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2205   .text.pcTaskGetName:00000024 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2212   .text.xTaskIncrementTick:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2219   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2427   .text.xTaskIncrementTick:000000ec $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2442   .text.xTaskResumeAll:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2449   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2633   .text.xTaskResumeAll:000000d0 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2646   .text.vTaskDelay:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2653   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2726   .text.vTaskDelay:00000044 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2732   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2739   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2793   .text.xTaskCatchUpTicks:00000030 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2799   .text.vTaskSwitchContext:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2806   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2942   .text.vTaskSwitchContext:0000009c $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2954   .text.vTaskSuspend:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:2961   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3127   .text.vTaskSuspend:000000cc $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3139   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3146   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3199   .text.vTaskPlaceOnEventList:0000002c $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3204   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3211   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3299   .text.vTaskPlaceOnUnorderedEventList:00000054 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3305   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3312   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3415   .text.xTaskRemoveFromEventList:00000074 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3425   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3432   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3536   .text.vTaskRemoveFromUnorderedEventList:00000074 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3547   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3554   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3609   .text.vTaskSetTimeOutState:00000030 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3615   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3622   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3643   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3649   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3656   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3788   .text.xTaskCheckForTimeOut:00000078 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3795   .text.vTaskMissedYield:00000000 $t
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 225


C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3802   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3818   .text.vTaskMissedYield:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3823   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3830   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3856   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3863   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3884   .text.vTaskGetInfo:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:3891   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4004   .text.vTaskGetInfo:00000074 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4009   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4015   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4116   .text.uxTaskGetSystemState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4123   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4240   .text.uxTaskGetSystemState:00000098 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4250   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4257   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4273   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4278   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4285   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4317   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4323   .text.xTaskPriorityInherit:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4330   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4462   .text.xTaskPriorityInherit:000000a0 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4469   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4476   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4630   .text.xTaskPriorityDisinherit:000000a4 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4637   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4644   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4797   .text.vTaskPriorityDisinheritAfterTimeout:000000a8 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4804   .text.vTaskList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4811   .text.vTaskList:00000000 vTaskList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4936   .text.vTaskList:00000090 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4941   .text.vTaskList:000000a4 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4958   .text.vTaskList:000000b0 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4964   .text.vTaskGetRunTimeStats:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:4971   .text.vTaskGetRunTimeStats:00000000 vTaskGetRunTimeStats
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5094   .text.vTaskGetRunTimeStats:00000088 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5102   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5109   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5132   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5137   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5144   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5170   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5175   .text.ulTaskNotifyTake:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5182   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5278   .text.ulTaskNotifyTake:00000070 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5284   .text.xTaskNotifyWait:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5291   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5407   .text.xTaskNotifyWait:00000090 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5413   .text.xTaskGenericNotify:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5420   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5485   .text.xTaskGenericNotify:0000003c $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5652   .text.xTaskGenericNotify:000000f0 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5660   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5667   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5751   .text.xTaskGenericNotifyFromISR:0000005c $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5937   .text.xTaskGenericNotifyFromISR:00000120 $d
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 226


C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5947   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5954   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6119   .text.vTaskNotifyGiveFromISR:000000b4 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6129   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6136   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6191   .text.xTaskNotifyStateClear:00000030 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6196   .text.ulTaskNotifyValueClear:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6203   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6251   .text.ulTaskNotifyValueClear:00000028 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6261   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6257   .bss.pxCurrentTCB:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6264   .bss.pxDelayedTaskList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6268   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6271   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6275   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6278   .bss.pxReadyTasksLists:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6282   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6285   .bss.ulTaskSwitchedInTime:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6289   .bss.ulTaskSwitchedInTime:00000000 ulTaskSwitchedInTime
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6292   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6296   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6299   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6303   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6306   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6310   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6313   .bss.uxTaskNumber:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6317   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6320   .bss.uxTopReadyPriority:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6324   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6327   .bss.xDelayedTaskList1:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6331   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6334   .bss.xDelayedTaskList2:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6338   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6341   .bss.xIdleTaskHandle:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6345   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6348   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6352   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6355   .bss.xNumOfOverflows:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6359   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6362   .bss.xPendedTicks:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6366   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6369   .bss.xPendingReadyList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6373   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6376   .bss.xSchedulerRunning:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6380   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6383   .bss.xSuspendedTaskList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6387   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6390   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6394   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6397   .bss.xTickCount:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6401   .bss.xTickCount:00000000 xTickCount
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6404   .bss.xYieldPending:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6408   .bss.xYieldPending:00000000 xYieldPending
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6411   .rodata.vTaskGetRunTimeStats.str1.4:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6417   .rodata.vTaskList.str1.4:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:6421   .rodata.vTaskStartScheduler.str1.4:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5490   .text.xTaskGenericNotify:00000041 $d
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s 			page 227


C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5490   .text.xTaskGenericNotify:00000042 $t
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5756   .text.xTaskGenericNotifyFromISR:00000061 $d
C:\Users\82057\AppData\Local\Temp\ccqRpkVb.s:5756   .text.xTaskGenericNotifyFromISR:00000062 $t

UNDEFINED SYMBOLS
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
vApplicationIdleHook
strcpy
strlen
pvPortMalloc
vPortValidateInterruptPriority
configureTimerForRunTimeStats
xPortStartScheduler
vPortEndScheduler
getRunTimeCounterValue
sprintf
