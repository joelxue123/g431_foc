ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvWriteNameToBuffer:
  25              	.LFB56:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 32


1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 33


1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 34


1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 35


1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 36


1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 37


2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 38


2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 39


2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 40


2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 41


2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 42


2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 43


2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 44


2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 45


2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 46


2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 47


2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 48


2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 49


2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 50


2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 51


2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 52


2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 53


2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 54


2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 55


3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 56


3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 57


3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 58


3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 59


3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 60


3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 61


3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 62


3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 63


3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 64


3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 65


3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 66


3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 67


3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 68


3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 69


3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 70


3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 71


3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 72


4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 73


4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 74


4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 75


4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 76


4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 77


4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 4353 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37              		.loc 1 4353 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 78


  38 0002 0446     		mov	r4, r0
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
  39              		.loc 1 4357 0
  40 0004 FFF7FEFF 		bl	strcpy
  41              	.LVL1:
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  42              		.loc 1 4361 0
  43 0008 2046     		mov	r0, r4
  44 000a FFF7FEFF 		bl	strlen
  45              	.LVL2:
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
  46              		.loc 1 4363 0
  47 000e 2022     		movs	r2, #32
  48 0010 2044     		add	r0, r0, r4
  49              	.LVL3:
  50              	.L2:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
  51              		.loc 1 4361 0 discriminator 1
  52 0012 031B     		subs	r3, r0, r4
  53              	.LVL4:
  54 0014 0E2B     		cmp	r3, #14
  55 0016 02D9     		bls	.L3
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
  56              		.loc 1 4367 0
  57 0018 0023     		movs	r3, #0
  58              	.LVL5:
  59 001a 0370     		strb	r3, [r0]
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
  60              		.loc 1 4371 0
  61 001c 10BD     		pop	{r4, pc}
  62              	.LVL6:
  63              	.L3:
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
  64              		.loc 1 4363 0 discriminator 3
  65 001e 00F8012B 		strb	r2, [r0], #1
  66              	.LVL7:
  67 0022 F6E7     		b	.L2
  68              		.cfi_endproc
  69              	.LFE56:
  71              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  72              		.align	1
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 79


  76              		.fpu fpv4-sp-d16
  78              	prvTaskIsTaskSuspended:
  79              	.LFB18:
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  80              		.loc 1 1806 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85              	.LVL8:
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  86              		.loc 1 1814 0
  87 0000 40B9     		cbnz	r0, .L5
  88              	.LVL9:
  89              	.LBB124:
  90              	.LBB125:
  91              	.LBB126:
  92              	.LBB127:
  93              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 80


  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 81


  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 82


 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  94              		.loc 2 195 0
  95              		.syntax unified
  96              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  97 0002 4FF05003 			mov r3, #80												
  98 0006 83F31188 		msr basepri, r3											
  99 000a BFF36F8F 		isb														
 100 000e BFF34F8F 		dsb														
 101              	
 102              	@ 0 "" 2
 103              	.LVL10:
 104              		.thumb
 105              		.syntax unified
 106              	.L6:
 107 0012 FEE7     		b	.L6
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 83


 108              	.LVL11:
 109              	.L5:
 110              	.LBE127:
 111              	.LBE126:
 112              	.LBE125:
 113              	.LBE124:
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 114              		.loc 1 1817 0
 115 0014 4269     		ldr	r2, [r0, #20]
 116 0016 064B     		ldr	r3, .L10
 117 0018 9A42     		cmp	r2, r3
 118 001a 07D1     		bne	.L9
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 119              		.loc 1 1820 0
 120 001c 806A     		ldr	r0, [r0, #40]
 121              	.LVL12:
 122 001e 054B     		ldr	r3, .L10+4
 123 0020 9842     		cmp	r0, r3
 124 0022 03D0     		beq	.L9
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 125              		.loc 1 1824 0
 126 0024 B0FA80F0 		clz	r0, r0
 127 0028 4009     		lsrs	r0, r0, #5
 128 002a 7047     		bx	lr
 129              	.L9:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 130              		.loc 1 1807 0
 131 002c 0020     		movs	r0, #0
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132              		.loc 1 1844 0
 133 002e 7047     		bx	lr
 134              	.L11:
 135              		.align	2
 136              	.L10:
 137 0030 00000000 		.word	.LANCHOR0
 138 0034 00000000 		.word	.LANCHOR1
 139              		.cfi_endproc
 140              	.LFE18:
 142              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 143              		.align	1
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 147              		.fpu fpv4-sp-d16
 149              	prvResetNextTaskUnblockTime:
 150              	.LFB50:
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 151              		.loc 1 3944 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		@ link register save eliminated.
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 156              		.loc 1 3947 0
 157 0000 064A     		ldr	r2, .L16
 158 0002 1368     		ldr	r3, [r2]
 159 0004 1968     		ldr	r1, [r3]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 84


 160 0006 064B     		ldr	r3, .L16+4
 161 0008 19B9     		cbnz	r1, .L13
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 162              		.loc 1 3953 0
 163 000a 4FF0FF32 		mov	r2, #-1
 164              	.L15:
 165              	.LBB130:
 166              	.LBB131:
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 167              		.loc 1 3962 0
 168 000e 1A60     		str	r2, [r3]
 169              	.LBE131:
 170              	.LBE130:
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 171              		.loc 1 3964 0
 172 0010 7047     		bx	lr
 173              	.L13:
 174              	.LBB133:
 175              	.LBB132:
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 176              		.loc 1 3961 0
 177 0012 1268     		ldr	r2, [r2]
 178              	.LVL13:
 179 0014 D268     		ldr	r2, [r2, #12]
 180              	.LVL14:
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 181              		.loc 1 3962 0
 182 0016 D268     		ldr	r2, [r2, #12]
 183              	.LVL15:
 184 0018 5268     		ldr	r2, [r2, #4]
 185              	.LVL16:
 186 001a F8E7     		b	.L15
 187              	.L17:
 188              		.align	2
 189              	.L16:
 190 001c 00000000 		.word	.LANCHOR2
 191 0020 00000000 		.word	.LANCHOR3
 192              	.LBE132:
 193              	.LBE133:
 194              		.cfi_endproc
 195              	.LFE50:
 197              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv4-sp-d16
 204              	prvAddCurrentTaskToDelayedList:
 205              	.LFB68:
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 85


4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 86


4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 87


4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 88


4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 89


4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 90


4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 91


4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 92


4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 93


4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 94


4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 95


4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 96


5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 97


5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 98


5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 99


5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 206              		.loc 1 5178 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              	.LVL17:
 211 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 212              	.LCFI1:
 213              		.cfi_def_cfa_offset 24
 214              		.cfi_offset 3, -24
 215              		.cfi_offset 4, -20
 216              		.cfi_offset 5, -16
 217              		.cfi_offset 6, -12
 218              		.cfi_offset 7, -8
 219              		.cfi_offset 14, -4
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 220              		.loc 1 5180 0
 221 0002 1B4B     		ldr	r3, .L28
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 222              		.loc 1 5193 0
 223 0004 1B4E     		ldr	r6, .L28+4
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 224              		.loc 1 5180 0
 225 0006 1C68     		ldr	r4, [r3]
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 226              		.loc 1 5178 0
 227 0008 0546     		mov	r5, r0
 228              	.LVL18:
 229              		.loc 1 5193 0
 230 000a 3068     		ldr	r0, [r6]
 231              	.LVL19:
 232 000c 0430     		adds	r0, r0, #4
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 233              		.loc 1 5178 0
 234 000e 0F46     		mov	r7, r1
 235              		.loc 1 5193 0
 236 0010 FFF7FEFF 		bl	uxListRemove
 237              	.LVL20:
 238 0014 3346     		mov	r3, r6
 239 0016 40B9     		cbnz	r0, .L19
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 100


 240              		.loc 1 5197 0
 241 0018 3168     		ldr	r1, [r6]
 242 001a 174E     		ldr	r6, .L28+8
 243 001c C96A     		ldr	r1, [r1, #44]
 244 001e 3268     		ldr	r2, [r6]
 245 0020 0120     		movs	r0, #1
 246 0022 8840     		lsls	r0, r0, r1
 247 0024 22EA0002 		bic	r2, r2, r0
 248 0028 3260     		str	r2, [r6]
 249              	.L19:
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 250              		.loc 1 5206 0
 251 002a 6A1C     		adds	r2, r5, #1
 252 002c 07D1     		bne	.L20
 253              		.loc 1 5206 0 is_stmt 0 discriminator 1
 254 002e 37B1     		cbz	r7, .L20
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 255              		.loc 1 5211 0 is_stmt 1
 256 0030 1968     		ldr	r1, [r3]
 257 0032 1248     		ldr	r0, .L28+12
 258 0034 0431     		adds	r1, r1, #4
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 101


5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 259              		.loc 1 5286 0
 260 0036 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 261              	.LCFI2:
 262              		.cfi_remember_state
 263              		.cfi_restore 14
 264              		.cfi_restore 7
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 102


 265              		.cfi_restore 6
 266              		.cfi_restore 5
 267              		.cfi_restore 4
 268              		.cfi_restore 3
 269              		.cfi_def_cfa_offset 0
 270              	.LVL21:
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 271              		.loc 1 5211 0
 272 003a FFF7FEBF 		b	vListInsertEnd
 273              	.LVL22:
 274              	.L20:
 275              	.LCFI3:
 276              		.cfi_restore_state
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277              		.loc 1 5221 0
 278 003e 1A68     		ldr	r2, [r3]
 279 0040 6419     		adds	r4, r4, r5
 280              	.LVL23:
 281 0042 5460     		str	r4, [r2, #4]
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 282              		.loc 1 5223 0
 283 0044 07D3     		bcc	.L23
 284              	.LVL24:
 285              	.LBB136:
 286              	.LBB137:
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 287              		.loc 1 5227 0
 288 0046 0E4A     		ldr	r2, .L28+16
 289 0048 1068     		ldr	r0, [r2]
 290 004a 1968     		ldr	r1, [r3]
 291              	.LBE137:
 292              	.LBE136:
 293              		.loc 1 5286 0
 294 004c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 295              	.LCFI4:
 296              		.cfi_remember_state
 297              		.cfi_restore 14
 298              		.cfi_restore 7
 299              		.cfi_restore 6
 300              		.cfi_restore 5
 301              		.cfi_restore 4
 302              		.cfi_restore 3
 303              		.cfi_def_cfa_offset 0
 304              	.LVL25:
 305              	.LBB139:
 306              	.LBB138:
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 307              		.loc 1 5227 0
 308 0050 0431     		adds	r1, r1, #4
 309 0052 FFF7FEBF 		b	vListInsert
 310              	.LVL26:
 311              	.L23:
 312              	.LCFI5:
 313              		.cfi_restore_state
 314              	.LBE138:
 315              	.LBE139:
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 103


 316              		.loc 1 5233 0
 317 0056 0B4A     		ldr	r2, .L28+20
 318 0058 1068     		ldr	r0, [r2]
 319 005a 1968     		ldr	r1, [r3]
 320 005c 0431     		adds	r1, r1, #4
 321 005e FFF7FEFF 		bl	vListInsert
 322              	.LVL27:
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 323              		.loc 1 5238 0
 324 0062 094B     		ldr	r3, .L28+24
 325 0064 1A68     		ldr	r2, [r3]
 326 0066 A242     		cmp	r2, r4
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 327              		.loc 1 5240 0
 328 0068 88BF     		it	hi
 329 006a 1C60     		strhi	r4, [r3]
 330              		.loc 1 5286 0
 331 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 332              	.LVL28:
 333              	.L29:
 334 006e 00BF     		.align	2
 335              	.L28:
 336 0070 00000000 		.word	.LANCHOR4
 337 0074 00000000 		.word	.LANCHOR5
 338 0078 00000000 		.word	.LANCHOR6
 339 007c 00000000 		.word	.LANCHOR0
 340 0080 00000000 		.word	.LANCHOR7
 341 0084 00000000 		.word	.LANCHOR2
 342 0088 00000000 		.word	.LANCHOR3
 343              		.cfi_endproc
 344              	.LFE68:
 346              		.section	.text.prvIdleTask,"ax",%progbits
 347              		.align	1
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu fpv4-sp-d16
 353              	prvIdleTask:
 354              	.LFB43:
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 355              		.loc 1 3393 0
 356              		.cfi_startproc
 357              		@ Volatile: function does not return.
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              	.LVL29:
 361 0000 80B5     		push	{r7, lr}
 362              	.LCFI6:
 363              		.cfi_def_cfa_offset 8
 364              		.cfi_offset 7, -8
 365              		.cfi_offset 14, -4
 366              	.LBB146:
 367              	.LBB147:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 368              		.loc 1 3650 0
 369 0002 0F4C     		ldr	r4, .L34
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 104


 370              		.loc 1 3654 0
 371 0004 0F4F     		ldr	r7, .L34+4
 372              	.LVL30:
 373              	.L33:
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 374              		.loc 1 3656 0 discriminator 1
 375 0006 104E     		ldr	r6, .L34+8
 376              	.L31:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 377              		.loc 1 3650 0
 378 0008 2368     		ldr	r3, [r4]
 379 000a 13B9     		cbnz	r3, .L32
 380              	.LBE147:
 381              	.LBE146:
 382              	.LBB151:
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 383              		.loc 1 3452 0 discriminator 1
 384 000c FFF7FEFF 		bl	vApplicationIdleHook
 385              	.LVL31:
 386 0010 F9E7     		b	.L33
 387              	.L32:
 388              	.LBE151:
 389              	.LBB152:
 390              	.LBB150:
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 391              		.loc 1 3652 0
 392 0012 FFF7FEFF 		bl	vPortEnterCritical
 393              	.LVL32:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 394              		.loc 1 3654 0
 395 0016 FB68     		ldr	r3, [r7, #12]
 396 0018 DD68     		ldr	r5, [r3, #12]
 397              	.LVL33:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 398              		.loc 1 3655 0
 399 001a 281D     		adds	r0, r5, #4
 400 001c FFF7FEFF 		bl	uxListRemove
 401              	.LVL34:
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 402              		.loc 1 3656 0
 403 0020 3368     		ldr	r3, [r6]
 404 0022 013B     		subs	r3, r3, #1
 405 0024 3360     		str	r3, [r6]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 406              		.loc 1 3657 0
 407 0026 2368     		ldr	r3, [r4]
 408 0028 013B     		subs	r3, r3, #1
 409 002a 2360     		str	r3, [r4]
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 410              		.loc 1 3659 0
 411 002c FFF7FEFF 		bl	vPortExitCritical
 412              	.LVL35:
 413              	.LBB148:
 414              	.LBB149:
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 415              		.loc 1 3908 0
 416 0030 286B     		ldr	r0, [r5, #48]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 105


 417 0032 FFF7FEFF 		bl	vPortFree
 418              	.LVL36:
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 419              		.loc 1 3909 0
 420 0036 2846     		mov	r0, r5
 421 0038 FFF7FEFF 		bl	vPortFree
 422              	.LVL37:
 423 003c E4E7     		b	.L31
 424              	.L35:
 425 003e 00BF     		.align	2
 426              	.L34:
 427 0040 00000000 		.word	.LANCHOR10
 428 0044 00000000 		.word	.LANCHOR8
 429 0048 00000000 		.word	.LANCHOR9
 430              	.LBE149:
 431              	.LBE148:
 432              	.LBE150:
 433              	.LBE152:
 434              		.cfi_endproc
 435              	.LFE43:
 437              		.section	.text.xTaskCreate,"ax",%progbits
 438              		.align	1
 439              		.global	xTaskCreate
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	xTaskCreate:
 446              	.LFB8:
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 447              		.loc 1 739 0
 448              		.cfi_startproc
 449              		@ args = 8, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451              	.LVL38:
 452 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 453              	.LCFI7:
 454              		.cfi_def_cfa_offset 40
 455              		.cfi_offset 3, -40
 456              		.cfi_offset 4, -36
 457              		.cfi_offset 5, -32
 458              		.cfi_offset 6, -28
 459              		.cfi_offset 7, -24
 460              		.cfi_offset 8, -20
 461              		.cfi_offset 9, -16
 462              		.cfi_offset 10, -12
 463              		.cfi_offset 11, -8
 464              		.cfi_offset 14, -4
 465              	.LBB160:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466              		.loc 1 773 0
 467 0004 4FEA820A 		lsl	r10, r2, #2
 468              	.LBE160:
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 469              		.loc 1 739 0
 470 0008 8046     		mov	r8, r0
 471              	.LBB161:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 106


 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472              		.loc 1 773 0
 473 000a 5046     		mov	r0, r10
 474              	.LVL39:
 475              	.LBE161:
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 476              		.loc 1 739 0
 477 000c 0D46     		mov	r5, r1
 478 000e 9946     		mov	r9, r3
 479 0010 0B9E     		ldr	r6, [sp, #44]
 480              	.LBB162:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481              		.loc 1 773 0
 482 0012 FFF7FEFF 		bl	pvPortMalloc
 483              	.LVL40:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 484              		.loc 1 775 0
 485 0016 0746     		mov	r7, r0
 486 0018 C8B1     		cbz	r0, .L49
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 487              		.loc 1 778 0
 488 001a 6420     		movs	r0, #100
 489              	.LVL41:
 490 001c FFF7FEFF 		bl	pvPortMalloc
 491              	.LVL42:
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 492              		.loc 1 780 0
 493 0020 0446     		mov	r4, r0
 494 0022 88B1     		cbz	r0, .L38
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 495              		.loc 1 783 0
 496 0024 0763     		str	r7, [r0, #48]
 497              	.LVL43:
 498              	.LBE162:
 499              	.LBB163:
 500              	.LBB164:
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 501              		.loc 1 854 0
 502 0026 5246     		mov	r2, r10
 503 0028 A521     		movs	r1, #165
 504 002a 3846     		mov	r0, r7
 505              	.LVL44:
 506 002c FFF7FEFF 		bl	memset
 507              	.LVL45:
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 508              		.loc 1 864 0
 509 0030 236B     		ldr	r3, [r4, #48]
 510 0032 AAF1040A 		sub	r10, r10, #4
 511              	.LVL46:
 512 0036 9A44     		add	r10, r10, r3
 513              	.LVL47:
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514              		.loc 1 865 0
 515 0038 2AF0070A 		bic	r10, r10, #7
 516              	.LVL48:
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 517              		.loc 1 874 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 107


 518 003c C4F844A0 		str	r10, [r4, #68]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 519              		.loc 1 892 0
 520 0040 45B9     		cbnz	r5, .L39
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 521              		.loc 1 919 0
 522 0042 84F83450 		strb	r5, [r4, #52]
 523 0046 14E0     		b	.L43
 524              	.LVL49:
 525              	.L38:
 526              	.LBE164:
 527              	.LBE163:
 528              	.LBB166:
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 529              		.loc 1 789 0
 530 0048 3846     		mov	r0, r7
 531              	.LVL50:
 532 004a FFF7FEFF 		bl	vPortFree
 533              	.LVL51:
 534              	.L49:
 535              	.LBE166:
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 536              		.loc 1 815 0
 537 004e 4FF0FF35 		mov	r5, #-1
 538              	.LVL52:
 539 0052 88E0     		b	.L36
 540              	.LVL53:
 541              	.L39:
 542 0054 6B1E     		subs	r3, r5, #1
 543 0056 04F13402 		add	r2, r4, #52
 544 005a 0F35     		adds	r5, r5, #15
 545              	.LVL54:
 546              	.L42:
 547              	.LBB167:
 548              	.LBB165:
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 549              		.loc 1 896 0
 550 005c 13F8011F 		ldrb	r1, [r3, #1]!	@ zero_extendqisi2
 551              	.LVL55:
 552 0060 02F8011B 		strb	r1, [r2], #1
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 553              		.loc 1 901 0
 554 0064 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 555 0066 09B1     		cbz	r1, .L41
 556              	.LVL56:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 557              		.loc 1 894 0
 558 0068 AB42     		cmp	r3, r5
 559 006a F7D1     		bne	.L42
 560              	.LVL57:
 561              	.L41:
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 562              		.loc 1 913 0
 563 006c 0023     		movs	r3, #0
 564 006e 84F84330 		strb	r3, [r4, #67]
 565              	.LVL58:
 566              	.L43:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 108


 567 0072 0A9D     		ldr	r5, [sp, #40]
 568 0074 062D     		cmp	r5, #6
 569 0076 28BF     		it	cs
 570 0078 0625     		movcs	r5, #6
 571              	.LVL59:
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 572              		.loc 1 937 0
 573 007a 4FF0000B 		mov	fp, #0
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 574              		.loc 1 941 0
 575 007e 271D     		adds	r7, r4, #4
 576              	.LVL60:
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 577              		.loc 1 933 0
 578 0080 E562     		str	r5, [r4, #44]
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 579              		.loc 1 936 0
 580 0082 2565     		str	r5, [r4, #80]
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 581              		.loc 1 941 0
 582 0084 3846     		mov	r0, r7
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 583              		.loc 1 937 0
 584 0086 C4F854B0 		str	fp, [r4, #84]
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 585              		.loc 1 941 0
 586 008a FFF7FEFF 		bl	vListInitialiseItem
 587              	.LVL61:
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 588              		.loc 1 949 0
 589 008e C5F10705 		rsb	r5, r5, #7
 590              	.LVL62:
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 591              		.loc 1 942 0
 592 0092 04F11800 		add	r0, r4, #24
 593 0096 FFF7FEFF 		bl	vListInitialiseItem
 594              	.LVL63:
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 595              		.loc 1 992 0
 596 009a C4F85CB0 		str	fp, [r4, #92]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597              		.loc 1 946 0
 598 009e 2461     		str	r4, [r4, #16]
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 599              		.loc 1 949 0
 600 00a0 A561     		str	r5, [r4, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 601              		.loc 1 950 0
 602 00a2 6462     		str	r4, [r4, #36]
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 603              		.loc 1 966 0
 604 00a4 C4F858B0 		str	fp, [r4, #88]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 605              		.loc 1 993 0
 606 00a8 84F860B0 		strb	fp, [r4, #96]
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 607              		.loc 1 1058 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 109


 608 00ac 4A46     		mov	r2, r9
 609 00ae 4146     		mov	r1, r8
 610 00b0 5046     		mov	r0, r10
 611 00b2 FFF7FEFF 		bl	pxPortInitialiseStack
 612              	.LVL64:
 613 00b6 2060     		str	r0, [r4]
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 614              		.loc 1 1064 0
 615 00b8 06B1     		cbz	r6, .L44
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 616              		.loc 1 1068 0
 617 00ba 3460     		str	r4, [r6]
 618              	.L44:
 619              	.LVL65:
 620              	.LBE165:
 621              	.LBE167:
 622              	.LBB168:
 623              	.LBB169:
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 624              		.loc 1 1081 0
 625 00bc FFF7FEFF 		bl	vPortEnterCritical
 626              	.LVL66:
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 627              		.loc 1 1083 0
 628 00c0 304B     		ldr	r3, .L62
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 629              		.loc 1 1084 0
 630 00c2 314E     		ldr	r6, .L62+4
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 631              		.loc 1 1083 0
 632 00c4 1A68     		ldr	r2, [r3]
 633 00c6 DFF8EC80 		ldr	r8, .L62+48
 634              	.LVL67:
 635 00ca 0132     		adds	r2, r2, #1
 636 00cc 1A60     		str	r2, [r3]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 637              		.loc 1 1084 0
 638 00ce 3568     		ldr	r5, [r6]
 639 00d0 002D     		cmp	r5, #0
 640 00d2 4BD1     		bne	.L45
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 641              		.loc 1 1088 0
 642 00d4 3460     		str	r4, [r6]
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 643              		.loc 1 1090 0
 644 00d6 1B68     		ldr	r3, [r3]
 645 00d8 012B     		cmp	r3, #1
 646 00da 1FD1     		bne	.L47
 647              	.LBB170:
 648              	.LBB171:
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 649              		.loc 1 3613 0
 650 00dc 4FF01409 		mov	r9, #20
 651              	.LVL68:
 652              	.L46:
 653 00e0 09FB0580 		mla	r0, r9, r5, r8
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 110


 654              		.loc 1 3611 0
 655 00e4 0135     		adds	r5, r5, #1
 656              	.LVL69:
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 657              		.loc 1 3613 0
 658 00e6 FFF7FEFF 		bl	vListInitialise
 659              	.LVL70:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 660              		.loc 1 3611 0
 661 00ea 072D     		cmp	r5, #7
 662 00ec F8D1     		bne	.L46
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 663              		.loc 1 3616 0
 664 00ee DFF8C890 		ldr	r9, .L62+52
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 665              		.loc 1 3617 0
 666 00f2 264D     		ldr	r5, .L62+8
 667              	.LVL71:
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 668              		.loc 1 3616 0
 669 00f4 4846     		mov	r0, r9
 670 00f6 FFF7FEFF 		bl	vListInitialise
 671              	.LVL72:
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 672              		.loc 1 3617 0
 673 00fa 2846     		mov	r0, r5
 674 00fc FFF7FEFF 		bl	vListInitialise
 675              	.LVL73:
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676              		.loc 1 3618 0
 677 0100 2348     		ldr	r0, .L62+12
 678 0102 FFF7FEFF 		bl	vListInitialise
 679              	.LVL74:
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 680              		.loc 1 3622 0
 681 0106 2348     		ldr	r0, .L62+16
 682 0108 FFF7FEFF 		bl	vListInitialise
 683              	.LVL75:
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 684              		.loc 1 3628 0
 685 010c 2248     		ldr	r0, .L62+20
 686 010e FFF7FEFF 		bl	vListInitialise
 687              	.LVL76:
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 688              		.loc 1 3634 0
 689 0112 224B     		ldr	r3, .L62+24
 690 0114 C3F80090 		str	r9, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 691              		.loc 1 3635 0
 692 0118 214B     		ldr	r3, .L62+28
 693 011a 1D60     		str	r5, [r3]
 694              	.L47:
 695              	.LBE171:
 696              	.LBE170:
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 697              		.loc 1 1124 0
 698 011c 214A     		ldr	r2, .L62+32
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 111


1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 699              		.loc 1 1134 0
 700 011e 2249     		ldr	r1, .L62+36
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 701              		.loc 1 1124 0
 702 0120 1368     		ldr	r3, [r2]
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703              		.loc 1 1134 0
 704 0122 0868     		ldr	r0, [r1]
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705              		.loc 1 1124 0
 706 0124 0133     		adds	r3, r3, #1
 707 0126 1360     		str	r3, [r2]
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 708              		.loc 1 1134 0
 709 0128 E26A     		ldr	r2, [r4, #44]
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 710              		.loc 1 1129 0
 711 012a A364     		str	r3, [r4, #72]
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712              		.loc 1 1134 0
 713 012c 0125     		movs	r5, #1
 714 012e 05FA02F3 		lsl	r3, r5, r2
 715 0132 0343     		orrs	r3, r3, r0
 716 0134 1420     		movs	r0, #20
 717 0136 0B60     		str	r3, [r1]
 718 0138 00FB0280 		mla	r0, r0, r2, r8
 719 013c 3946     		mov	r1, r7
 720 013e FFF7FEFF 		bl	vListInsertEnd
 721              	.LVL77:
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 722              		.loc 1 1138 0
 723 0142 FFF7FEFF 		bl	vPortExitCritical
 724              	.LVL78:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 725              		.loc 1 1140 0
 726 0146 194B     		ldr	r3, .L62+40
 727 0148 1B68     		ldr	r3, [r3]
 728 014a 63B1     		cbz	r3, .L36
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 729              		.loc 1 1144 0
 730 014c 3368     		ldr	r3, [r6]
 731 014e DA6A     		ldr	r2, [r3, #44]
 732 0150 E36A     		ldr	r3, [r4, #44]
 733 0152 9A42     		cmp	r2, r3
 734 0154 07D2     		bcs	.L36
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 735              		.loc 1 1146 0
 736 0156 164B     		ldr	r3, .L62+44
 737 0158 4FF08052 		mov	r2, #268435456
 738 015c 1A60     		str	r2, [r3]
 739              	.LVL79:
 740              		.syntax unified
 741              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 742 015e BFF34F8F 		dsb
 743              	@ 0 "" 2
 744              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 112


 745 0162 BFF36F8F 		isb
 746              	@ 0 "" 2
 747              	.LVL80:
 748              		.thumb
 749              		.syntax unified
 750              	.L36:
 751              	.LBE169:
 752              	.LBE168:
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753              		.loc 1 819 0
 754 0166 2846     		mov	r0, r5
 755 0168 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 756              	.LVL81:
 757              	.L45:
 758              	.LBB173:
 759              	.LBB172:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 760              		.loc 1 1107 0
 761 016c 0F4B     		ldr	r3, .L62+40
 762 016e 1B68     		ldr	r3, [r3]
 763 0170 002B     		cmp	r3, #0
 764 0172 D3D1     		bne	.L47
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 765              		.loc 1 1109 0
 766 0174 3368     		ldr	r3, [r6]
 767 0176 E26A     		ldr	r2, [r4, #44]
 768 0178 DB6A     		ldr	r3, [r3, #44]
 769 017a 9A42     		cmp	r2, r3
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 770              		.loc 1 1111 0
 771 017c 28BF     		it	cs
 772 017e 3460     		strcs	r4, [r6]
 773 0180 CCE7     		b	.L47
 774              	.L63:
 775 0182 00BF     		.align	2
 776              	.L62:
 777 0184 00000000 		.word	.LANCHOR9
 778 0188 00000000 		.word	.LANCHOR5
 779 018c 00000000 		.word	.LANCHOR13
 780 0190 00000000 		.word	.LANCHOR1
 781 0194 00000000 		.word	.LANCHOR8
 782 0198 00000000 		.word	.LANCHOR0
 783 019c 00000000 		.word	.LANCHOR2
 784 01a0 00000000 		.word	.LANCHOR7
 785 01a4 00000000 		.word	.LANCHOR15
 786 01a8 00000000 		.word	.LANCHOR6
 787 01ac 00000000 		.word	.LANCHOR14
 788 01b0 04ED00E0 		.word	-536810236
 789 01b4 00000000 		.word	.LANCHOR11
 790 01b8 00000000 		.word	.LANCHOR12
 791              	.LBE172:
 792              	.LBE173:
 793              		.cfi_endproc
 794              	.LFE8:
 796              		.section	.text.vTaskDelete,"ax",%progbits
 797              		.align	1
 798              		.global	vTaskDelete
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 113


 799              		.syntax unified
 800              		.thumb
 801              		.thumb_func
 802              		.fpu fpv4-sp-d16
 804              	vTaskDelete:
 805              	.LFB11:
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 806              		.loc 1 1163 0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 0, uses_anonymous_args = 0
 810              	.LVL82:
 811 0000 70B5     		push	{r4, r5, r6, lr}
 812              	.LCFI8:
 813              		.cfi_def_cfa_offset 16
 814              		.cfi_offset 4, -16
 815              		.cfi_offset 5, -12
 816              		.cfi_offset 6, -8
 817              		.cfi_offset 14, -4
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 818              		.loc 1 1163 0
 819 0002 0446     		mov	r4, r0
 820 0004 2A4D     		ldr	r5, .L79
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 821              		.loc 1 1166 0
 822 0006 FFF7FEFF 		bl	vPortEnterCritical
 823              	.LVL83:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824              		.loc 1 1170 0
 825 000a 04B9     		cbnz	r4, .L65
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826              		.loc 1 1170 0 is_stmt 0 discriminator 1
 827 000c 2C68     		ldr	r4, [r5]
 828              	.LVL84:
 829              	.L65:
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 830              		.loc 1 1173 0 is_stmt 1 discriminator 4
 831 000e 261D     		adds	r6, r4, #4
 832 0010 3046     		mov	r0, r6
 833 0012 FFF7FEFF 		bl	uxListRemove
 834              	.LVL85:
 835 0016 60B9     		cbnz	r0, .L66
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 836              		.loc 1 1175 0
 837 0018 E06A     		ldr	r0, [r4, #44]
 838 001a 264B     		ldr	r3, .L79+4
 839 001c 1421     		movs	r1, #20
 840 001e 4143     		muls	r1, r0, r1
 841 0020 5B58     		ldr	r3, [r3, r1]
 842 0022 33B9     		cbnz	r3, .L66
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 843              		.loc 1 1175 0 is_stmt 0 discriminator 1
 844 0024 2449     		ldr	r1, .L79+8
 845 0026 0122     		movs	r2, #1
 846 0028 0B68     		ldr	r3, [r1]
 847 002a 8240     		lsls	r2, r2, r0
 848 002c 23EA0203 		bic	r3, r3, r2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 114


 849 0030 0B60     		str	r3, [r1]
 850              	.L66:
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 851              		.loc 1 1183 0 is_stmt 1
 852 0032 A36A     		ldr	r3, [r4, #40]
 853 0034 1BB1     		cbz	r3, .L67
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 854              		.loc 1 1185 0
 855 0036 04F11800 		add	r0, r4, #24
 856 003a FFF7FEFF 		bl	uxListRemove
 857              	.LVL86:
 858              	.L67:
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859              		.loc 1 1196 0
 860 003e 1F4A     		ldr	r2, .L79+12
 861 0040 1368     		ldr	r3, [r2]
 862 0042 0133     		adds	r3, r3, #1
 863 0044 1360     		str	r3, [r2]
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 864              		.loc 1 1198 0
 865 0046 2B68     		ldr	r3, [r5]
 866 0048 A342     		cmp	r3, r4
 867 004a 1BD1     		bne	.L68
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 868              		.loc 1 1205 0
 869 004c 3146     		mov	r1, r6
 870 004e 1C48     		ldr	r0, .L79+16
 871 0050 FFF7FEFF 		bl	vListInsertEnd
 872              	.LVL87:
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 873              		.loc 1 1210 0
 874 0054 1B4A     		ldr	r2, .L79+20
 875 0056 1368     		ldr	r3, [r2]
 876 0058 0133     		adds	r3, r3, #1
 877 005a 1360     		str	r3, [r2]
 878              	.L69:
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879              		.loc 1 1234 0
 880 005c FFF7FEFF 		bl	vPortExitCritical
 881              	.LVL88:
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 882              		.loc 1 1238 0
 883 0060 194B     		ldr	r3, .L79+24
 884 0062 1B68     		ldr	r3, [r3]
 885 0064 1BB3     		cbz	r3, .L64
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 886              		.loc 1 1240 0
 887 0066 2B68     		ldr	r3, [r5]
 888 0068 A342     		cmp	r3, r4
 889 006a 20D1     		bne	.L64
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 890              		.loc 1 1242 0
 891 006c 174B     		ldr	r3, .L79+28
 892 006e 1B68     		ldr	r3, [r3]
 893 0070 ABB1     		cbz	r3, .L71
 894              	.LBB178:
 895              	.LBB179:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 115


 896              		.loc 2 195 0
 897              		.syntax unified
 898              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 899 0072 4FF05003 			mov r3, #80												
 900 0076 83F31188 		msr basepri, r3											
 901 007a BFF36F8F 		isb														
 902 007e BFF34F8F 		dsb														
 903              	
 904              	@ 0 "" 2
 905              	.LVL89:
 906              		.thumb
 907              		.syntax unified
 908              	.L72:
 909 0082 FEE7     		b	.L72
 910              	.L68:
 911              	.LBE179:
 912              	.LBE178:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
 913              		.loc 1 1225 0
 914 0084 124A     		ldr	r2, .L79+32
 915              	.LBB180:
 916              	.LBB181:
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 917              		.loc 1 3908 0
 918 0086 206B     		ldr	r0, [r4, #48]
 919              	.LBE181:
 920              	.LBE180:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
 921              		.loc 1 1225 0
 922 0088 1368     		ldr	r3, [r2]
 923 008a 013B     		subs	r3, r3, #1
 924 008c 1360     		str	r3, [r2]
 925              	.LVL90:
 926              	.LBB183:
 927              	.LBB182:
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 928              		.loc 1 3908 0
 929 008e FFF7FEFF 		bl	vPortFree
 930              	.LVL91:
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 931              		.loc 1 3909 0
 932 0092 2046     		mov	r0, r4
 933 0094 FFF7FEFF 		bl	vPortFree
 934              	.LVL92:
 935              	.LBE182:
 936              	.LBE183:
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 937              		.loc 1 1231 0
 938 0098 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 939              	.LVL93:
 940 009c DEE7     		b	.L69
 941              	.L71:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 942              		.loc 1 1243 0
 943 009e 0D4B     		ldr	r3, .L79+36
 944 00a0 4FF08052 		mov	r2, #268435456
 945 00a4 1A60     		str	r2, [r3]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 116


 946              		.syntax unified
 947              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 948 00a6 BFF34F8F 		dsb
 949              	@ 0 "" 2
 950              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 951 00aa BFF36F8F 		isb
 952              	@ 0 "" 2
 953              		.thumb
 954              		.syntax unified
 955              	.L64:
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 956              		.loc 1 1250 0
 957 00ae 70BD     		pop	{r4, r5, r6, pc}
 958              	.LVL94:
 959              	.L80:
 960              		.align	2
 961              	.L79:
 962 00b0 00000000 		.word	.LANCHOR5
 963 00b4 00000000 		.word	.LANCHOR11
 964 00b8 00000000 		.word	.LANCHOR6
 965 00bc 00000000 		.word	.LANCHOR15
 966 00c0 00000000 		.word	.LANCHOR8
 967 00c4 00000000 		.word	.LANCHOR10
 968 00c8 00000000 		.word	.LANCHOR14
 969 00cc 00000000 		.word	.LANCHOR16
 970 00d0 00000000 		.word	.LANCHOR9
 971 00d4 04ED00E0 		.word	-536810236
 972              		.cfi_endproc
 973              	.LFE11:
 975              		.section	.text.eTaskGetState,"ax",%progbits
 976              		.align	1
 977              		.global	eTaskGetState
 978              		.syntax unified
 979              		.thumb
 980              		.thumb_func
 981              		.fpu fpv4-sp-d16
 983              	eTaskGetState:
 984              	.LFB13:
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 985              		.loc 1 1387 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989              	.LVL95:
 990 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 991              	.LCFI9:
 992              		.cfi_def_cfa_offset 24
 993              		.cfi_offset 3, -24
 994              		.cfi_offset 4, -20
 995              		.cfi_offset 5, -16
 996              		.cfi_offset 6, -12
 997              		.cfi_offset 7, -8
 998              		.cfi_offset 14, -4
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 999              		.loc 1 1392 0
 1000 0002 0546     		mov	r5, r0
 1001 0004 40B9     		cbnz	r0, .L82
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 117


 1002              	.LBB190:
 1003              	.LBB191:
 1004              		.loc 2 195 0
 1005              		.syntax unified
 1006              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1007 0006 4FF05003 			mov r3, #80												
 1008 000a 83F31188 		msr basepri, r3											
 1009 000e BFF36F8F 		isb														
 1010 0012 BFF34F8F 		dsb														
 1011              	
 1012              	@ 0 "" 2
 1013              	.LVL96:
 1014              		.thumb
 1015              		.syntax unified
 1016              	.L83:
 1017 0016 FEE7     		b	.L83
 1018              	.L82:
 1019              	.LBE191:
 1020              	.LBE190:
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1021              		.loc 1 1394 0
 1022 0018 154B     		ldr	r3, .L93
 1023 001a 1B68     		ldr	r3, [r3]
 1024 001c 8342     		cmp	r3, r0
 1025 001e 20D0     		beq	.L86
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1026              		.loc 1 1401 0
 1027 0020 FFF7FEFF 		bl	vPortEnterCritical
 1028              	.LVL97:
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1029              		.loc 1 1404 0
 1030 0024 134B     		ldr	r3, .L93+4
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1031              		.loc 1 1403 0
 1032 0026 6C69     		ldr	r4, [r5, #20]
 1033              	.LVL98:
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1034              		.loc 1 1404 0
 1035 0028 1F68     		ldr	r7, [r3]
 1036              	.LVL99:
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1037              		.loc 1 1405 0
 1038 002a 134B     		ldr	r3, .L93+8
 1039 002c 1E68     		ldr	r6, [r3]
 1040              	.LVL100:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1041              		.loc 1 1407 0
 1042 002e FFF7FEFF 		bl	vPortExitCritical
 1043              	.LVL101:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1044              		.loc 1 1409 0
 1045 0032 BC42     		cmp	r4, r7
 1046 0034 17D0     		beq	.L89
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1047              		.loc 1 1409 0 is_stmt 0 discriminator 1
 1048 0036 B442     		cmp	r4, r6
 1049 0038 15D0     		beq	.L89
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 118


1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1050              		.loc 1 1417 0 is_stmt 1
 1051 003a 104B     		ldr	r3, .L93+12
 1052 003c 9C42     		cmp	r4, r3
 1053 003e 08D1     		bne	.L85
 1054              	.LVL102:
 1055              	.LBB192:
 1056              	.LBB193:
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1057              		.loc 1 1422 0
 1058 0040 AB6A     		ldr	r3, [r5, #40]
 1059 0042 83B9     		cbnz	r3, .L89
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 1060              		.loc 1 1430 0
 1061 0044 95F86030 		ldrb	r3, [r5, #96]	@ zero_extendqisi2
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1062              		.loc 1 1436 0
 1063 0048 012B     		cmp	r3, #1
 1064 004a 0CBF     		ite	eq
 1065 004c 0220     		moveq	r0, #2
 1066 004e 0320     		movne	r0, #3
 1067              	.LVL103:
 1068              	.L84:
 1069              	.LBE193:
 1070              	.LBE192:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1071              		.loc 1 1471 0
 1072 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1073              	.LVL104:
 1074              	.L85:
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1075              		.loc 1 1453 0
 1076 0052 0B4B     		ldr	r3, .L93+16
 1077 0054 9C42     		cmp	r4, r3
 1078 0056 08D0     		beq	.L91
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1079              		.loc 1 1466 0 discriminator 1
 1080 0058 002C     		cmp	r4, #0
 1081 005a 0CBF     		ite	eq
 1082 005c 0420     		moveq	r0, #4
 1083 005e 0120     		movne	r0, #1
 1084 0060 F6E7     		b	.L84
 1085              	.LVL105:
 1086              	.L86:
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1087              		.loc 1 1397 0
 1088 0062 0020     		movs	r0, #0
 1089              	.LVL106:
 1090 0064 F4E7     		b	.L84
 1091              	.LVL107:
 1092              	.L89:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1093              		.loc 1 1413 0
 1094 0066 0220     		movs	r0, #2
 1095 0068 F2E7     		b	.L84
 1096              	.L91:
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 119


 1097              		.loc 1 1458 0
 1098 006a 0420     		movs	r0, #4
 1099 006c F0E7     		b	.L84
 1100              	.L94:
 1101 006e 00BF     		.align	2
 1102              	.L93:
 1103 0070 00000000 		.word	.LANCHOR5
 1104 0074 00000000 		.word	.LANCHOR2
 1105 0078 00000000 		.word	.LANCHOR7
 1106 007c 00000000 		.word	.LANCHOR0
 1107 0080 00000000 		.word	.LANCHOR8
 1108              		.cfi_endproc
 1109              	.LFE13:
 1111              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1112              		.align	1
 1113              		.global	uxTaskPriorityGet
 1114              		.syntax unified
 1115              		.thumb
 1116              		.thumb_func
 1117              		.fpu fpv4-sp-d16
 1119              	uxTaskPriorityGet:
 1120              	.LFB14:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1121              		.loc 1 1479 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 0
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 1125              	.LVL108:
 1126 0000 10B5     		push	{r4, lr}
 1127              	.LCFI10:
 1128              		.cfi_def_cfa_offset 8
 1129              		.cfi_offset 4, -8
 1130              		.cfi_offset 14, -4
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1131              		.loc 1 1479 0
 1132 0002 0446     		mov	r4, r0
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1133              		.loc 1 1483 0
 1134 0004 FFF7FEFF 		bl	vPortEnterCritical
 1135              	.LVL109:
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1136              		.loc 1 1487 0
 1137 0008 0CB9     		cbnz	r4, .L96
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1138              		.loc 1 1487 0 is_stmt 0 discriminator 1
 1139 000a 034B     		ldr	r3, .L97
 1140 000c 1C68     		ldr	r4, [r3]
 1141              	.LVL110:
 1142              	.L96:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1143              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1144 000e E46A     		ldr	r4, [r4, #44]
 1145              	.LVL111:
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1146              		.loc 1 1490 0 discriminator 4
 1147 0010 FFF7FEFF 		bl	vPortExitCritical
 1148              	.LVL112:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 120


1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1149              		.loc 1 1493 0 discriminator 4
 1150 0014 2046     		mov	r0, r4
 1151 0016 10BD     		pop	{r4, pc}
 1152              	.LVL113:
 1153              	.L98:
 1154              		.align	2
 1155              	.L97:
 1156 0018 00000000 		.word	.LANCHOR5
 1157              		.cfi_endproc
 1158              	.LFE14:
 1160              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1161              		.align	1
 1162              		.global	uxTaskPriorityGetFromISR
 1163              		.syntax unified
 1164              		.thumb
 1165              		.thumb_func
 1166              		.fpu fpv4-sp-d16
 1168              	uxTaskPriorityGetFromISR:
 1169              	.LFB15:
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1170              		.loc 1 1501 0
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 0
 1173              		@ frame_needed = 0, uses_anonymous_args = 0
 1174              	.LVL114:
 1175 0000 10B5     		push	{r4, lr}
 1176              	.LCFI11:
 1177              		.cfi_def_cfa_offset 8
 1178              		.cfi_offset 4, -8
 1179              		.cfi_offset 14, -4
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1180              		.loc 1 1501 0
 1181 0002 0446     		mov	r4, r0
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1182              		.loc 1 1521 0
 1183 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1184              	.LVL115:
 1185              	.LBB194:
 1186              	.LBB195:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1187              		.loc 2 211 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 121


 1188              		.syntax unified
 1189              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1190 0008 EFF31183 			mrs r3, basepri											
 1191 000c 4FF05002 		mov r2, #80												
 1192 0010 82F31188 		msr basepri, r2											
 1193 0014 BFF36F8F 		isb														
 1194 0018 BFF34F8F 		dsb														
 1195              	
 1196              	@ 0 "" 2
 1197              		.thumb
 1198              		.syntax unified
 1199              	.LBE195:
 1200              	.LBE194:
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1201              		.loc 1 1527 0
 1202 001c 0CB9     		cbnz	r4, .L100
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1203              		.loc 1 1527 0 is_stmt 0 discriminator 1
 1204 001e 034A     		ldr	r2, .L101
 1205 0020 1468     		ldr	r4, [r2]
 1206              	.LVL116:
 1207              	.L100:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1208              		.loc 1 1528 0 is_stmt 1 discriminator 4
 1209 0022 E06A     		ldr	r0, [r4, #44]
 1210              	.LVL117:
 1211              	.LBB196:
 1212              	.LBB197:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1213              		.loc 2 229 0 discriminator 4
 1214              		.syntax unified
 1215              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1216 0024 83F31188 			msr basepri, r3	
 1217              	@ 0 "" 2
 1218              	.LVL118:
 1219              		.thumb
 1220              		.syntax unified
 1221              	.LBE197:
 1222              	.LBE196:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 122


 1223              		.loc 1 1533 0 discriminator 4
 1224 0028 10BD     		pop	{r4, pc}
 1225              	.LVL119:
 1226              	.L102:
 1227 002a 00BF     		.align	2
 1228              	.L101:
 1229 002c 00000000 		.word	.LANCHOR5
 1230              		.cfi_endproc
 1231              	.LFE15:
 1233              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1234              		.align	1
 1235              		.global	vTaskPrioritySet
 1236              		.syntax unified
 1237              		.thumb
 1238              		.thumb_func
 1239              		.fpu fpv4-sp-d16
 1241              	vTaskPrioritySet:
 1242              	.LFB16:
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1243              		.loc 1 1541 0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 0
 1246              		@ frame_needed = 0, uses_anonymous_args = 0
 1247              	.LVL120:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1248              		.loc 1 1546 0
 1249 0000 0629     		cmp	r1, #6
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1250              		.loc 1 1541 0
 1251 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1252              	.LCFI12:
 1253              		.cfi_def_cfa_offset 24
 1254              		.cfi_offset 4, -24
 1255              		.cfi_offset 5, -20
 1256              		.cfi_offset 6, -16
 1257              		.cfi_offset 7, -12
 1258              		.cfi_offset 8, -8
 1259              		.cfi_offset 14, -4
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1260              		.loc 1 1541 0
 1261 0006 0446     		mov	r4, r0
 1262 0008 0D46     		mov	r5, r1
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1263              		.loc 1 1546 0
 1264 000a 08D9     		bls	.L104
 1265              	.LBB198:
 1266              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1267              		.loc 2 195 0
 1268              		.syntax unified
 1269              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1270 000c 4FF05003 			mov r3, #80												
 1271 0010 83F31188 		msr basepri, r3											
 1272 0014 BFF36F8F 		isb														
 1273 0018 BFF34F8F 		dsb														
 1274              	
 1275              	@ 0 "" 2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 123


 1276              	.LVL121:
 1277              		.thumb
 1278              		.syntax unified
 1279              	.L105:
 1280 001c FEE7     		b	.L105
 1281              	.L104:
 1282              	.LBE199:
 1283              	.LBE198:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1284              		.loc 1 1558 0
 1285 001e FFF7FEFF 		bl	vPortEnterCritical
 1286              	.LVL122:
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1287              		.loc 1 1562 0
 1288 0022 0CB9     		cbnz	r4, .L106
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1289              		.loc 1 1562 0 is_stmt 0 discriminator 1
 1290 0024 274B     		ldr	r3, .L120
 1291 0026 1C68     		ldr	r4, [r3]
 1292              	.LVL123:
 1293              	.L106:
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1294              		.loc 1 1568 0 is_stmt 1 discriminator 4
 1295 0028 226D     		ldr	r2, [r4, #80]
 1296              	.LVL124:
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1297              		.loc 1 1576 0 discriminator 4
 1298 002a 9542     		cmp	r5, r2
 1299 002c 3FD0     		beq	.L108
 1300 002e 254B     		ldr	r3, .L120
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1301              		.loc 1 1580 0
 1302 0030 41D9     		bls	.L109
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1303              		.loc 1 1582 0
 1304 0032 1968     		ldr	r1, [r3]
 1305 0034 A142     		cmp	r1, r4
 1306 0036 43D0     		beq	.L116
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1307              		.loc 1 1587 0
 1308 0038 1B68     		ldr	r3, [r3]
 1309 003a DE6A     		ldr	r6, [r3, #44]
 1310 003c AE42     		cmp	r6, r5
 1311 003e 8CBF     		ite	hi
 1312 0040 0026     		movhi	r6, #0
 1313 0042 0126     		movls	r6, #1
 1314              	.L110:
 1315              	.LVL125:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1316              		.loc 1 1620 0
 1317 0044 D4F82C80 		ldr	r8, [r4, #44]
 1318              	.LVL126:
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1319              		.loc 1 1646 0
 1320 0048 A369     		ldr	r3, [r4, #24]
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1321              		.loc 1 1636 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 124


 1322 004a 2565     		str	r5, [r4, #80]
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1323              		.loc 1 1626 0
 1324 004c 4245     		cmp	r2, r8
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1325              		.loc 1 1628 0
 1326 004e 08BF     		it	eq
 1327 0050 E562     		streq	r5, [r4, #44]
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1328              		.loc 1 1646 0
 1329 0052 002B     		cmp	r3, #0
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1330              		.loc 1 1648 0
 1331 0054 A4BF     		itt	ge
 1332 0056 C5F10705 		rsbge	r5, r5, #7
 1333              	.LVL127:
 1334 005a A561     		strge	r5, [r4, #24]
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1335              		.loc 1 1659 0
 1336 005c 1A4D     		ldr	r5, .L120+4
 1337 005e 6269     		ldr	r2, [r4, #20]
 1338              	.LVL128:
 1339 0060 1423     		movs	r3, #20
 1340 0062 03FB0853 		mla	r3, r3, r8, r5
 1341 0066 9A42     		cmp	r2, r3
 1342 0068 18D1     		bne	.L113
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1343              		.loc 1 1664 0
 1344 006a 271D     		adds	r7, r4, #4
 1345 006c 3846     		mov	r0, r7
 1346 006e FFF7FEFF 		bl	uxListRemove
 1347              	.LVL129:
 1348 0072 164A     		ldr	r2, .L120+8
 1349 0074 30B9     		cbnz	r0, .L114
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1350              		.loc 1 1669 0
 1351 0076 1368     		ldr	r3, [r2]
 1352 0078 0120     		movs	r0, #1
 1353 007a 00FA08F0 		lsl	r0, r0, r8
 1354 007e 23EA0003 		bic	r3, r3, r0
 1355 0082 1360     		str	r3, [r2]
 1356              	.L114:
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1357              		.loc 1 1675 0
 1358 0084 E06A     		ldr	r0, [r4, #44]
 1359 0086 1168     		ldr	r1, [r2]
 1360 0088 0123     		movs	r3, #1
 1361 008a 8340     		lsls	r3, r3, r0
 1362 008c 0B43     		orrs	r3, r3, r1
 1363 008e 1360     		str	r3, [r2]
 1364 0090 1423     		movs	r3, #20
 1365 0092 3946     		mov	r1, r7
 1366 0094 03FB0050 		mla	r0, r3, r0, r5
 1367 0098 FFF7FEFF 		bl	vListInsertEnd
 1368              	.LVL130:
 1369              	.L113:
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 125


 1370              		.loc 1 1682 0
 1371 009c 3EB1     		cbz	r6, .L108
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1372              		.loc 1 1684 0
 1373 009e 0C4B     		ldr	r3, .L120+12
 1374 00a0 4FF08052 		mov	r2, #268435456
 1375 00a4 1A60     		str	r2, [r3]
 1376              		.syntax unified
 1377              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1378 00a6 BFF34F8F 		dsb
 1379              	@ 0 "" 2
 1380              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1381 00aa BFF36F8F 		isb
 1382              	@ 0 "" 2
 1383              	.LVL131:
 1384              		.thumb
 1385              		.syntax unified
 1386              	.L108:
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1387              		.loc 1 1697 0
 1388 00ae BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1389              	.LCFI13:
 1390              		.cfi_remember_state
 1391              		.cfi_restore 14
 1392              		.cfi_restore 8
 1393              		.cfi_restore 7
 1394              		.cfi_restore 6
 1395              		.cfi_restore 5
 1396              		.cfi_restore 4
 1397              		.cfi_def_cfa_offset 0
 1398              	.LVL132:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1399              		.loc 1 1696 0
 1400 00b2 FFF7FEBF 		b	vPortExitCritical
 1401              	.LVL133:
 1402              	.L109:
 1403              	.LCFI14:
 1404              		.cfi_restore_state
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1405              		.loc 1 1603 0
 1406 00b6 1E68     		ldr	r6, [r3]
 1407 00b8 331B     		subs	r3, r6, r4
 1408 00ba 5E42     		rsbs	r6, r3, #0
 1409 00bc 5E41     		adcs	r6, r6, r3
 1410 00be C1E7     		b	.L110
 1411              	.L116:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1412              		.loc 1 1544 0
 1413 00c0 0026     		movs	r6, #0
 1414 00c2 BFE7     		b	.L110
 1415              	.L121:
 1416              		.align	2
 1417              	.L120:
 1418 00c4 00000000 		.word	.LANCHOR5
 1419 00c8 00000000 		.word	.LANCHOR11
 1420 00cc 00000000 		.word	.LANCHOR6
 1421 00d0 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 126


 1422              		.cfi_endproc
 1423              	.LFE16:
 1425              		.section	.text.vTaskResume,"ax",%progbits
 1426              		.align	1
 1427              		.global	vTaskResume
 1428              		.syntax unified
 1429              		.thumb
 1430              		.thumb_func
 1431              		.fpu fpv4-sp-d16
 1433              	vTaskResume:
 1434              	.LFB19:
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1435              		.loc 1 1852 0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 0
 1438              		@ frame_needed = 0, uses_anonymous_args = 0
 1439              	.LVL134:
 1440 0000 70B5     		push	{r4, r5, r6, lr}
 1441              	.LCFI15:
 1442              		.cfi_def_cfa_offset 16
 1443              		.cfi_offset 4, -16
 1444              		.cfi_offset 5, -12
 1445              		.cfi_offset 6, -8
 1446              		.cfi_offset 14, -4
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1447              		.loc 1 1856 0
 1448 0002 0446     		mov	r4, r0
 1449 0004 40B9     		cbnz	r0, .L123
 1450              	.LBB200:
 1451              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1452              		.loc 2 195 0
 1453              		.syntax unified
 1454              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1455 0006 4FF05003 			mov r3, #80												
 1456 000a 83F31188 		msr basepri, r3											
 1457 000e BFF36F8F 		isb														
 1458 0012 BFF34F8F 		dsb														
 1459              	
 1460              	@ 0 "" 2
 1461              	.LVL135:
 1462              		.thumb
 1463              		.syntax unified
 1464              	.L124:
 1465 0016 FEE7     		b	.L124
 1466              	.L123:
 1467              	.LBE201:
 1468              	.LBE200:
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1469              		.loc 1 1860 0
 1470 0018 164D     		ldr	r5, .L129
 1471 001a 2B68     		ldr	r3, [r5]
 1472 001c 8342     		cmp	r3, r0
 1473 001e 28D0     		beq	.L122
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1474              		.loc 1 1862 0
 1475 0020 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 127


 1476              	.LVL136:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1477              		.loc 1 1864 0
 1478 0024 2046     		mov	r0, r4
 1479 0026 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1480              	.LVL137:
 1481 002a F0B1     		cbz	r0, .L127
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1482              		.loc 1 1870 0
 1483 002c 261D     		adds	r6, r4, #4
 1484 002e 3046     		mov	r0, r6
 1485 0030 FFF7FEFF 		bl	uxListRemove
 1486              	.LVL138:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1487              		.loc 1 1871 0
 1488 0034 1049     		ldr	r1, .L129+4
 1489 0036 E26A     		ldr	r2, [r4, #44]
 1490 0038 0868     		ldr	r0, [r1]
 1491 003a 0123     		movs	r3, #1
 1492 003c 9340     		lsls	r3, r3, r2
 1493 003e 0343     		orrs	r3, r3, r0
 1494 0040 0B60     		str	r3, [r1]
 1495 0042 0E4B     		ldr	r3, .L129+8
 1496 0044 1420     		movs	r0, #20
 1497 0046 00FB0230 		mla	r0, r0, r2, r3
 1498 004a 3146     		mov	r1, r6
 1499 004c FFF7FEFF 		bl	vListInsertEnd
 1500              	.LVL139:
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1501              		.loc 1 1874 0
 1502 0050 2B68     		ldr	r3, [r5]
 1503 0052 E26A     		ldr	r2, [r4, #44]
 1504 0054 DB6A     		ldr	r3, [r3, #44]
 1505 0056 9A42     		cmp	r2, r3
 1506 0058 07D3     		bcc	.L127
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1507              		.loc 1 1879 0
 1508 005a 094B     		ldr	r3, .L129+12
 1509 005c 4FF08052 		mov	r2, #268435456
 1510 0060 1A60     		str	r2, [r3]
 1511              		.syntax unified
 1512              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1513 0062 BFF34F8F 		dsb
 1514              	@ 0 "" 2
 1515              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1516 0066 BFF36F8F 		isb
 1517              	@ 0 "" 2
 1518              		.thumb
 1519              		.syntax unified
 1520              	.L127:
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1521              		.loc 1 1897 0
 1522 006a BDE87040 		pop	{r4, r5, r6, lr}
 1523              	.LCFI16:
 1524              		.cfi_remember_state
 1525              		.cfi_restore 14
 1526              		.cfi_restore 6
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 128


 1527              		.cfi_restore 5
 1528              		.cfi_restore 4
 1529              		.cfi_def_cfa_offset 0
 1530              	.LVL140:
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1531              		.loc 1 1891 0
 1532 006e FFF7FEBF 		b	vPortExitCritical
 1533              	.LVL141:
 1534              	.L122:
 1535              	.LCFI17:
 1536              		.cfi_restore_state
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1537              		.loc 1 1897 0
 1538 0072 70BD     		pop	{r4, r5, r6, pc}
 1539              	.L130:
 1540              		.align	2
 1541              	.L129:
 1542 0074 00000000 		.word	.LANCHOR5
 1543 0078 00000000 		.word	.LANCHOR6
 1544 007c 00000000 		.word	.LANCHOR11
 1545 0080 04ED00E0 		.word	-536810236
 1546              		.cfi_endproc
 1547              	.LFE19:
 1549              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1550              		.align	1
 1551              		.global	xTaskResumeFromISR
 1552              		.syntax unified
 1553              		.thumb
 1554              		.thumb_func
 1555              		.fpu fpv4-sp-d16
 1557              	xTaskResumeFromISR:
 1558              	.LFB20:
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1559              		.loc 1 1906 0
 1560              		.cfi_startproc
 1561              		@ args = 0, pretend = 0, frame = 0
 1562              		@ frame_needed = 0, uses_anonymous_args = 0
 1563              	.LVL142:
 1564 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1565              	.LCFI18:
 1566              		.cfi_def_cfa_offset 24
 1567              		.cfi_offset 3, -24
 1568              		.cfi_offset 4, -20
 1569              		.cfi_offset 5, -16
 1570              		.cfi_offset 6, -12
 1571              		.cfi_offset 7, -8
 1572              		.cfi_offset 14, -4
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1573              		.loc 1 1911 0
 1574 0002 0546     		mov	r5, r0
 1575 0004 40B9     		cbnz	r0, .L132
 1576              	.LBB202:
 1577              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1578              		.loc 2 195 0
 1579              		.syntax unified
 1580              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 129


 1581 0006 4FF05003 			mov r3, #80												
 1582 000a 83F31188 		msr basepri, r3											
 1583 000e BFF36F8F 		isb														
 1584 0012 BFF34F8F 		dsb														
 1585              	
 1586              	@ 0 "" 2
 1587              	.LVL143:
 1588              		.thumb
 1589              		.syntax unified
 1590              	.L133:
 1591 0016 FEE7     		b	.L133
 1592              	.L132:
 1593              	.LBE203:
 1594              	.LBE202:
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1595              		.loc 1 1929 0
 1596 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1597              	.LVL144:
 1598              	.LBB204:
 1599              	.LBB205:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1600              		.loc 2 211 0
 1601              		.syntax unified
 1602              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1603 001c EFF31186 			mrs r6, basepri											
 1604 0020 4FF05003 		mov r3, #80												
 1605 0024 83F31188 		msr basepri, r3											
 1606 0028 BFF36F8F 		isb														
 1607 002c BFF34F8F 		dsb														
 1608              	
 1609              	@ 0 "" 2
 1610              		.thumb
 1611              		.syntax unified
 1612              	.LBE205:
 1613              	.LBE204:
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1614              		.loc 1 1933 0
 1615 0030 2846     		mov	r0, r5
 1616 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1617              	.LVL145:
 1618 0036 38B3     		cbz	r0, .L136
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1619              		.loc 1 1938 0
 1620 0038 144B     		ldr	r3, .L137
 1621 003a 1B68     		ldr	r3, [r3]
 1622 003c EBB9     		cbnz	r3, .L135
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1623              		.loc 1 1942 0
 1624 003e 144B     		ldr	r3, .L137+4
 1625 0040 EC6A     		ldr	r4, [r5, #44]
 1626 0042 1B68     		ldr	r3, [r3]
 1627 0044 D86A     		ldr	r0, [r3, #44]
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1628              		.loc 1 1951 0
 1629 0046 2F1D     		adds	r7, r5, #4
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1630              		.loc 1 1942 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 130


 1631 0048 8442     		cmp	r4, r0
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1632              		.loc 1 1951 0
 1633 004a 3846     		mov	r0, r7
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1634              		.loc 1 1942 0
 1635 004c 34BF     		ite	cc
 1636 004e 0024     		movcc	r4, #0
 1637 0050 0124     		movcs	r4, #1
 1638              	.LVL146:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1639              		.loc 1 1951 0
 1640 0052 FFF7FEFF 		bl	uxListRemove
 1641              	.LVL147:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1642              		.loc 1 1952 0
 1643 0056 0F49     		ldr	r1, .L137+8
 1644 0058 EA6A     		ldr	r2, [r5, #44]
 1645 005a 0868     		ldr	r0, [r1]
 1646 005c 0123     		movs	r3, #1
 1647 005e 9340     		lsls	r3, r3, r2
 1648 0060 0343     		orrs	r3, r3, r0
 1649 0062 0B60     		str	r3, [r1]
 1650 0064 0C4B     		ldr	r3, .L137+12
 1651 0066 1420     		movs	r0, #20
 1652 0068 3946     		mov	r1, r7
 1653 006a 00FB0230 		mla	r0, r0, r2, r3
 1654 006e FFF7FEFF 		bl	vListInsertEnd
 1655              	.LVL148:
 1656              	.L134:
 1657              	.LBB206:
 1658              	.LBB207:
 1659              		.loc 2 229 0
 1660              		.syntax unified
 1661              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1662 0072 86F31188 			msr basepri, r6	
 1663              	@ 0 "" 2
 1664              	.LVL149:
 1665              		.thumb
 1666              		.syntax unified
 1667              	.LBE207:
 1668              	.LBE206:
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1669              		.loc 1 1970 0
 1670 0076 2046     		mov	r0, r4
 1671 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1672              	.LVL150:
 1673              	.L135:
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1674              		.loc 1 1959 0
 1675 007a 05F11801 		add	r1, r5, #24
 1676 007e 0748     		ldr	r0, .L137+16
 1677 0080 FFF7FEFF 		bl	vListInsertEnd
 1678              	.LVL151:
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1679              		.loc 1 1907 0
 1680 0084 0024     		movs	r4, #0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 131


 1681 0086 F4E7     		b	.L134
 1682              	.L136:
 1683 0088 0446     		mov	r4, r0
 1684 008a F2E7     		b	.L134
 1685              	.L138:
 1686              		.align	2
 1687              	.L137:
 1688 008c 00000000 		.word	.LANCHOR16
 1689 0090 00000000 		.word	.LANCHOR5
 1690 0094 00000000 		.word	.LANCHOR6
 1691 0098 00000000 		.word	.LANCHOR11
 1692 009c 00000000 		.word	.LANCHOR1
 1693              		.cfi_endproc
 1694              	.LFE20:
 1696              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1697              		.align	1
 1698              		.global	vTaskStartScheduler
 1699              		.syntax unified
 1700              		.thumb
 1701              		.thumb_func
 1702              		.fpu fpv4-sp-d16
 1704              	vTaskStartScheduler:
 1705              	.LFB21:
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1706              		.loc 1 1976 0
 1707              		.cfi_startproc
 1708              		@ args = 0, pretend = 0, frame = 0
 1709              		@ frame_needed = 0, uses_anonymous_args = 0
 1710 0000 13B5     		push	{r0, r1, r4, lr}
 1711              	.LCFI19:
 1712              		.cfi_def_cfa_offset 16
 1713              		.cfi_offset 4, -8
 1714              		.cfi_offset 14, -4
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
 1715              		.loc 1 2009 0
 1716 0002 184B     		ldr	r3, .L143
 1717 0004 0193     		str	r3, [sp, #4]
 1718 0006 0024     		movs	r4, #0
 1719 0008 0094     		str	r4, [sp]
 1720 000a 2346     		mov	r3, r4
 1721 000c 4FF48072 		mov	r2, #256
 1722 0010 1549     		ldr	r1, .L143+4
 1723 0012 1648     		ldr	r0, .L143+8
 1724 0014 FFF7FEFF 		bl	xTaskCreate
 1725              	.LVL152:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1726              		.loc 1 2031 0
 1727 0018 0128     		cmp	r0, #1
 1728 001a 16D1     		bne	.L140
 1729              	.LBB208:
 1730              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1731              		.loc 2 195 0
 1732              		.syntax unified
 1733              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1734 001c 4FF05003 			mov r3, #80												
 1735 0020 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 132


 1736 0024 BFF36F8F 		isb														
 1737 0028 BFF34F8F 		dsb														
 1738              	
 1739              	@ 0 "" 2
 1740              		.thumb
 1741              		.syntax unified
 1742              	.LBE209:
 1743              	.LBE208:
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1744              		.loc 1 2059 0
 1745 002c 104B     		ldr	r3, .L143+12
 1746 002e 4FF0FF32 		mov	r2, #-1
 1747 0032 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1748              		.loc 1 2060 0
 1749 0034 0F4B     		ldr	r3, .L143+16
 1750 0036 1860     		str	r0, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1751              		.loc 1 2061 0
 1752 0038 0F4B     		ldr	r3, .L143+20
 1753 003a 1C60     		str	r4, [r3]
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1754              		.loc 1 2069 0
 1755 003c FFF7FEFF 		bl	configureTimerForRunTimeStats
 1756              	.LVL153:
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1757              		.loc 1 2096 0
 1758 0040 02B0     		add	sp, sp, #8
 1759              	.LCFI20:
 1760              		.cfi_remember_state
 1761              		.cfi_def_cfa_offset 8
 1762              		@ sp needed
 1763 0042 BDE81040 		pop	{r4, lr}
 1764              	.LCFI21:
 1765              		.cfi_restore 14
 1766              		.cfi_restore 4
 1767              		.cfi_def_cfa_offset 0
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1768              		.loc 1 2075 0
 1769 0046 FFF7FEBF 		b	xPortStartScheduler
 1770              	.LVL154:
 1771              	.L140:
 1772              	.LCFI22:
 1773              		.cfi_restore_state
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1774              		.loc 1 2090 0
 1775 004a 0130     		adds	r0, r0, #1
 1776              	.LVL155:
 1777 004c 08D1     		bne	.L139
 1778              	.LBB210:
 1779              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1780              		.loc 2 195 0
 1781              		.syntax unified
 1782              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1783 004e 4FF05003 			mov r3, #80												
 1784 0052 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 133


 1785 0056 BFF36F8F 		isb														
 1786 005a BFF34F8F 		dsb														
 1787              	
 1788              	@ 0 "" 2
 1789              	.LVL156:
 1790              		.thumb
 1791              		.syntax unified
 1792              	.L142:
 1793 005e FEE7     		b	.L142
 1794              	.L139:
 1795              	.LBE211:
 1796              	.LBE210:
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1797              		.loc 1 2096 0
 1798 0060 02B0     		add	sp, sp, #8
 1799              	.LCFI23:
 1800              		.cfi_def_cfa_offset 8
 1801              		@ sp needed
 1802 0062 10BD     		pop	{r4, pc}
 1803              	.L144:
 1804              		.align	2
 1805              	.L143:
 1806 0064 00000000 		.word	.LANCHOR17
 1807 0068 00000000 		.word	.LC0
 1808 006c 00000000 		.word	prvIdleTask
 1809 0070 00000000 		.word	.LANCHOR3
 1810 0074 00000000 		.word	.LANCHOR14
 1811 0078 00000000 		.word	.LANCHOR4
 1812              		.cfi_endproc
 1813              	.LFE21:
 1815              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1816              		.align	1
 1817              		.global	vTaskEndScheduler
 1818              		.syntax unified
 1819              		.thumb
 1820              		.thumb_func
 1821              		.fpu fpv4-sp-d16
 1823              	vTaskEndScheduler:
 1824              	.LFB22:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1825              		.loc 1 2100 0
 1826              		.cfi_startproc
 1827              		@ args = 0, pretend = 0, frame = 0
 1828              		@ frame_needed = 0, uses_anonymous_args = 0
 1829              		@ link register save eliminated.
 1830              	.LBB212:
 1831              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1832              		.loc 2 195 0
 1833              		.syntax unified
 1834              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1835 0000 4FF05003 			mov r3, #80												
 1836 0004 83F31188 		msr basepri, r3											
 1837 0008 BFF36F8F 		isb														
 1838 000c BFF34F8F 		dsb														
 1839              	
 1840              	@ 0 "" 2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 134


 1841              		.thumb
 1842              		.syntax unified
 1843              	.LBE213:
 1844              	.LBE212:
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1845              		.loc 1 2105 0
 1846 0010 024B     		ldr	r3, .L146
 1847 0012 0022     		movs	r2, #0
 1848 0014 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1849              		.loc 1 2106 0
 1850 0016 FFF7FEBF 		b	vPortEndScheduler
 1851              	.LVL157:
 1852              	.L147:
 1853 001a 00BF     		.align	2
 1854              	.L146:
 1855 001c 00000000 		.word	.LANCHOR14
 1856              		.cfi_endproc
 1857              	.LFE22:
 1859              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1860              		.align	1
 1861              		.global	vTaskSuspendAll
 1862              		.syntax unified
 1863              		.thumb
 1864              		.thumb_func
 1865              		.fpu fpv4-sp-d16
 1867              	vTaskSuspendAll:
 1868              	.LFB23:
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1869              		.loc 1 2111 0
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 0
 1872              		@ frame_needed = 0, uses_anonymous_args = 0
 1873              		@ link register save eliminated.
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1874              		.loc 1 2123 0
 1875 0000 024A     		ldr	r2, .L149
 1876 0002 1368     		ldr	r3, [r2]
 1877 0004 0133     		adds	r3, r3, #1
 1878 0006 1360     		str	r3, [r2]
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1879              		.loc 1 2127 0
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1880              		.loc 1 2128 0
 1881 0008 7047     		bx	lr
 1882              	.L150:
 1883 000a 00BF     		.align	2
 1884              	.L149:
 1885 000c 00000000 		.word	.LANCHOR16
 1886              		.cfi_endproc
 1887              	.LFE23:
 1889              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1890              		.align	1
 1891              		.global	xTaskGetTickCount
 1892              		.syntax unified
 1893              		.thumb
 1894              		.thumb_func
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 135


 1895              		.fpu fpv4-sp-d16
 1897              	xTaskGetTickCount:
 1898              	.LFB25:
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1899              		.loc 1 2305 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 0
 1902              		@ frame_needed = 0, uses_anonymous_args = 0
 1903              		@ link register save eliminated.
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1904              		.loc 1 2311 0
 1905 0000 014B     		ldr	r3, .L152
 1906 0002 1868     		ldr	r0, [r3]
 1907              	.LVL158:
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1908              		.loc 1 2316 0
 1909 0004 7047     		bx	lr
 1910              	.L153:
 1911 0006 00BF     		.align	2
 1912              	.L152:
 1913 0008 00000000 		.word	.LANCHOR4
 1914              		.cfi_endproc
 1915              	.LFE25:
 1917              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1918              		.align	1
 1919              		.global	xTaskGetTickCountFromISR
 1920              		.syntax unified
 1921              		.thumb
 1922              		.thumb_func
 1923              		.fpu fpv4-sp-d16
 1925              	xTaskGetTickCountFromISR:
 1926              	.LFB26:
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1927              		.loc 1 2320 0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 0
 1930              		@ frame_needed = 0, uses_anonymous_args = 0
 1931 0000 08B5     		push	{r3, lr}
 1932              	.LCFI24:
 1933              		.cfi_def_cfa_offset 8
 1934              		.cfi_offset 3, -8
 1935              		.cfi_offset 14, -4
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1936              		.loc 1 2338 0
 1937 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1938              	.LVL159:
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1939              		.loc 1 2342 0
 1940 0006 014B     		ldr	r3, .L155
 1941 0008 1868     		ldr	r0, [r3]
 1942              	.LVL160:
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1943              		.loc 1 2347 0
 1944 000a 08BD     		pop	{r3, pc}
 1945              	.L156:
 1946              		.align	2
 1947              	.L155:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 136


 1948 000c 00000000 		.word	.LANCHOR4
 1949              		.cfi_endproc
 1950              	.LFE26:
 1952              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1953              		.align	1
 1954              		.global	uxTaskGetNumberOfTasks
 1955              		.syntax unified
 1956              		.thumb
 1957              		.thumb_func
 1958              		.fpu fpv4-sp-d16
 1960              	uxTaskGetNumberOfTasks:
 1961              	.LFB27:
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1962              		.loc 1 2351 0
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 0
 1965              		@ frame_needed = 0, uses_anonymous_args = 0
 1966              		@ link register save eliminated.
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1967              		.loc 1 2354 0
 1968 0000 014B     		ldr	r3, .L158
 1969 0002 1868     		ldr	r0, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1970              		.loc 1 2355 0
 1971 0004 7047     		bx	lr
 1972              	.L159:
 1973 0006 00BF     		.align	2
 1974              	.L158:
 1975 0008 00000000 		.word	.LANCHOR9
 1976              		.cfi_endproc
 1977              	.LFE27:
 1979              		.section	.text.pcTaskGetName,"ax",%progbits
 1980              		.align	1
 1981              		.global	pcTaskGetName
 1982              		.syntax unified
 1983              		.thumb
 1984              		.thumb_func
 1985              		.fpu fpv4-sp-d16
 1987              	pcTaskGetName:
 1988              	.LFB28:
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1989              		.loc 1 2359 0
 1990              		.cfi_startproc
 1991              		@ args = 0, pretend = 0, frame = 0
 1992              		@ frame_needed = 0, uses_anonymous_args = 0
 1993              		@ link register save eliminated.
 1994              	.LVL161:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1995              		.loc 1 2364 0
 1996 0000 58B9     		cbnz	r0, .L161
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1997              		.loc 1 2364 0 is_stmt 0 discriminator 1
 1998 0002 074B     		ldr	r3, .L163
 1999 0004 1868     		ldr	r0, [r3]
 2000              	.LVL162:
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2001              		.loc 1 2365 0 is_stmt 1 discriminator 1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 137


 2002 0006 40B9     		cbnz	r0, .L161
 2003              	.LBB214:
 2004              	.LBB215:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2005              		.loc 2 195 0
 2006              		.syntax unified
 2007              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2008 0008 4FF05003 			mov r3, #80												
 2009 000c 83F31188 		msr basepri, r3											
 2010 0010 BFF36F8F 		isb														
 2011 0014 BFF34F8F 		dsb														
 2012              	
 2013              	@ 0 "" 2
 2014              	.LVL163:
 2015              		.thumb
 2016              		.syntax unified
 2017              	.L162:
 2018 0018 FEE7     		b	.L162
 2019              	.LVL164:
 2020              	.L161:
 2021              	.LBE215:
 2022              	.LBE214:
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2023              		.loc 1 2367 0
 2024 001a 3430     		adds	r0, r0, #52
 2025              	.LVL165:
 2026 001c 7047     		bx	lr
 2027              	.L164:
 2028 001e 00BF     		.align	2
 2029              	.L163:
 2030 0020 00000000 		.word	.LANCHOR5
 2031              		.cfi_endproc
 2032              	.LFE28:
 2034              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2035              		.align	1
 2036              		.global	xTaskIncrementTick
 2037              		.syntax unified
 2038              		.thumb
 2039              		.thumb_func
 2040              		.fpu fpv4-sp-d16
 2042              	xTaskIncrementTick:
 2043              	.LFB31:
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2044              		.loc 1 2708 0
 2045              		.cfi_startproc
 2046              		@ args = 0, pretend = 0, frame = 0
 2047              		@ frame_needed = 0, uses_anonymous_args = 0
 2048              	.LVL166:
 2049 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2050              	.LCFI25:
 2051              		.cfi_def_cfa_offset 40
 2052              		.cfi_offset 3, -40
 2053              		.cfi_offset 4, -36
 2054              		.cfi_offset 5, -32
 2055              		.cfi_offset 6, -28
 2056              		.cfi_offset 7, -24
 2057              		.cfi_offset 8, -20
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 138


 2058              		.cfi_offset 9, -16
 2059              		.cfi_offset 10, -12
 2060              		.cfi_offset 11, -8
 2061              		.cfi_offset 14, -4
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2062              		.loc 1 2717 0
 2063 0004 3D4B     		ldr	r3, .L184
 2064 0006 1B68     		ldr	r3, [r3]
 2065 0008 002B     		cmp	r3, #0
 2066 000a 6FD1     		bne	.L166
 2067              	.LBB222:
 2068              	.LBB223:
 2069              	.LBB224:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2070              		.loc 1 2721 0
 2071 000c 3C4B     		ldr	r3, .L184+4
 2072 000e 1C68     		ldr	r4, [r3]
 2073 0010 0134     		adds	r4, r4, #1
 2074              	.LVL167:
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2075              		.loc 1 2725 0
 2076 0012 1C60     		str	r4, [r3]
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2077              		.loc 1 2727 0
 2078 0014 BCB9     		cbnz	r4, .L167
 2079              	.LBB225:
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2080              		.loc 1 2729 0
 2081 0016 3B4B     		ldr	r3, .L184+8
 2082 0018 1A68     		ldr	r2, [r3]
 2083 001a 1268     		ldr	r2, [r2]
 2084 001c 42B1     		cbz	r2, .L168
 2085              	.LBB226:
 2086              	.LBB227:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2087              		.loc 2 195 0
 2088              		.syntax unified
 2089              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2090 001e 4FF05003 			mov r3, #80												
 2091 0022 83F31188 		msr basepri, r3											
 2092 0026 BFF36F8F 		isb														
 2093 002a BFF34F8F 		dsb														
 2094              	
 2095              	@ 0 "" 2
 2096              	.LVL168:
 2097              		.thumb
 2098              		.syntax unified
 2099              	.L169:
 2100 002e FEE7     		b	.L169
 2101              	.L168:
 2102              	.LBE227:
 2103              	.LBE226:
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2104              		.loc 1 2729 0
 2105 0030 354A     		ldr	r2, .L184+12
 2106 0032 1968     		ldr	r1, [r3]
 2107              	.LVL169:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 139


 2108 0034 1068     		ldr	r0, [r2]
 2109 0036 1860     		str	r0, [r3]
 2110 0038 1160     		str	r1, [r2]
 2111 003a 344A     		ldr	r2, .L184+16
 2112 003c 1368     		ldr	r3, [r2]
 2113 003e 0133     		adds	r3, r3, #1
 2114 0040 1360     		str	r3, [r2]
 2115 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2116              	.LVL170:
 2117              	.L167:
 2118              	.LBE225:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2119              		.loc 1 2740 0
 2120 0046 324D     		ldr	r5, .L184+20
 2121 0048 324F     		ldr	r7, .L184+24
 2122 004a 2B68     		ldr	r3, [r5]
 2123 004c 9C42     		cmp	r4, r3
 2124              	.LBE224:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2125              		.loc 1 2711 0
 2126 004e 4FF0000B 		mov	fp, #0
 2127              	.LBB228:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2128              		.loc 1 2740 0
 2129 0052 12D2     		bcs	.L178
 2130              	.L171:
 2131              	.LVL171:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2132              		.loc 1 2823 0
 2133 0054 3A68     		ldr	r2, [r7]
 2134 0056 304B     		ldr	r3, .L184+28
 2135 0058 D16A     		ldr	r1, [r2, #44]
 2136 005a 1422     		movs	r2, #20
 2137 005c 4A43     		muls	r2, r1, r2
 2138 005e 9A58     		ldr	r2, [r3, r2]
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2139              		.loc 1 2825 0
 2140 0060 022A     		cmp	r2, #2
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2141              		.loc 1 2851 0
 2142 0062 2E4A     		ldr	r2, .L184+32
 2143 0064 1268     		ldr	r2, [r2]
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2144              		.loc 1 2825 0
 2145 0066 28BF     		it	cs
 2146 0068 4FF0010B 		movcs	fp, #1
 2147              	.LVL172:
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2148              		.loc 1 2853 0
 2149 006c 002A     		cmp	r2, #0
 2150 006e 18BF     		it	ne
 2151 0070 4FF0010B 		movne	fp, #1
 2152              	.LVL173:
 2153              	.L165:
 2154              	.LBE228:
 2155              	.LBE223:
 2156              	.LBE222:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 140


2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2157              		.loc 1 2876 0
 2158 0074 5846     		mov	r0, fp
 2159 0076 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2160              	.LVL174:
 2161              	.L178:
 2162              	.LBB231:
 2163              	.LBB230:
 2164              	.LBB229:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2165              		.loc 1 2744 0
 2166 007a DFF888A0 		ldr	r10, .L184+8
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2167              		.loc 1 2794 0
 2168 007e DFF8A490 		ldr	r9, .L184+40
 2169              	.L170:
 2170              	.LVL175:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2171              		.loc 1 2744 0
 2172 0082 DAF80020 		ldr	r2, [r10]
 2173 0086 1268     		ldr	r2, [r2]
 2174 0088 1AB9     		cbnz	r2, .L172
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2175              		.loc 1 2751 0
 2176 008a 4FF0FF32 		mov	r2, #-1
 2177 008e 2A60     		str	r2, [r5]
 2178 0090 E0E7     		b	.L171
 2179              	.L172:
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2180              		.loc 1 2760 0
 2181 0092 DAF80020 		ldr	r2, [r10]
 2182 0096 D268     		ldr	r2, [r2, #12]
 2183 0098 D668     		ldr	r6, [r2, #12]
 2184              	.LVL176:
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2185              		.loc 1 2761 0
 2186 009a 7168     		ldr	r1, [r6, #4]
 2187              	.LVL177:
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2188              		.loc 1 2763 0
 2189 009c 8C42     		cmp	r4, r1
 2190 009e 01D2     		bcs	.L173
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2191              		.loc 1 2770 0
 2192 00a0 2960     		str	r1, [r5]
 2193 00a2 D7E7     		b	.L171
 2194              	.L173:
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2195              		.loc 1 2779 0
 2196 00a4 06F10408 		add	r8, r6, #4
 2197 00a8 4046     		mov	r0, r8
 2198 00aa FFF7FEFF 		bl	uxListRemove
 2199              	.LVL178:
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2200              		.loc 1 2783 0
 2201 00ae B16A     		ldr	r1, [r6, #40]
 2202 00b0 19B1     		cbz	r1, .L174
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 141


2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2203              		.loc 1 2785 0
 2204 00b2 06F11800 		add	r0, r6, #24
 2205 00b6 FFF7FEFF 		bl	uxListRemove
 2206              	.LVL179:
 2207              	.L174:
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2208              		.loc 1 2794 0
 2209 00ba F06A     		ldr	r0, [r6, #44]
 2210 00bc D9F80030 		ldr	r3, [r9]
 2211 00c0 0122     		movs	r2, #1
 2212 00c2 02FA00F1 		lsl	r1, r2, r0
 2213 00c6 1943     		orrs	r1, r1, r3
 2214 00c8 134B     		ldr	r3, .L184+28
 2215 00ca C9F80010 		str	r1, [r9]
 2216 00ce 4FF0140C 		mov	ip, #20
 2217 00d2 4146     		mov	r1, r8
 2218 00d4 0CFB0030 		mla	r0, ip, r0, r3
 2219 00d8 FFF7FEFF 		bl	vListInsertEnd
 2220              	.LVL180:
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2221              		.loc 1 2804 0
 2222 00dc 3868     		ldr	r0, [r7]
 2223 00de F16A     		ldr	r1, [r6, #44]
 2224 00e0 C26A     		ldr	r2, [r0, #44]
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2225              		.loc 1 2806 0
 2226 00e2 9142     		cmp	r1, r2
 2227 00e4 28BF     		it	cs
 2228 00e6 4FF0010B 		movcs	fp, #1
 2229              	.LVL181:
 2230 00ea CAE7     		b	.L170
 2231              	.LVL182:
 2232              	.L166:
 2233              	.LBE229:
 2234              	.LBE230:
 2235              	.LBE231:
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2236              		.loc 1 2864 0
 2237 00ec 0C4A     		ldr	r2, .L184+36
 2238 00ee 1368     		ldr	r3, [r2]
 2239 00f0 0133     		adds	r3, r3, #1
 2240 00f2 1360     		str	r3, [r2]
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2241              		.loc 1 2711 0
 2242 00f4 4FF0000B 		mov	fp, #0
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2243              		.loc 1 2875 0
 2244 00f8 BCE7     		b	.L165
 2245              	.L185:
 2246 00fa 00BF     		.align	2
 2247              	.L184:
 2248 00fc 00000000 		.word	.LANCHOR16
 2249 0100 00000000 		.word	.LANCHOR4
 2250 0104 00000000 		.word	.LANCHOR2
 2251 0108 00000000 		.word	.LANCHOR7
 2252 010c 00000000 		.word	.LANCHOR18
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 142


 2253 0110 00000000 		.word	.LANCHOR3
 2254 0114 00000000 		.word	.LANCHOR5
 2255 0118 00000000 		.word	.LANCHOR11
 2256 011c 00000000 		.word	.LANCHOR19
 2257 0120 00000000 		.word	.LANCHOR20
 2258 0124 00000000 		.word	.LANCHOR6
 2259              		.cfi_endproc
 2260              	.LFE31:
 2262              		.section	.text.xTaskResumeAll,"ax",%progbits
 2263              		.align	1
 2264              		.global	xTaskResumeAll
 2265              		.syntax unified
 2266              		.thumb
 2267              		.thumb_func
 2268              		.fpu fpv4-sp-d16
 2270              	xTaskResumeAll:
 2271              	.LFB24:
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2272              		.loc 1 2195 0
 2273              		.cfi_startproc
 2274              		@ args = 0, pretend = 0, frame = 0
 2275              		@ frame_needed = 0, uses_anonymous_args = 0
 2276              	.LVL183:
 2277 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2278              	.LCFI26:
 2279              		.cfi_def_cfa_offset 32
 2280              		.cfi_offset 3, -32
 2281              		.cfi_offset 4, -28
 2282              		.cfi_offset 5, -24
 2283              		.cfi_offset 6, -20
 2284              		.cfi_offset 7, -16
 2285              		.cfi_offset 8, -12
 2286              		.cfi_offset 9, -8
 2287              		.cfi_offset 14, -4
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2288              		.loc 1 2201 0
 2289 0004 304C     		ldr	r4, .L213
 2290 0006 2368     		ldr	r3, [r4]
 2291 0008 43B9     		cbnz	r3, .L187
 2292              	.LBB232:
 2293              	.LBB233:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2294              		.loc 2 195 0
 2295              		.syntax unified
 2296              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2297 000a 4FF05003 			mov r3, #80												
 2298 000e 83F31188 		msr basepri, r3											
 2299 0012 BFF36F8F 		isb														
 2300 0016 BFF34F8F 		dsb														
 2301              	
 2302              	@ 0 "" 2
 2303              	.LVL184:
 2304              		.thumb
 2305              		.syntax unified
 2306              	.L188:
 2307 001a FEE7     		b	.L188
 2308              	.L187:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 143


 2309              	.LBE233:
 2310              	.LBE232:
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2311              		.loc 1 2208 0
 2312 001c FFF7FEFF 		bl	vPortEnterCritical
 2313              	.LVL185:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2314              		.loc 1 2210 0
 2315 0020 2368     		ldr	r3, [r4]
 2316 0022 013B     		subs	r3, r3, #1
 2317 0024 2360     		str	r3, [r4]
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2318              		.loc 1 2212 0
 2319 0026 2468     		ldr	r4, [r4]
 2320 0028 2CB1     		cbz	r4, .L189
 2321              	.LVL186:
 2322              	.L192:
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2323              		.loc 1 2197 0
 2324 002a 0024     		movs	r4, #0
 2325              	.LVL187:
 2326              	.L190:
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2327              		.loc 1 2298 0
 2328 002c FFF7FEFF 		bl	vPortExitCritical
 2329              	.LVL188:
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2330              		.loc 1 2301 0
 2331 0030 2046     		mov	r0, r4
 2332 0032 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2333              	.LVL189:
 2334              	.L189:
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2335              		.loc 1 2214 0
 2336 0036 254B     		ldr	r3, .L213+4
 2337 0038 1B68     		ldr	r3, [r3]
 2338 003a 002B     		cmp	r3, #0
 2339 003c F5D0     		beq	.L192
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2340              		.loc 1 2218 0
 2341 003e 244D     		ldr	r5, .L213+8
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2342              		.loc 1 2223 0
 2343 0040 244E     		ldr	r6, .L213+12
 2344 0042 DFF8A480 		ldr	r8, .L213+32
 2345 0046 1FE0     		b	.L191
 2346              	.LVL190:
 2347              	.L194:
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2348              		.loc 1 2220 0
 2349 0048 EB68     		ldr	r3, [r5, #12]
 2350 004a DC68     		ldr	r4, [r3, #12]
 2351              	.LVL191:
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2352              		.loc 1 2222 0
 2353 004c 04F10409 		add	r9, r4, #4
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 144


 2354              		.loc 1 2221 0
 2355 0050 04F11800 		add	r0, r4, #24
 2356 0054 FFF7FEFF 		bl	uxListRemove
 2357              	.LVL192:
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2358              		.loc 1 2222 0
 2359 0058 4846     		mov	r0, r9
 2360 005a FFF7FEFF 		bl	uxListRemove
 2361              	.LVL193:
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2362              		.loc 1 2223 0
 2363 005e E26A     		ldr	r2, [r4, #44]
 2364 0060 3168     		ldr	r1, [r6]
 2365 0062 0127     		movs	r7, #1
 2366 0064 07FA02F3 		lsl	r3, r7, r2
 2367 0068 1420     		movs	r0, #20
 2368 006a 0B43     		orrs	r3, r3, r1
 2369 006c 00FB0280 		mla	r0, r0, r2, r8
 2370 0070 4946     		mov	r1, r9
 2371 0072 3360     		str	r3, [r6]
 2372 0074 FFF7FEFF 		bl	vListInsertEnd
 2373              	.LVL194:
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2374              		.loc 1 2227 0
 2375 0078 174B     		ldr	r3, .L213+16
 2376 007a E26A     		ldr	r2, [r4, #44]
 2377 007c 1B68     		ldr	r3, [r3]
 2378 007e DB6A     		ldr	r3, [r3, #44]
 2379 0080 9A42     		cmp	r2, r3
 2380 0082 01D3     		bcc	.L191
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2381              		.loc 1 2229 0
 2382 0084 154B     		ldr	r3, .L213+20
 2383 0086 1F60     		str	r7, [r3]
 2384              	.LVL195:
 2385              	.L191:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2386              		.loc 1 2218 0
 2387 0088 2B68     		ldr	r3, [r5]
 2388 008a 002B     		cmp	r3, #0
 2389 008c DCD1     		bne	.L194
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2390              		.loc 1 2237 0
 2391 008e 0CB1     		cbz	r4, .L195
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2392              		.loc 1 2245 0
 2393 0090 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2394              	.LVL196:
 2395              	.L195:
 2396              	.LBB234:
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2397              		.loc 1 2253 0
 2398 0094 124D     		ldr	r5, .L213+24
 2399 0096 2C68     		ldr	r4, [r5]
 2400              	.LVL197:
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2401              		.loc 1 2255 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 145


 2402 0098 44B1     		cbz	r4, .L196
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2403              		.loc 1 2261 0
 2404 009a 104E     		ldr	r6, .L213+20
 2405 009c 0127     		movs	r7, #1
 2406              	.L198:
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2407              		.loc 1 2259 0
 2408 009e FFF7FEFF 		bl	xTaskIncrementTick
 2409              	.LVL198:
 2410 00a2 00B1     		cbz	r0, .L197
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2411              		.loc 1 2261 0
 2412 00a4 3760     		str	r7, [r6]
 2413              	.L197:
 2414              	.LVL199:
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2415              		.loc 1 2268 0
 2416 00a6 013C     		subs	r4, r4, #1
 2417              	.LVL200:
 2418 00a8 F9D1     		bne	.L198
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2419              		.loc 1 2270 0
 2420 00aa 2C60     		str	r4, [r5]
 2421              	.L196:
 2422              	.LBE234:
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2423              		.loc 1 2278 0
 2424 00ac 0B4B     		ldr	r3, .L213+20
 2425 00ae 1B68     		ldr	r3, [r3]
 2426 00b0 002B     		cmp	r3, #0
 2427 00b2 BAD0     		beq	.L192
 2428              	.LVL201:
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2429              		.loc 1 2285 0
 2430 00b4 0B4B     		ldr	r3, .L213+28
 2431 00b6 4FF08052 		mov	r2, #268435456
 2432 00ba 1A60     		str	r2, [r3]
 2433              		.syntax unified
 2434              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2435 00bc BFF34F8F 		dsb
 2436              	@ 0 "" 2
 2437              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2438 00c0 BFF36F8F 		isb
 2439              	@ 0 "" 2
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2440              		.loc 1 2282 0
 2441              		.thumb
 2442              		.syntax unified
 2443 00c4 0124     		movs	r4, #1
 2444              	.LVL202:
 2445 00c6 B1E7     		b	.L190
 2446              	.L214:
 2447              		.align	2
 2448              	.L213:
 2449 00c8 00000000 		.word	.LANCHOR16
 2450 00cc 00000000 		.word	.LANCHOR9
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 146


 2451 00d0 00000000 		.word	.LANCHOR1
 2452 00d4 00000000 		.word	.LANCHOR6
 2453 00d8 00000000 		.word	.LANCHOR5
 2454 00dc 00000000 		.word	.LANCHOR19
 2455 00e0 00000000 		.word	.LANCHOR20
 2456 00e4 04ED00E0 		.word	-536810236
 2457 00e8 00000000 		.word	.LANCHOR11
 2458              		.cfi_endproc
 2459              	.LFE24:
 2461              		.section	.text.vTaskDelay,"ax",%progbits
 2462              		.align	1
 2463              		.global	vTaskDelay
 2464              		.syntax unified
 2465              		.thumb
 2466              		.thumb_func
 2467              		.fpu fpv4-sp-d16
 2469              	vTaskDelay:
 2470              	.LFB12:
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2471              		.loc 1 1342 0
 2472              		.cfi_startproc
 2473              		@ args = 0, pretend = 0, frame = 0
 2474              		@ frame_needed = 0, uses_anonymous_args = 0
 2475              	.LVL203:
 2476 0000 08B5     		push	{r3, lr}
 2477              	.LCFI27:
 2478              		.cfi_def_cfa_offset 8
 2479              		.cfi_offset 3, -8
 2480              		.cfi_offset 14, -4
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2481              		.loc 1 1346 0
 2482 0002 40B9     		cbnz	r0, .L216
 2483              	.LVL204:
 2484              	.L220:
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2485              		.loc 1 1373 0
 2486 0004 0E4B     		ldr	r3, .L224
 2487 0006 4FF08052 		mov	r2, #268435456
 2488 000a 1A60     		str	r2, [r3]
 2489              		.syntax unified
 2490              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2491 000c BFF34F8F 		dsb
 2492              	@ 0 "" 2
 2493              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2494 0010 BFF36F8F 		isb
 2495              	@ 0 "" 2
 2496              		.thumb
 2497              		.syntax unified
 2498              	.L215:
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2499              		.loc 1 1379 0
 2500 0014 08BD     		pop	{r3, pc}
 2501              	.LVL205:
 2502              	.L216:
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2503              		.loc 1 1348 0
 2504 0016 0B4B     		ldr	r3, .L224+4
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 147


 2505 0018 1968     		ldr	r1, [r3]
 2506 001a 41B1     		cbz	r1, .L218
 2507              	.LBB235:
 2508              	.LBB236:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2509              		.loc 2 195 0
 2510              		.syntax unified
 2511              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2512 001c 4FF05003 			mov r3, #80												
 2513 0020 83F31188 		msr basepri, r3											
 2514 0024 BFF36F8F 		isb														
 2515 0028 BFF34F8F 		dsb														
 2516              	
 2517              	@ 0 "" 2
 2518              	.LVL206:
 2519              		.thumb
 2520              		.syntax unified
 2521              	.L219:
 2522 002c FEE7     		b	.L219
 2523              	.L218:
 2524              	.LBE236:
 2525              	.LBE235:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2526              		.loc 1 1349 0
 2527 002e FFF7FEFF 		bl	vTaskSuspendAll
 2528              	.LVL207:
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2529              		.loc 1 1360 0
 2530 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2531              	.LVL208:
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2532              		.loc 1 1362 0
 2533 0036 FFF7FEFF 		bl	xTaskResumeAll
 2534              	.LVL209:
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2535              		.loc 1 1371 0
 2536 003a 0028     		cmp	r0, #0
 2537 003c E2D0     		beq	.L220
 2538 003e E9E7     		b	.L215
 2539              	.L225:
 2540              		.align	2
 2541              	.L224:
 2542 0040 04ED00E0 		.word	-536810236
 2543 0044 00000000 		.word	.LANCHOR16
 2544              		.cfi_endproc
 2545              	.LFE12:
 2547              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2548              		.align	1
 2549              		.global	xTaskCatchUpTicks
 2550              		.syntax unified
 2551              		.thumb
 2552              		.thumb_func
 2553              		.fpu fpv4-sp-d16
 2555              	xTaskCatchUpTicks:
 2556              	.LFB30:
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2557              		.loc 1 2610 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 148


 2558              		.cfi_startproc
 2559              		@ args = 0, pretend = 0, frame = 0
 2560              		@ frame_needed = 0, uses_anonymous_args = 0
 2561              	.LVL210:
 2562 0000 08B5     		push	{r3, lr}
 2563              	.LCFI28:
 2564              		.cfi_def_cfa_offset 8
 2565              		.cfi_offset 3, -8
 2566              		.cfi_offset 14, -4
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2567              		.loc 1 2615 0
 2568 0002 0B4B     		ldr	r3, .L229
 2569 0004 1B68     		ldr	r3, [r3]
 2570 0006 43B1     		cbz	r3, .L227
 2571              	.LBB237:
 2572              	.LBB238:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2573              		.loc 2 195 0
 2574              		.syntax unified
 2575              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2576 0008 4FF05003 			mov r3, #80												
 2577 000c 83F31188 		msr basepri, r3											
 2578 0010 BFF36F8F 		isb														
 2579 0014 BFF34F8F 		dsb														
 2580              	
 2581              	@ 0 "" 2
 2582              	.LVL211:
 2583              		.thumb
 2584              		.syntax unified
 2585              	.L228:
 2586 0018 FEE7     		b	.L228
 2587              	.L227:
 2588              	.LBE238:
 2589              	.LBE237:
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 2590              		.loc 1 2619 0
 2591 001a FFF7FEFF 		bl	vTaskSuspendAll
 2592              	.LVL212:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2593              		.loc 1 2620 0
 2594 001e 054A     		ldr	r2, .L229+4
 2595 0020 1368     		ldr	r3, [r2]
 2596 0022 1844     		add	r0, r0, r3
 2597              	.LVL213:
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2598              		.loc 1 2624 0
 2599 0024 BDE80840 		pop	{r3, lr}
 2600              	.LCFI29:
 2601              		.cfi_restore 14
 2602              		.cfi_restore 3
 2603              		.cfi_def_cfa_offset 0
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2604              		.loc 1 2620 0
 2605 0028 1060     		str	r0, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2606              		.loc 1 2621 0
 2607 002a FFF7FEBF 		b	xTaskResumeAll
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 149


 2608              	.LVL214:
 2609              	.L230:
 2610 002e 00BF     		.align	2
 2611              	.L229:
 2612 0030 00000000 		.word	.LANCHOR16
 2613 0034 00000000 		.word	.LANCHOR20
 2614              		.cfi_endproc
 2615              	.LFE30:
 2617              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2618              		.align	1
 2619              		.global	vTaskSwitchContext
 2620              		.syntax unified
 2621              		.thumb
 2622              		.thumb_func
 2623              		.fpu fpv4-sp-d16
 2625              	vTaskSwitchContext:
 2626              	.LFB32:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2627              		.loc 1 2990 0
 2628              		.cfi_startproc
 2629              		@ args = 0, pretend = 0, frame = 0
 2630              		@ frame_needed = 0, uses_anonymous_args = 0
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2631              		.loc 1 2991 0
 2632 0000 1D4B     		ldr	r3, .L239
 2633 0002 1A68     		ldr	r2, [r3]
 2634 0004 1D4B     		ldr	r3, .L239+4
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2635              		.loc 1 2990 0
 2636 0006 10B5     		push	{r4, lr}
 2637              	.LCFI30:
 2638              		.cfi_def_cfa_offset 8
 2639              		.cfi_offset 4, -8
 2640              		.cfi_offset 14, -4
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2641              		.loc 1 2991 0
 2642 0008 12B1     		cbz	r2, .L232
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2643              		.loc 1 2995 0
 2644 000a 0122     		movs	r2, #1
 2645              	.L238:
 2646              	.LBB251:
 2647              	.LBB252:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2648              		.loc 1 3041 0 discriminator 5
 2649 000c 1A60     		str	r2, [r3]
 2650              	.LBE252:
 2651              	.LBE251:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2652              		.loc 1 3061 0 discriminator 5
 2653 000e 10BD     		pop	{r4, pc}
 2654              	.L232:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2655              		.loc 1 2999 0
 2656 0010 1A60     		str	r2, [r3]
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
 2657              		.loc 1 3007 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 150


 2658 0012 FFF7FEFF 		bl	getRunTimeCounterValue
 2659              	.LVL215:
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2660              		.loc 1 3017 0
 2661 0016 1A4A     		ldr	r2, .L239+8
 2662 0018 1468     		ldr	r4, [r2]
 2663 001a A042     		cmp	r0, r4
 2664 001c 05D9     		bls	.L234
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2665              		.loc 1 3019 0
 2666 001e 194B     		ldr	r3, .L239+12
 2667 0020 1968     		ldr	r1, [r3]
 2668 0022 8B6D     		ldr	r3, [r1, #88]
 2669 0024 1B1B     		subs	r3, r3, r4
 2670 0026 0344     		add	r3, r3, r0
 2671 0028 8B65     		str	r3, [r1, #88]
 2672              	.L234:
 2673              	.LBB256:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2674              		.loc 1 3041 0
 2675 002a 174B     		ldr	r3, .L239+16
 2676              	.LBE256:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2677              		.loc 1 3025 0
 2678 002c 1060     		str	r0, [r2]
 2679              	.LBB257:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2680              		.loc 1 3041 0
 2681 002e 1B68     		ldr	r3, [r3]
 2682              	.LVL216:
 2683              	.LBB253:
 2684              	.LBB254:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2685              		.loc 2 134 0
 2686              		.syntax unified
 2687              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2688 0030 B3FA83F3 		clz r3, r3
 2689              	@ 0 "" 2
 2690              	.LVL217:
 2691              		.thumb
 2692              		.syntax unified
 2693 0034 DBB2     		uxtb	r3, r3
 2694              	.LBE254:
 2695              	.LBE253:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2696              		.loc 1 3041 0
 2697 0036 C3F11F03 		rsb	r3, r3, #31
 2698              	.LVL218:
 2699 003a 1422     		movs	r2, #20
 2700 003c 1349     		ldr	r1, .L239+20
 2701 003e 5A43     		muls	r2, r3, r2
 2702 0040 8818     		adds	r0, r1, r2
 2703 0042 8C58     		ldr	r4, [r1, r2]
 2704 0044 44B9     		cbnz	r4, .L235
 2705              	.LBE257:
 2706              	.LBB258:
 2707              	.LBB259:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 151


 2708              	.LBB260:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2709              		.loc 2 195 0
 2710              		.syntax unified
 2711              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2712 0046 4FF05003 			mov r3, #80												
 2713 004a 83F31188 		msr basepri, r3											
 2714 004e BFF36F8F 		isb														
 2715 0052 BFF34F8F 		dsb														
 2716              	
 2717              	@ 0 "" 2
 2718              	.LVL219:
 2719              		.thumb
 2720              		.syntax unified
 2721              	.L236:
 2722 0056 FEE7     		b	.L236
 2723              	.LVL220:
 2724              	.L235:
 2725              	.LBE260:
 2726              	.LBE259:
 2727              	.LBE258:
 2728              	.LBB261:
 2729              	.LBB255:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2730              		.loc 1 3041 0 discriminator 2
 2731 0058 4468     		ldr	r4, [r0, #4]
 2732 005a 0832     		adds	r2, r2, #8
 2733 005c 6468     		ldr	r4, [r4, #4]
 2734 005e 4460     		str	r4, [r0, #4]
 2735 0060 0A44     		add	r2, r2, r1
 2736 0062 9442     		cmp	r4, r2
 2737 0064 04BF     		itt	eq
 2738 0066 6268     		ldreq	r2, [r4, #4]
 2739 0068 4260     		streq	r2, [r0, #4]
 2740 006a 1422     		movs	r2, #20
 2741 006c 02FB0313 		mla	r3, r2, r3, r1
 2742              	.LVL221:
 2743 0070 5B68     		ldr	r3, [r3, #4]
 2744 0072 DA68     		ldr	r2, [r3, #12]
 2745 0074 034B     		ldr	r3, .L239+12
 2746 0076 C9E7     		b	.L238
 2747              	.L240:
 2748              		.align	2
 2749              	.L239:
 2750 0078 00000000 		.word	.LANCHOR16
 2751 007c 00000000 		.word	.LANCHOR19
 2752 0080 00000000 		.word	.LANCHOR21
 2753 0084 00000000 		.word	.LANCHOR5
 2754 0088 00000000 		.word	.LANCHOR6
 2755 008c 00000000 		.word	.LANCHOR11
 2756              	.LBE255:
 2757              	.LBE261:
 2758              		.cfi_endproc
 2759              	.LFE32:
 2761              		.section	.text.vTaskSuspend,"ax",%progbits
 2762              		.align	1
 2763              		.global	vTaskSuspend
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 152


 2764              		.syntax unified
 2765              		.thumb
 2766              		.thumb_func
 2767              		.fpu fpv4-sp-d16
 2769              	vTaskSuspend:
 2770              	.LFB17:
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2771              		.loc 1 1705 0
 2772              		.cfi_startproc
 2773              		@ args = 0, pretend = 0, frame = 0
 2774              		@ frame_needed = 0, uses_anonymous_args = 0
 2775              	.LVL222:
 2776 0000 70B5     		push	{r4, r5, r6, lr}
 2777              	.LCFI31:
 2778              		.cfi_def_cfa_offset 16
 2779              		.cfi_offset 4, -16
 2780              		.cfi_offset 5, -12
 2781              		.cfi_offset 6, -8
 2782              		.cfi_offset 14, -4
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2783              		.loc 1 1705 0
 2784 0002 0446     		mov	r4, r0
 2785 0004 2C4E     		ldr	r6, .L258
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2786              		.loc 1 1708 0
 2787 0006 FFF7FEFF 		bl	vPortEnterCritical
 2788              	.LVL223:
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2789              		.loc 1 1712 0
 2790 000a 04B9     		cbnz	r4, .L242
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2791              		.loc 1 1712 0 is_stmt 0 discriminator 1
 2792 000c 3468     		ldr	r4, [r6]
 2793              	.LVL224:
 2794              	.L242:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2795              		.loc 1 1718 0 is_stmt 1 discriminator 4
 2796 000e 251D     		adds	r5, r4, #4
 2797 0010 2846     		mov	r0, r5
 2798 0012 FFF7FEFF 		bl	uxListRemove
 2799              	.LVL225:
 2800 0016 60B9     		cbnz	r0, .L243
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2801              		.loc 1 1720 0
 2802 0018 E06A     		ldr	r0, [r4, #44]
 2803 001a 284B     		ldr	r3, .L258+4
 2804 001c 1421     		movs	r1, #20
 2805 001e 4143     		muls	r1, r0, r1
 2806 0020 5B58     		ldr	r3, [r3, r1]
 2807 0022 33B9     		cbnz	r3, .L243
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2808              		.loc 1 1720 0 is_stmt 0 discriminator 1
 2809 0024 2649     		ldr	r1, .L258+8
 2810 0026 0122     		movs	r2, #1
 2811 0028 0B68     		ldr	r3, [r1]
 2812 002a 8240     		lsls	r2, r2, r0
 2813 002c 23EA0203 		bic	r3, r3, r2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 153


 2814 0030 0B60     		str	r3, [r1]
 2815              	.L243:
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2816              		.loc 1 1728 0 is_stmt 1
 2817 0032 A36A     		ldr	r3, [r4, #40]
 2818 0034 1BB1     		cbz	r3, .L244
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2819              		.loc 1 1730 0
 2820 0036 04F11800 		add	r0, r4, #24
 2821 003a FFF7FEFF 		bl	uxListRemove
 2822              	.LVL226:
 2823              	.L244:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2824              		.loc 1 1737 0
 2825 003e 2946     		mov	r1, r5
 2826 0040 2048     		ldr	r0, .L258+12
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2827              		.loc 1 1752 0
 2828 0042 214D     		ldr	r5, .L258+16
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2829              		.loc 1 1737 0
 2830 0044 FFF7FEFF 		bl	vListInsertEnd
 2831              	.LVL227:
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2832              		.loc 1 1741 0
 2833 0048 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 2834 004c 012B     		cmp	r3, #1
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2835              		.loc 1 1745 0
 2836 004e 04BF     		itt	eq
 2837 0050 0023     		moveq	r3, #0
 2838 0052 84F86030 		strbeq	r3, [r4, #96]
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2839              		.loc 1 1750 0
 2840 0056 FFF7FEFF 		bl	vPortExitCritical
 2841              	.LVL228:
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2842              		.loc 1 1752 0
 2843 005a 2A68     		ldr	r2, [r5]
 2844 005c 2AB1     		cbz	r2, .L246
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2845              		.loc 1 1756 0
 2846 005e FFF7FEFF 		bl	vPortEnterCritical
 2847              	.LVL229:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2848              		.loc 1 1758 0
 2849 0062 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2850              	.LVL230:
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2851              		.loc 1 1760 0
 2852 0066 FFF7FEFF 		bl	vPortExitCritical
 2853              	.LVL231:
 2854              	.L246:
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2855              		.loc 1 1767 0
 2856 006a 3368     		ldr	r3, [r6]
 2857 006c A342     		cmp	r3, r4
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 154


 2858 006e 15D1     		bne	.L241
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2859              		.loc 1 1769 0
 2860 0070 2B68     		ldr	r3, [r5]
 2861 0072 A3B1     		cbz	r3, .L248
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2862              		.loc 1 1772 0
 2863 0074 154B     		ldr	r3, .L258+20
 2864 0076 1B68     		ldr	r3, [r3]
 2865 0078 43B1     		cbz	r3, .L249
 2866              	.LBB262:
 2867              	.LBB263:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2868              		.loc 2 195 0
 2869              		.syntax unified
 2870              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2871 007a 4FF05003 			mov r3, #80												
 2872 007e 83F31188 		msr basepri, r3											
 2873 0082 BFF36F8F 		isb														
 2874 0086 BFF34F8F 		dsb														
 2875              	
 2876              	@ 0 "" 2
 2877              	.LVL232:
 2878              		.thumb
 2879              		.syntax unified
 2880              	.L250:
 2881 008a FEE7     		b	.L250
 2882              	.L249:
 2883              	.LBE263:
 2884              	.LBE262:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2885              		.loc 1 1773 0
 2886 008c 104B     		ldr	r3, .L258+24
 2887 008e 4FF08052 		mov	r2, #268435456
 2888 0092 1A60     		str	r2, [r3]
 2889              		.syntax unified
 2890              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2891 0094 BFF34F8F 		dsb
 2892              	@ 0 "" 2
 2893              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2894 0098 BFF36F8F 		isb
 2895              	@ 0 "" 2
 2896              		.thumb
 2897              		.syntax unified
 2898              	.L241:
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2899              		.loc 1 1798 0
 2900 009c 70BD     		pop	{r4, r5, r6, pc}
 2901              	.LVL233:
 2902              	.L248:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2903              		.loc 1 1780 0
 2904 009e 094A     		ldr	r2, .L258+12
 2905 00a0 1168     		ldr	r1, [r2]
 2906 00a2 0C4A     		ldr	r2, .L258+28
 2907 00a4 1268     		ldr	r2, [r2]
 2908 00a6 9142     		cmp	r1, r2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 155


 2909 00a8 01D1     		bne	.L251
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2910              		.loc 1 1786 0
 2911 00aa 3360     		str	r3, [r6]
 2912 00ac F6E7     		b	.L241
 2913              	.L251:
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2914              		.loc 1 1798 0
 2915 00ae BDE87040 		pop	{r4, r5, r6, lr}
 2916              	.LCFI32:
 2917              		.cfi_restore 14
 2918              		.cfi_restore 6
 2919              		.cfi_restore 5
 2920              		.cfi_restore 4
 2921              		.cfi_def_cfa_offset 0
 2922              	.LVL234:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2923              		.loc 1 1790 0
 2924 00b2 FFF7FEBF 		b	vTaskSwitchContext
 2925              	.LVL235:
 2926              	.L259:
 2927 00b6 00BF     		.align	2
 2928              	.L258:
 2929 00b8 00000000 		.word	.LANCHOR5
 2930 00bc 00000000 		.word	.LANCHOR11
 2931 00c0 00000000 		.word	.LANCHOR6
 2932 00c4 00000000 		.word	.LANCHOR0
 2933 00c8 00000000 		.word	.LANCHOR14
 2934 00cc 00000000 		.word	.LANCHOR16
 2935 00d0 04ED00E0 		.word	-536810236
 2936 00d4 00000000 		.word	.LANCHOR9
 2937              		.cfi_endproc
 2938              	.LFE17:
 2940              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2941              		.align	1
 2942              		.global	vTaskPlaceOnEventList
 2943              		.syntax unified
 2944              		.thumb
 2945              		.thumb_func
 2946              		.fpu fpv4-sp-d16
 2948              	vTaskPlaceOnEventList:
 2949              	.LFB33:
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2950              		.loc 1 3065 0
 2951              		.cfi_startproc
 2952              		@ args = 0, pretend = 0, frame = 0
 2953              		@ frame_needed = 0, uses_anonymous_args = 0
 2954              	.LVL236:
 2955 0000 10B5     		push	{r4, lr}
 2956              	.LCFI33:
 2957              		.cfi_def_cfa_offset 8
 2958              		.cfi_offset 4, -8
 2959              		.cfi_offset 14, -4
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2960              		.loc 1 3065 0
 2961 0002 0C46     		mov	r4, r1
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 156


 2962              		.loc 1 3066 0
 2963 0004 40B9     		cbnz	r0, .L261
 2964              	.LBB264:
 2965              	.LBB265:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2966              		.loc 2 195 0
 2967              		.syntax unified
 2968              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2969 0006 4FF05003 			mov r3, #80												
 2970 000a 83F31188 		msr basepri, r3											
 2971 000e BFF36F8F 		isb														
 2972 0012 BFF34F8F 		dsb														
 2973              	
 2974              	@ 0 "" 2
 2975              	.LVL237:
 2976              		.thumb
 2977              		.syntax unified
 2978              	.L262:
 2979 0016 FEE7     		b	.L262
 2980              	.L261:
 2981              	.LBE265:
 2982              	.LBE264:
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2983              		.loc 1 3075 0
 2984 0018 054B     		ldr	r3, .L263
 2985 001a 1968     		ldr	r1, [r3]
 2986              	.LVL238:
 2987 001c 1831     		adds	r1, r1, #24
 2988 001e FFF7FEFF 		bl	vListInsert
 2989              	.LVL239:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2990              		.loc 1 3077 0
 2991 0022 2046     		mov	r0, r4
 2992 0024 0121     		movs	r1, #1
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2993              		.loc 1 3078 0
 2994 0026 BDE81040 		pop	{r4, lr}
 2995              	.LCFI34:
 2996              		.cfi_restore 14
 2997              		.cfi_restore 4
 2998              		.cfi_def_cfa_offset 0
 2999              	.LVL240:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3000              		.loc 1 3077 0
 3001 002a FFF7FEBF 		b	prvAddCurrentTaskToDelayedList
 3002              	.LVL241:
 3003              	.L264:
 3004 002e 00BF     		.align	2
 3005              	.L263:
 3006 0030 00000000 		.word	.LANCHOR5
 3007              		.cfi_endproc
 3008              	.LFE33:
 3010              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3011              		.align	1
 3012              		.global	vTaskPlaceOnUnorderedEventList
 3013              		.syntax unified
 3014              		.thumb
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 157


 3015              		.thumb_func
 3016              		.fpu fpv4-sp-d16
 3018              	vTaskPlaceOnUnorderedEventList:
 3019              	.LFB34:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3020              		.loc 1 3082 0
 3021              		.cfi_startproc
 3022              		@ args = 0, pretend = 0, frame = 0
 3023              		@ frame_needed = 0, uses_anonymous_args = 0
 3024              	.LVL242:
 3025 0000 10B5     		push	{r4, lr}
 3026              	.LCFI35:
 3027              		.cfi_def_cfa_offset 8
 3028              		.cfi_offset 4, -8
 3029              		.cfi_offset 14, -4
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3030              		.loc 1 3082 0
 3031 0002 1446     		mov	r4, r2
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3032              		.loc 1 3083 0
 3033 0004 40B9     		cbnz	r0, .L266
 3034              	.LBB266:
 3035              	.LBB267:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3036              		.loc 2 195 0
 3037              		.syntax unified
 3038              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3039 0006 4FF05003 			mov r3, #80												
 3040 000a 83F31188 		msr basepri, r3											
 3041 000e BFF36F8F 		isb														
 3042 0012 BFF34F8F 		dsb														
 3043              	
 3044              	@ 0 "" 2
 3045              	.LVL243:
 3046              		.thumb
 3047              		.syntax unified
 3048              	.L267:
 3049 0016 FEE7     		b	.L267
 3050              	.L266:
 3051              	.LBE267:
 3052              	.LBE266:
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3053              		.loc 1 3087 0
 3054 0018 0D4B     		ldr	r3, .L270
 3055 001a 1B68     		ldr	r3, [r3]
 3056 001c 43B9     		cbnz	r3, .L268
 3057              	.LBB268:
 3058              	.LBB269:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3059              		.loc 2 195 0
 3060              		.syntax unified
 3061              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3062 001e 4FF05003 			mov r3, #80												
 3063 0022 83F31188 		msr basepri, r3											
 3064 0026 BFF36F8F 		isb														
 3065 002a BFF34F8F 		dsb														
 3066              	
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 158


 3067              	@ 0 "" 2
 3068              	.LVL244:
 3069              		.thumb
 3070              		.syntax unified
 3071              	.L269:
 3072 002e FEE7     		b	.L269
 3073              	.L268:
 3074              	.LBE269:
 3075              	.LBE268:
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3076              		.loc 1 3092 0
 3077 0030 084B     		ldr	r3, .L270+4
 3078 0032 1A68     		ldr	r2, [r3]
 3079              	.LVL245:
 3080 0034 41F00041 		orr	r1, r1, #-2147483648
 3081              	.LVL246:
 3082 0038 9161     		str	r1, [r2, #24]
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3083              		.loc 1 3099 0
 3084 003a 1968     		ldr	r1, [r3]
 3085 003c 1831     		adds	r1, r1, #24
 3086 003e FFF7FEFF 		bl	vListInsertEnd
 3087              	.LVL247:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3088              		.loc 1 3101 0
 3089 0042 2046     		mov	r0, r4
 3090 0044 0121     		movs	r1, #1
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3091              		.loc 1 3102 0
 3092 0046 BDE81040 		pop	{r4, lr}
 3093              	.LCFI36:
 3094              		.cfi_restore 14
 3095              		.cfi_restore 4
 3096              		.cfi_def_cfa_offset 0
 3097              	.LVL248:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3098              		.loc 1 3101 0
 3099 004a FFF7FEBF 		b	prvAddCurrentTaskToDelayedList
 3100              	.LVL249:
 3101              	.L271:
 3102 004e 00BF     		.align	2
 3103              	.L270:
 3104 0050 00000000 		.word	.LANCHOR16
 3105 0054 00000000 		.word	.LANCHOR5
 3106              		.cfi_endproc
 3107              	.LFE34:
 3109              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3110              		.align	1
 3111              		.global	xTaskRemoveFromEventList
 3112              		.syntax unified
 3113              		.thumb
 3114              		.thumb_func
 3115              		.fpu fpv4-sp-d16
 3117              	xTaskRemoveFromEventList:
 3118              	.LFB35:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3119              		.loc 1 3139 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 159


 3120              		.cfi_startproc
 3121              		@ args = 0, pretend = 0, frame = 0
 3122              		@ frame_needed = 0, uses_anonymous_args = 0
 3123              	.LVL250:
 3124 0000 38B5     		push	{r3, r4, r5, lr}
 3125              	.LCFI37:
 3126              		.cfi_def_cfa_offset 16
 3127              		.cfi_offset 3, -16
 3128              		.cfi_offset 4, -12
 3129              		.cfi_offset 5, -8
 3130              		.cfi_offset 14, -4
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3131              		.loc 1 3156 0
 3132 0002 C368     		ldr	r3, [r0, #12]
 3133 0004 DC68     		ldr	r4, [r3, #12]
 3134              	.LVL251:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3135              		.loc 1 3157 0
 3136 0006 44B9     		cbnz	r4, .L273
 3137              	.LBB270:
 3138              	.LBB271:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3139              		.loc 2 195 0
 3140              		.syntax unified
 3141              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3142 0008 4FF05003 			mov r3, #80												
 3143 000c 83F31188 		msr basepri, r3											
 3144 0010 BFF36F8F 		isb														
 3145 0014 BFF34F8F 		dsb														
 3146              	
 3147              	@ 0 "" 2
 3148              	.LVL252:
 3149              		.thumb
 3150              		.syntax unified
 3151              	.L274:
 3152 0018 FEE7     		b	.L274
 3153              	.L273:
 3154              	.LBE271:
 3155              	.LBE270:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3156              		.loc 1 3158 0
 3157 001a 04F11805 		add	r5, r4, #24
 3158 001e 2846     		mov	r0, r5
 3159              	.LVL253:
 3160 0020 FFF7FEFF 		bl	uxListRemove
 3161              	.LVL254:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3162              		.loc 1 3160 0
 3163 0024 114B     		ldr	r3, .L280
 3164 0026 1B68     		ldr	r3, [r3]
 3165 0028 E3B9     		cbnz	r3, .L275
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3166              		.loc 1 3162 0
 3167 002a 251D     		adds	r5, r4, #4
 3168 002c 2846     		mov	r0, r5
 3169 002e FFF7FEFF 		bl	uxListRemove
 3170              	.LVL255:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 160


3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3171              		.loc 1 3163 0
 3172 0032 0F49     		ldr	r1, .L280+4
 3173 0034 E26A     		ldr	r2, [r4, #44]
 3174 0036 0868     		ldr	r0, [r1]
 3175 0038 0123     		movs	r3, #1
 3176 003a 9340     		lsls	r3, r3, r2
 3177 003c 0343     		orrs	r3, r3, r0
 3178 003e 0B60     		str	r3, [r1]
 3179 0040 0C4B     		ldr	r3, .L280+8
 3180 0042 1420     		movs	r0, #20
 3181 0044 2946     		mov	r1, r5
 3182 0046 00FB0230 		mla	r0, r0, r2, r3
 3183              	.L279:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3184              		.loc 1 3183 0
 3185 004a FFF7FEFF 		bl	vListInsertEnd
 3186              	.LVL256:
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3187              		.loc 1 3186 0
 3188 004e 0A4B     		ldr	r3, .L280+12
 3189 0050 E26A     		ldr	r2, [r4, #44]
 3190 0052 1B68     		ldr	r3, [r3]
 3191 0054 DB6A     		ldr	r3, [r3, #44]
 3192 0056 9A42     		cmp	r2, r3
 3193              	.LVL257:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3194              		.loc 1 3195 0
 3195 0058 83BF     		ittte	hi
 3196 005a 084B     		ldrhi	r3, .L280+16
 3197 005c 0120     		movhi	r0, #1
 3198 005e 1860     		strhi	r0, [r3]
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3199              		.loc 1 3199 0
 3200 0060 0020     		movls	r0, #0
 3201              	.LVL258:
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3202              		.loc 1 3203 0
 3203 0062 38BD     		pop	{r3, r4, r5, pc}
 3204              	.LVL259:
 3205              	.L275:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3206              		.loc 1 3183 0
 3207 0064 2946     		mov	r1, r5
 3208 0066 0648     		ldr	r0, .L280+20
 3209 0068 EFE7     		b	.L279
 3210              	.L281:
 3211 006a 00BF     		.align	2
 3212              	.L280:
 3213 006c 00000000 		.word	.LANCHOR16
 3214 0070 00000000 		.word	.LANCHOR6
 3215 0074 00000000 		.word	.LANCHOR11
 3216 0078 00000000 		.word	.LANCHOR5
 3217 007c 00000000 		.word	.LANCHOR19
 3218 0080 00000000 		.word	.LANCHOR1
 3219              		.cfi_endproc
 3220              	.LFE35:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 161


 3222              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3223              		.align	1
 3224              		.global	vTaskRemoveFromUnorderedEventList
 3225              		.syntax unified
 3226              		.thumb
 3227              		.thumb_func
 3228              		.fpu fpv4-sp-d16
 3230              	vTaskRemoveFromUnorderedEventList:
 3231              	.LFB36:
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3232              		.loc 1 3207 0
 3233              		.cfi_startproc
 3234              		@ args = 0, pretend = 0, frame = 0
 3235              		@ frame_needed = 0, uses_anonymous_args = 0
 3236              	.LVL260:
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3237              		.loc 1 3212 0
 3238 0000 1C4A     		ldr	r2, .L288
 3239 0002 1268     		ldr	r2, [r2]
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3240              		.loc 1 3207 0
 3241 0004 70B5     		push	{r4, r5, r6, lr}
 3242              	.LCFI38:
 3243              		.cfi_def_cfa_offset 16
 3244              		.cfi_offset 4, -16
 3245              		.cfi_offset 5, -12
 3246              		.cfi_offset 6, -8
 3247              		.cfi_offset 14, -4
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3248              		.loc 1 3212 0
 3249 0006 42B9     		cbnz	r2, .L283
 3250              	.LBB272:
 3251              	.LBB273:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3252              		.loc 2 195 0
 3253              		.syntax unified
 3254              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3255 0008 4FF05003 			mov r3, #80												
 3256 000c 83F31188 		msr basepri, r3											
 3257 0010 BFF36F8F 		isb														
 3258 0014 BFF34F8F 		dsb														
 3259              	
 3260              	@ 0 "" 2
 3261              	.LVL261:
 3262              		.thumb
 3263              		.syntax unified
 3264              	.L284:
 3265 0018 FEE7     		b	.L284
 3266              	.L283:
 3267              	.LBE273:
 3268              	.LBE272:
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3269              		.loc 1 3219 0
 3270 001a C468     		ldr	r4, [r0, #12]
 3271              	.LVL262:
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3272              		.loc 1 3215 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 162


 3273 001c 41F00041 		orr	r1, r1, #-2147483648
 3274              	.LVL263:
 3275 0020 0160     		str	r1, [r0]
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3276              		.loc 1 3220 0
 3277 0022 44B9     		cbnz	r4, .L285
 3278              	.LBB274:
 3279              	.LBB275:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3280              		.loc 2 195 0
 3281              		.syntax unified
 3282              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3283 0024 4FF05003 			mov r3, #80												
 3284 0028 83F31188 		msr basepri, r3											
 3285 002c BFF36F8F 		isb														
 3286 0030 BFF34F8F 		dsb														
 3287              	
 3288              	@ 0 "" 2
 3289              	.LVL264:
 3290              		.thumb
 3291              		.syntax unified
 3292              	.L286:
 3293 0034 FEE7     		b	.L286
 3294              	.L285:
 3295              	.LBE275:
 3296              	.LBE274:
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3297              		.loc 1 3240 0
 3298 0036 261D     		adds	r6, r4, #4
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3299              		.loc 1 3221 0
 3300 0038 FFF7FEFF 		bl	uxListRemove
 3301              	.LVL265:
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3302              		.loc 1 3240 0
 3303 003c 3046     		mov	r0, r6
 3304 003e FFF7FEFF 		bl	uxListRemove
 3305              	.LVL266:
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3306              		.loc 1 3241 0
 3307 0042 0D49     		ldr	r1, .L288+4
 3308 0044 E26A     		ldr	r2, [r4, #44]
 3309 0046 0868     		ldr	r0, [r1]
 3310 0048 0125     		movs	r5, #1
 3311 004a 05FA02F3 		lsl	r3, r5, r2
 3312 004e 0343     		orrs	r3, r3, r0
 3313 0050 0B60     		str	r3, [r1]
 3314 0052 0A4B     		ldr	r3, .L288+8
 3315 0054 1420     		movs	r0, #20
 3316 0056 00FB0230 		mla	r0, r0, r2, r3
 3317 005a 3146     		mov	r1, r6
 3318 005c FFF7FEFF 		bl	vListInsertEnd
 3319              	.LVL267:
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3320              		.loc 1 3243 0
 3321 0060 074B     		ldr	r3, .L288+12
 3322 0062 E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 163


 3323 0064 1B68     		ldr	r3, [r3]
 3324 0066 DB6A     		ldr	r3, [r3, #44]
 3325 0068 9A42     		cmp	r2, r3
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3326              		.loc 1 3249 0
 3327 006a 84BF     		itt	hi
 3328 006c 054B     		ldrhi	r3, .L288+16
 3329 006e 1D60     		strhi	r5, [r3]
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3330              		.loc 1 3251 0
 3331 0070 70BD     		pop	{r4, r5, r6, pc}
 3332              	.LVL268:
 3333              	.L289:
 3334 0072 00BF     		.align	2
 3335              	.L288:
 3336 0074 00000000 		.word	.LANCHOR16
 3337 0078 00000000 		.word	.LANCHOR6
 3338 007c 00000000 		.word	.LANCHOR11
 3339 0080 00000000 		.word	.LANCHOR5
 3340 0084 00000000 		.word	.LANCHOR19
 3341              		.cfi_endproc
 3342              	.LFE36:
 3344              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3345              		.align	1
 3346              		.global	vTaskSetTimeOutState
 3347              		.syntax unified
 3348              		.thumb
 3349              		.thumb_func
 3350              		.fpu fpv4-sp-d16
 3352              	vTaskSetTimeOutState:
 3353              	.LFB37:
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3354              		.loc 1 3255 0
 3355              		.cfi_startproc
 3356              		@ args = 0, pretend = 0, frame = 0
 3357              		@ frame_needed = 0, uses_anonymous_args = 0
 3358              	.LVL269:
 3359 0000 10B5     		push	{r4, lr}
 3360              	.LCFI39:
 3361              		.cfi_def_cfa_offset 8
 3362              		.cfi_offset 4, -8
 3363              		.cfi_offset 14, -4
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3364              		.loc 1 3256 0
 3365 0002 0446     		mov	r4, r0
 3366 0004 40B9     		cbnz	r0, .L291
 3367              	.LBB276:
 3368              	.LBB277:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3369              		.loc 2 195 0
 3370              		.syntax unified
 3371              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3372 0006 4FF05003 			mov r3, #80												
 3373 000a 83F31188 		msr basepri, r3											
 3374 000e BFF36F8F 		isb														
 3375 0012 BFF34F8F 		dsb														
 3376              	
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 164


 3377              	@ 0 "" 2
 3378              	.LVL270:
 3379              		.thumb
 3380              		.syntax unified
 3381              	.L292:
 3382 0016 FEE7     		b	.L292
 3383              	.L291:
 3384              	.LBE277:
 3385              	.LBE276:
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3386              		.loc 1 3257 0
 3387 0018 FFF7FEFF 		bl	vPortEnterCritical
 3388              	.LVL271:
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3389              		.loc 1 3259 0
 3390 001c 044B     		ldr	r3, .L293
 3391 001e 1B68     		ldr	r3, [r3]
 3392 0020 2360     		str	r3, [r4]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3393              		.loc 1 3260 0
 3394 0022 044B     		ldr	r3, .L293+4
 3395 0024 1B68     		ldr	r3, [r3]
 3396 0026 6360     		str	r3, [r4, #4]
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3397              		.loc 1 3263 0
 3398 0028 BDE81040 		pop	{r4, lr}
 3399              	.LCFI40:
 3400              		.cfi_restore 14
 3401              		.cfi_restore 4
 3402              		.cfi_def_cfa_offset 0
 3403              	.LVL272:
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3404              		.loc 1 3262 0
 3405 002c FFF7FEBF 		b	vPortExitCritical
 3406              	.LVL273:
 3407              	.L294:
 3408              		.align	2
 3409              	.L293:
 3410 0030 00000000 		.word	.LANCHOR18
 3411 0034 00000000 		.word	.LANCHOR4
 3412              		.cfi_endproc
 3413              	.LFE37:
 3415              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3416              		.align	1
 3417              		.global	vTaskInternalSetTimeOutState
 3418              		.syntax unified
 3419              		.thumb
 3420              		.thumb_func
 3421              		.fpu fpv4-sp-d16
 3423              	vTaskInternalSetTimeOutState:
 3424              	.LFB38:
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3425              		.loc 1 3267 0
 3426              		.cfi_startproc
 3427              		@ args = 0, pretend = 0, frame = 0
 3428              		@ frame_needed = 0, uses_anonymous_args = 0
 3429              		@ link register save eliminated.
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 165


 3430              	.LVL274:
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3431              		.loc 1 3269 0
 3432 0000 034B     		ldr	r3, .L296
 3433 0002 1B68     		ldr	r3, [r3]
 3434 0004 0360     		str	r3, [r0]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3435              		.loc 1 3270 0
 3436 0006 034B     		ldr	r3, .L296+4
 3437 0008 1B68     		ldr	r3, [r3]
 3438 000a 4360     		str	r3, [r0, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3439              		.loc 1 3271 0
 3440 000c 7047     		bx	lr
 3441              	.L297:
 3442 000e 00BF     		.align	2
 3443              	.L296:
 3444 0010 00000000 		.word	.LANCHOR18
 3445 0014 00000000 		.word	.LANCHOR4
 3446              		.cfi_endproc
 3447              	.LFE38:
 3449              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3450              		.align	1
 3451              		.global	xTaskCheckForTimeOut
 3452              		.syntax unified
 3453              		.thumb
 3454              		.thumb_func
 3455              		.fpu fpv4-sp-d16
 3457              	xTaskCheckForTimeOut:
 3458              	.LFB39:
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3459              		.loc 1 3275 0
 3460              		.cfi_startproc
 3461              		@ args = 0, pretend = 0, frame = 0
 3462              		@ frame_needed = 0, uses_anonymous_args = 0
 3463              	.LVL275:
 3464 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3465              	.LCFI41:
 3466              		.cfi_def_cfa_offset 24
 3467              		.cfi_offset 3, -24
 3468              		.cfi_offset 4, -20
 3469              		.cfi_offset 5, -16
 3470              		.cfi_offset 6, -12
 3471              		.cfi_offset 7, -8
 3472              		.cfi_offset 14, -4
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3473              		.loc 1 3275 0
 3474 0002 0C46     		mov	r4, r1
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3475              		.loc 1 3278 0
 3476 0004 0546     		mov	r5, r0
 3477 0006 40B9     		cbnz	r0, .L299
 3478              	.LBB278:
 3479              	.LBB279:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3480              		.loc 2 195 0
 3481              		.syntax unified
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 166


 3482              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3483 0008 4FF05003 			mov r3, #80												
 3484 000c 83F31188 		msr basepri, r3											
 3485 0010 BFF36F8F 		isb														
 3486 0014 BFF34F8F 		dsb														
 3487              	
 3488              	@ 0 "" 2
 3489              	.LVL276:
 3490              		.thumb
 3491              		.syntax unified
 3492              	.L300:
 3493 0018 FEE7     		b	.L300
 3494              	.L299:
 3495              	.LBE279:
 3496              	.LBE278:
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3497              		.loc 1 3279 0
 3498 001a 41B9     		cbnz	r1, .L301
 3499              	.LBB280:
 3500              	.LBB281:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3501              		.loc 2 195 0
 3502              		.syntax unified
 3503              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3504 001c 4FF05003 			mov r3, #80												
 3505 0020 83F31188 		msr basepri, r3											
 3506 0024 BFF36F8F 		isb														
 3507 0028 BFF34F8F 		dsb														
 3508              	
 3509              	@ 0 "" 2
 3510              	.LVL277:
 3511              		.thumb
 3512              		.syntax unified
 3513              	.L302:
 3514 002c FEE7     		b	.L302
 3515              	.L301:
 3516              	.LBE281:
 3517              	.LBE280:
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3518              		.loc 1 3281 0
 3519 002e FFF7FEFF 		bl	vPortEnterCritical
 3520              	.LVL278:
 3521              	.LBB282:
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3522              		.loc 1 3284 0
 3523 0032 0F4B     		ldr	r3, .L308
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3524              		.loc 1 3285 0
 3525 0034 6868     		ldr	r0, [r5, #4]
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3526              		.loc 1 3284 0
 3527 0036 1968     		ldr	r1, [r3]
 3528              	.LVL279:
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3529              		.loc 1 3299 0
 3530 0038 2368     		ldr	r3, [r4]
 3531 003a 5E1C     		adds	r6, r3, #1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 167


3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3532              		.loc 1 3285 0
 3533 003c A1EB0002 		sub	r2, r1, r0
 3534              	.LVL280:
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3535              		.loc 1 3299 0
 3536 0040 0DD0     		beq	.L306
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3537              		.loc 1 3309 0
 3538 0042 0C4E     		ldr	r6, .L308+4
 3539 0044 2F68     		ldr	r7, [r5]
 3540 0046 3668     		ldr	r6, [r6]
 3541 0048 B742     		cmp	r7, r6
 3542 004a 01D0     		beq	.L304
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3543              		.loc 1 3309 0 is_stmt 0 discriminator 1
 3544 004c 8842     		cmp	r0, r1
 3545 004e 0DD9     		bls	.L307
 3546              	.L304:
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3547              		.loc 1 3318 0 is_stmt 1
 3548 0050 9342     		cmp	r3, r2
 3549 0052 09D9     		bls	.L305
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3550              		.loc 1 3321 0
 3551 0054 9B1A     		subs	r3, r3, r2
 3552 0056 2360     		str	r3, [r4]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3553              		.loc 1 3322 0
 3554 0058 2846     		mov	r0, r5
 3555 005a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3556              	.LVL281:
 3557              	.L306:
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3558              		.loc 1 3304 0
 3559 005e 0024     		movs	r4, #0
 3560              	.LVL282:
 3561              	.L303:
 3562              	.LBE282:
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3563              		.loc 1 3331 0
 3564 0060 FFF7FEFF 		bl	vPortExitCritical
 3565              	.LVL283:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3566              		.loc 1 3334 0
 3567 0064 2046     		mov	r0, r4
 3568 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3569              	.LVL284:
 3570              	.L305:
 3571              	.LBB283:
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3572              		.loc 1 3327 0
 3573 0068 0023     		movs	r3, #0
 3574 006a 2360     		str	r3, [r4]
 3575              	.LVL285:
 3576              	.L307:
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 168


 3577              		.loc 1 3316 0
 3578 006c 0124     		movs	r4, #1
 3579              	.LVL286:
 3580 006e F7E7     		b	.L303
 3581              	.L309:
 3582              		.align	2
 3583              	.L308:
 3584 0070 00000000 		.word	.LANCHOR4
 3585 0074 00000000 		.word	.LANCHOR18
 3586              	.LBE283:
 3587              		.cfi_endproc
 3588              	.LFE39:
 3590              		.section	.text.vTaskMissedYield,"ax",%progbits
 3591              		.align	1
 3592              		.global	vTaskMissedYield
 3593              		.syntax unified
 3594              		.thumb
 3595              		.thumb_func
 3596              		.fpu fpv4-sp-d16
 3598              	vTaskMissedYield:
 3599              	.LFB40:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3600              		.loc 1 3338 0
 3601              		.cfi_startproc
 3602              		@ args = 0, pretend = 0, frame = 0
 3603              		@ frame_needed = 0, uses_anonymous_args = 0
 3604              		@ link register save eliminated.
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3605              		.loc 1 3339 0
 3606 0000 014B     		ldr	r3, .L311
 3607 0002 0122     		movs	r2, #1
 3608 0004 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3609              		.loc 1 3340 0
 3610 0006 7047     		bx	lr
 3611              	.L312:
 3612              		.align	2
 3613              	.L311:
 3614 0008 00000000 		.word	.LANCHOR19
 3615              		.cfi_endproc
 3616              	.LFE40:
 3618              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3619              		.align	1
 3620              		.global	uxTaskGetTaskNumber
 3621              		.syntax unified
 3622              		.thumb
 3623              		.thumb_func
 3624              		.fpu fpv4-sp-d16
 3626              	uxTaskGetTaskNumber:
 3627              	.LFB41:
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 3628              		.loc 1 3346 0
 3629              		.cfi_startproc
 3630              		@ args = 0, pretend = 0, frame = 0
 3631              		@ frame_needed = 0, uses_anonymous_args = 0
 3632              		@ link register save eliminated.
 3633              	.LVL287:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 169


3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3634              		.loc 1 3350 0
 3635 0000 00B1     		cbz	r0, .L313
 3636              	.LVL288:
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3637              		.loc 1 3353 0
 3638 0002 C06C     		ldr	r0, [r0, #76]
 3639              	.LVL289:
 3640              	.L313:
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3641              		.loc 1 3361 0
 3642 0004 7047     		bx	lr
 3643              		.cfi_endproc
 3644              	.LFE41:
 3646              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3647              		.align	1
 3648              		.global	vTaskSetTaskNumber
 3649              		.syntax unified
 3650              		.thumb
 3651              		.thumb_func
 3652              		.fpu fpv4-sp-d16
 3654              	vTaskSetTaskNumber:
 3655              	.LFB42:
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3656              		.loc 1 3369 0
 3657              		.cfi_startproc
 3658              		@ args = 0, pretend = 0, frame = 0
 3659              		@ frame_needed = 0, uses_anonymous_args = 0
 3660              		@ link register save eliminated.
 3661              	.LVL290:
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3662              		.loc 1 3372 0
 3663 0000 00B1     		cbz	r0, .L316
 3664              	.LVL291:
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3665              		.loc 1 3375 0
 3666 0002 C164     		str	r1, [r0, #76]
 3667              	.LVL292:
 3668              	.L316:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3669              		.loc 1 3377 0
 3670 0004 7047     		bx	lr
 3671              		.cfi_endproc
 3672              	.LFE42:
 3674              		.section	.text.vTaskGetInfo,"ax",%progbits
 3675              		.align	1
 3676              		.global	vTaskGetInfo
 3677              		.syntax unified
 3678              		.thumb
 3679              		.thumb_func
 3680              		.fpu fpv4-sp-d16
 3682              	vTaskGetInfo:
 3683              	.LFB46:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3684              		.loc 1 3671 0
 3685              		.cfi_startproc
 3686              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 170


 3687              		@ frame_needed = 0, uses_anonymous_args = 0
 3688              	.LVL293:
 3689 0000 70B5     		push	{r4, r5, r6, lr}
 3690              	.LCFI42:
 3691              		.cfi_def_cfa_offset 16
 3692              		.cfi_offset 4, -16
 3693              		.cfi_offset 5, -12
 3694              		.cfi_offset 6, -8
 3695              		.cfi_offset 14, -4
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3696              		.loc 1 3671 0
 3697 0002 0C46     		mov	r4, r1
 3698 0004 1646     		mov	r6, r2
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3699              		.loc 1 3675 0
 3700 0006 0546     		mov	r5, r0
 3701 0008 08B9     		cbnz	r0, .L322
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3702              		.loc 1 3675 0 is_stmt 0 discriminator 1
 3703 000a 1B4A     		ldr	r2, .L335
 3704              	.LVL294:
 3705 000c 1568     		ldr	r5, [r2]
 3706              	.LVL295:
 3707              	.L322:
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 3708              		.loc 1 3677 0 is_stmt 1 discriminator 4
 3709 000e 2560     		str	r5, [r4]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 3710              		.loc 1 3678 0 discriminator 4
 3711 0010 05F13402 		add	r2, r5, #52
 3712 0014 6260     		str	r2, [r4, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 3713              		.loc 1 3679 0 discriminator 4
 3714 0016 EA6A     		ldr	r2, [r5, #44]
 3715 0018 2261     		str	r2, [r4, #16]
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 3716              		.loc 1 3680 0 discriminator 4
 3717 001a 2A6B     		ldr	r2, [r5, #48]
 3718 001c E261     		str	r2, [r4, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3719              		.loc 1 3681 0 discriminator 4
 3720 001e AA6C     		ldr	r2, [r5, #72]
 3721 0020 A260     		str	r2, [r4, #8]
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3722              		.loc 1 3685 0 discriminator 4
 3723 0022 2A6D     		ldr	r2, [r5, #80]
 3724 0024 6261     		str	r2, [r4, #20]
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3725              		.loc 1 3706 0 discriminator 4
 3726 0026 052B     		cmp	r3, #5
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3727              		.loc 1 3695 0 discriminator 4
 3728 0028 AA6D     		ldr	r2, [r5, #88]
 3729 002a A261     		str	r2, [r4, #24]
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3730              		.loc 1 3706 0 discriminator 4
 3731 002c 1CD0     		beq	.L323
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 171


3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3732              		.loc 1 3708 0
 3733 002e 124A     		ldr	r2, .L335
 3734 0030 1268     		ldr	r2, [r2]
 3735 0032 AA42     		cmp	r2, r5
 3736 0034 0CD1     		bne	.L324
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3737              		.loc 1 3710 0
 3738 0036 0023     		movs	r3, #0
 3739              	.LVL296:
 3740 0038 2373     		strb	r3, [r4, #12]
 3741              	.LVL297:
 3742              	.L325:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3743              		.loc 1 3743 0
 3744 003a D6B1     		cbz	r6, .L327
 3745              	.LVL298:
 3746 003c 296B     		ldr	r1, [r5, #48]
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3747              		.loc 1 3751 0
 3748 003e 0A46     		mov	r2, r1
 3749              	.LVL299:
 3750              	.L328:
 3751 0040 531A     		subs	r3, r2, r1
 3752              	.LVL300:
 3753              	.LBB286:
 3754              	.LBB287:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3755              		.loc 1 3803 0
 3756 0042 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 3757              	.LVL301:
 3758 0046 A528     		cmp	r0, #165
 3759 0048 FAD0     		beq	.L328
 3760              	.LVL302:
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3761              		.loc 1 3809 0
 3762 004a 9B08     		lsrs	r3, r3, #2
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3763              		.loc 1 3811 0
 3764 004c 2384     		strh	r3, [r4, #32]	@ movhi
 3765              	.L321:
 3766              	.LBE287:
 3767              	.LBE286:
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3768              		.loc 1 3759 0
 3769 004e 70BD     		pop	{r4, r5, r6, pc}
 3770              	.LVL303:
 3771              	.L324:
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3772              		.loc 1 3721 0
 3773 0050 032B     		cmp	r3, #3
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3774              		.loc 1 3714 0
 3775 0052 2373     		strb	r3, [r4, #12]
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3776              		.loc 1 3721 0
 3777 0054 F1D1     		bne	.L325
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 172


3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 3778              		.loc 1 3723 0
 3779 0056 FFF7FEFF 		bl	vTaskSuspendAll
 3780              	.LVL304:
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 3781              		.loc 1 3725 0
 3782 005a AB6A     		ldr	r3, [r5, #40]
 3783 005c 0BB1     		cbz	r3, .L326
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 3784              		.loc 1 3727 0
 3785 005e 0223     		movs	r3, #2
 3786 0060 2373     		strb	r3, [r4, #12]
 3787              	.L326:
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3788              		.loc 1 3730 0
 3789 0062 FFF7FEFF 		bl	xTaskResumeAll
 3790              	.LVL305:
 3791 0066 E8E7     		b	.L325
 3792              	.LVL306:
 3793              	.L323:
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3794              		.loc 1 3738 0
 3795 0068 2846     		mov	r0, r5
 3796 006a FFF7FEFF 		bl	eTaskGetState
 3797              	.LVL307:
 3798 006e 2073     		strb	r0, [r4, #12]
 3799 0070 E3E7     		b	.L325
 3800              	.L327:
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3801              		.loc 1 3757 0
 3802 0072 2684     		strh	r6, [r4, #32]	@ movhi
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3803              		.loc 1 3759 0
 3804 0074 EBE7     		b	.L321
 3805              	.L336:
 3806 0076 00BF     		.align	2
 3807              	.L335:
 3808 0078 00000000 		.word	.LANCHOR5
 3809              		.cfi_endproc
 3810              	.LFE46:
 3812              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 3813              		.align	1
 3814              		.syntax unified
 3815              		.thumb
 3816              		.thumb_func
 3817              		.fpu fpv4-sp-d16
 3819              	prvListTasksWithinSingleList:
 3820              	.LFB47:
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 3821              		.loc 1 3767 0
 3822              		.cfi_startproc
 3823              		@ args = 0, pretend = 0, frame = 0
 3824              		@ frame_needed = 0, uses_anonymous_args = 0
 3825              	.LVL308:
 3826 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3827              	.LCFI43:
 3828              		.cfi_def_cfa_offset 40
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 173


 3829              		.cfi_offset 3, -40
 3830              		.cfi_offset 4, -36
 3831              		.cfi_offset 5, -32
 3832              		.cfi_offset 6, -28
 3833              		.cfi_offset 7, -24
 3834              		.cfi_offset 8, -20
 3835              		.cfi_offset 9, -16
 3836              		.cfi_offset 10, -12
 3837              		.cfi_offset 11, -8
 3838              		.cfi_offset 14, -4
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3839              		.loc 1 3771 0
 3840 0004 0D68     		ldr	r5, [r1]
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 3841              		.loc 1 3767 0
 3842 0006 8146     		mov	r9, r0
 3843 0008 0C46     		mov	r4, r1
 3844 000a 9246     		mov	r10, r2
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3845              		.loc 1 3771 0
 3846 000c 15B3     		cbz	r5, .L337
 3847              	.LVL309:
 3848              	.LBB292:
 3849              	.LBB293:
 3850              	.LBB294:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3851              		.loc 1 3773 0
 3852 000e 4B68     		ldr	r3, [r1, #4]
 3853 0010 5B68     		ldr	r3, [r3, #4]
 3854 0012 4B60     		str	r3, [r1, #4]
 3855 0014 01F10807 		add	r7, r1, #8
 3856 0018 BB42     		cmp	r3, r7
 3857 001a 04BF     		itt	eq
 3858 001c CB68     		ldreq	r3, [r1, #12]
 3859 001e 4B60     		streq	r3, [r1, #4]
 3860 0020 4B68     		ldr	r3, [r1, #4]
 3861 0022 D3F80C80 		ldr	r8, [r3, #12]
 3862              	.LVL310:
 3863              	.LBE294:
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3864              		.loc 1 3769 0
 3865 0026 0025     		movs	r5, #0
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 3866              		.loc 1 3782 0
 3867 0028 4FF0240B 		mov	fp, #36
 3868              	.LVL311:
 3869              	.L341:
 3870              	.LBB295:
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 3871              		.loc 1 3781 0
 3872 002c 6368     		ldr	r3, [r4, #4]
 3873 002e 5B68     		ldr	r3, [r3, #4]
 3874 0030 6360     		str	r3, [r4, #4]
 3875 0032 9F42     		cmp	r7, r3
 3876 0034 04BF     		itt	eq
 3877 0036 E368     		ldreq	r3, [r4, #12]
 3878 0038 6360     		streq	r3, [r4, #4]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 174


 3879 003a 6368     		ldr	r3, [r4, #4]
 3880 003c DE68     		ldr	r6, [r3, #12]
 3881              	.LVL312:
 3882              	.LBE295:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 3883              		.loc 1 3782 0
 3884 003e 0BFB0591 		mla	r1, fp, r5, r9
 3885 0042 5346     		mov	r3, r10
 3886 0044 0122     		movs	r2, #1
 3887 0046 3046     		mov	r0, r6
 3888 0048 FFF7FEFF 		bl	vTaskGetInfo
 3889              	.LVL313:
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3890              		.loc 1 3784 0
 3891 004c B045     		cmp	r8, r6
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 3892              		.loc 1 3783 0
 3893 004e 05F10105 		add	r5, r5, #1
 3894              	.LVL314:
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3895              		.loc 1 3784 0
 3896 0052 EBD1     		bne	.L341
 3897              	.LVL315:
 3898              	.L337:
 3899              	.LBE293:
 3900              	.LBE292:
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3901              		.loc 1 3792 0
 3902 0054 2846     		mov	r0, r5
 3903 0056 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3904              		.cfi_endproc
 3905              	.LFE47:
 3907              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3908              		.align	1
 3909              		.global	uxTaskGetSystemState
 3910              		.syntax unified
 3911              		.thumb
 3912              		.thumb_func
 3913              		.fpu fpv4-sp-d16
 3915              	uxTaskGetSystemState:
 3916              	.LFB29:
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3917              		.loc 1 2506 0
 3918              		.cfi_startproc
 3919              		@ args = 0, pretend = 0, frame = 0
 3920              		@ frame_needed = 0, uses_anonymous_args = 0
 3921              	.LVL316:
 3922 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3923              	.LCFI44:
 3924              		.cfi_def_cfa_offset 32
 3925              		.cfi_offset 3, -32
 3926              		.cfi_offset 4, -28
 3927              		.cfi_offset 5, -24
 3928              		.cfi_offset 6, -20
 3929              		.cfi_offset 7, -16
 3930              		.cfi_offset 8, -12
 3931              		.cfi_offset 9, -8
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 175


 3932              		.cfi_offset 14, -4
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3933              		.loc 1 2506 0
 3934 0004 0546     		mov	r5, r0
 3935 0006 1746     		mov	r7, r2
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3936              		.loc 1 2509 0
 3937 0008 FFF7FEFF 		bl	vTaskSuspendAll
 3938              	.LVL317:
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3939              		.loc 1 2512 0
 3940 000c 1F4B     		ldr	r3, .L352
 3941 000e 1B68     		ldr	r3, [r3]
 3942 0010 8B42     		cmp	r3, r1
 3943 0012 39D8     		bhi	.L347
 3944 0014 4FF00008 		mov	r8, #0
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3945              		.loc 1 2519 0
 3946 0018 DFF88490 		ldr	r9, .L352+20
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3947              		.loc 1 2507 0
 3948 001c 4446     		mov	r4, r8
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3949              		.loc 1 2519 0
 3950 001e 2426     		movs	r6, #36
 3951              	.LVL318:
 3952              	.L346:
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3953              		.loc 1 2519 0 is_stmt 0 discriminator 1
 3954 0020 09EB0801 		add	r1, r9, r8
 3955 0024 06FB0450 		mla	r0, r6, r4, r5
 3956 0028 0122     		movs	r2, #1
 3957 002a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3958              	.LVL319:
 3959 002e A8F11408 		sub	r8, r8, #20
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3960              		.loc 1 2521 0 is_stmt 1 discriminator 1
 3961 0032 18F18C0F 		cmn	r8, #140
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3962              		.loc 1 2519 0 discriminator 1
 3963 0036 0444     		add	r4, r4, r0
 3964              	.LVL320:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3965              		.loc 1 2521 0 discriminator 1
 3966 0038 F2D1     		bne	.L346
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3967              		.loc 1 2525 0
 3968 003a 154B     		ldr	r3, .L352+4
 3969 003c 0222     		movs	r2, #2
 3970 003e 1968     		ldr	r1, [r3]
 3971 0040 06FB0450 		mla	r0, r6, r4, r5
 3972 0044 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3973              	.LVL321:
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3974              		.loc 1 2526 0
 3975 0048 124B     		ldr	r3, .L352+8
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 176


 3976              		.loc 1 2525 0
 3977 004a 0444     		add	r4, r4, r0
 3978              	.LVL322:
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3979              		.loc 1 2526 0
 3980 004c 1968     		ldr	r1, [r3]
 3981 004e 0222     		movs	r2, #2
 3982 0050 06FB0450 		mla	r0, r6, r4, r5
 3983 0054 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3984              	.LVL323:
 3985 0058 0444     		add	r4, r4, r0
 3986              	.LVL324:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3987              		.loc 1 2532 0
 3988 005a 0422     		movs	r2, #4
 3989 005c 0E49     		ldr	r1, .L352+12
 3990 005e 06FB0450 		mla	r0, r6, r4, r5
 3991 0062 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3992              	.LVL325:
 3993 0066 0444     		add	r4, r4, r0
 3994              	.LVL326:
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3995              		.loc 1 2540 0
 3996 0068 06FB0450 		mla	r0, r6, r4, r5
 3997 006c 0322     		movs	r2, #3
 3998 006e 0B49     		ldr	r1, .L352+16
 3999 0070 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4000              	.LVL327:
 4001 0074 0444     		add	r4, r4, r0
 4002              	.LVL328:
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4003              		.loc 1 2546 0
 4004 0076 17B1     		cbz	r7, .L345
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
 4005              		.loc 1 2551 0
 4006 0078 FFF7FEFF 		bl	getRunTimeCounterValue
 4007              	.LVL329:
 4008 007c 3860     		str	r0, [r7]
 4009              	.LVL330:
 4010              	.L345:
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4011              		.loc 1 2569 0
 4012 007e FFF7FEFF 		bl	xTaskResumeAll
 4013              	.LVL331:
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4014              		.loc 1 2572 0
 4015 0082 2046     		mov	r0, r4
 4016 0084 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4017              	.LVL332:
 4018              	.L347:
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4019              		.loc 1 2507 0
 4020 0088 0024     		movs	r4, #0
 4021 008a F8E7     		b	.L345
 4022              	.L353:
 4023              		.align	2
 4024              	.L352:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 177


 4025 008c 00000000 		.word	.LANCHOR9
 4026 0090 00000000 		.word	.LANCHOR2
 4027 0094 00000000 		.word	.LANCHOR7
 4028 0098 00000000 		.word	.LANCHOR8
 4029 009c 00000000 		.word	.LANCHOR0
 4030 00a0 78000000 		.word	.LANCHOR11+120
 4031              		.cfi_endproc
 4032              	.LFE29:
 4034              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4035              		.align	1
 4036              		.global	xTaskGetCurrentTaskHandle
 4037              		.syntax unified
 4038              		.thumb
 4039              		.thumb_func
 4040              		.fpu fpv4-sp-d16
 4042              	xTaskGetCurrentTaskHandle:
 4043              	.LFB51:
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4044              		.loc 1 3970 0
 4045              		.cfi_startproc
 4046              		@ args = 0, pretend = 0, frame = 0
 4047              		@ frame_needed = 0, uses_anonymous_args = 0
 4048              		@ link register save eliminated.
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4049              		.loc 1 3976 0
 4050 0000 014B     		ldr	r3, .L355
 4051 0002 1868     		ldr	r0, [r3]
 4052              	.LVL333:
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4053              		.loc 1 3979 0
 4054 0004 7047     		bx	lr
 4055              	.L356:
 4056 0006 00BF     		.align	2
 4057              	.L355:
 4058 0008 00000000 		.word	.LANCHOR5
 4059              		.cfi_endproc
 4060              	.LFE51:
 4062              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4063              		.align	1
 4064              		.global	xTaskGetSchedulerState
 4065              		.syntax unified
 4066              		.thumb
 4067              		.thumb_func
 4068              		.fpu fpv4-sp-d16
 4070              	xTaskGetSchedulerState:
 4071              	.LFB52:
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4072              		.loc 1 3987 0
 4073              		.cfi_startproc
 4074              		@ args = 0, pretend = 0, frame = 0
 4075              		@ frame_needed = 0, uses_anonymous_args = 0
 4076              		@ link register save eliminated.
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4077              		.loc 1 3990 0
 4078 0000 054B     		ldr	r3, .L361
 4079 0002 1B68     		ldr	r3, [r3]
 4080 0004 33B1     		cbz	r3, .L359
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 178


3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4081              		.loc 1 3996 0
 4082 0006 054B     		ldr	r3, .L361+4
 4083 0008 1B68     		ldr	r3, [r3]
 4084 000a 002B     		cmp	r3, #0
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4085              		.loc 1 4002 0
 4086 000c 0CBF     		ite	eq
 4087 000e 0220     		moveq	r0, #2
 4088 0010 0020     		movne	r0, #0
 4089 0012 7047     		bx	lr
 4090              	.L359:
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4091              		.loc 1 3992 0
 4092 0014 0120     		movs	r0, #1
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4093              		.loc 1 4007 0
 4094 0016 7047     		bx	lr
 4095              	.L362:
 4096              		.align	2
 4097              	.L361:
 4098 0018 00000000 		.word	.LANCHOR14
 4099 001c 00000000 		.word	.LANCHOR16
 4100              		.cfi_endproc
 4101              	.LFE52:
 4103              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4104              		.align	1
 4105              		.global	xTaskPriorityInherit
 4106              		.syntax unified
 4107              		.thumb
 4108              		.thumb_func
 4109              		.fpu fpv4-sp-d16
 4111              	xTaskPriorityInherit:
 4112              	.LFB53:
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4113              		.loc 1 4015 0
 4114              		.cfi_startproc
 4115              		@ args = 0, pretend = 0, frame = 0
 4116              		@ frame_needed = 0, uses_anonymous_args = 0
 4117              	.LVL334:
 4118 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4119              	.LCFI45:
 4120              		.cfi_def_cfa_offset 24
 4121              		.cfi_offset 3, -24
 4122              		.cfi_offset 4, -20
 4123              		.cfi_offset 5, -16
 4124              		.cfi_offset 6, -12
 4125              		.cfi_offset 7, -8
 4126              		.cfi_offset 14, -4
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4127              		.loc 1 4022 0
 4128 0002 0446     		mov	r4, r0
 4129 0004 0028     		cmp	r0, #0
 4130 0006 31D0     		beq	.L369
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4131              		.loc 1 4027 0
 4132 0008 204A     		ldr	r2, .L370
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 179


 4133 000a C36A     		ldr	r3, [r0, #44]
 4134 000c 1168     		ldr	r1, [r2]
 4135 000e C96A     		ldr	r1, [r1, #44]
 4136 0010 8B42     		cmp	r3, r1
 4137 0012 1646     		mov	r6, r2
 4138 0014 31D2     		bcs	.L365
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4139              		.loc 1 4032 0
 4140 0016 8269     		ldr	r2, [r0, #24]
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4141              		.loc 1 4043 0
 4142 0018 1D4D     		ldr	r5, .L370+4
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4143              		.loc 1 4032 0
 4144 001a 002A     		cmp	r2, #0
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4145              		.loc 1 4034 0
 4146 001c A1BF     		itttt	ge
 4147 001e 3268     		ldrge	r2, [r6]
 4148 0020 D26A     		ldrge	r2, [r2, #44]
 4149 0022 C2F10702 		rsbge	r2, r2, #7
 4150 0026 8261     		strge	r2, [r0, #24]
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4151              		.loc 1 4043 0
 4152 0028 1422     		movs	r2, #20
 4153 002a 02FB0353 		mla	r3, r2, r3, r5
 4154 002e 4269     		ldr	r2, [r0, #20]
 4155 0030 9A42     		cmp	r2, r3
 4156 0032 1DD1     		bne	.L367
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4157              		.loc 1 4045 0
 4158 0034 071D     		adds	r7, r0, #4
 4159 0036 3846     		mov	r0, r7
 4160              	.LVL335:
 4161 0038 FFF7FEFF 		bl	uxListRemove
 4162              	.LVL336:
 4163 003c 154B     		ldr	r3, .L370+8
 4164 003e 30B9     		cbnz	r0, .L368
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4165              		.loc 1 4050 0
 4166 0040 E06A     		ldr	r0, [r4, #44]
 4167 0042 1A68     		ldr	r2, [r3]
 4168 0044 0121     		movs	r1, #1
 4169 0046 8140     		lsls	r1, r1, r0
 4170 0048 22EA0102 		bic	r2, r2, r1
 4171 004c 1A60     		str	r2, [r3]
 4172              	.L368:
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4173              		.loc 1 4058 0
 4174 004e 3268     		ldr	r2, [r6]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4175              		.loc 1 4059 0
 4176 0050 1968     		ldr	r1, [r3]
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4177              		.loc 1 4058 0
 4178 0052 D26A     		ldr	r2, [r2, #44]
 4179 0054 E262     		str	r2, [r4, #44]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 180


4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4180              		.loc 1 4059 0
 4181 0056 0124     		movs	r4, #1
 4182              	.LVL337:
 4183 0058 04FA02F0 		lsl	r0, r4, r2
 4184 005c 0843     		orrs	r0, r0, r1
 4185 005e 1860     		str	r0, [r3]
 4186 0060 1420     		movs	r0, #20
 4187 0062 3946     		mov	r1, r7
 4188 0064 00FB0250 		mla	r0, r0, r2, r5
 4189 0068 FFF7FEFF 		bl	vListInsertEnd
 4190              	.LVL338:
 4191              	.L369:
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4192              		.loc 1 4017 0
 4193 006c 2046     		mov	r0, r4
 4194              	.LVL339:
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4195              		.loc 1 4096 0
 4196 006e 03E0     		b	.L363
 4197              	.LVL340:
 4198              	.L367:
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4199              		.loc 1 4064 0
 4200 0070 3368     		ldr	r3, [r6]
 4201 0072 DB6A     		ldr	r3, [r3, #44]
 4202 0074 C362     		str	r3, [r0, #44]
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4203              		.loc 1 4070 0
 4204 0076 0120     		movs	r0, #1
 4205              	.LVL341:
 4206              	.L363:
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4207              		.loc 1 4097 0
 4208 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4209              	.LVL342:
 4210              	.L365:
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4211              		.loc 1 4074 0
 4212 007a 1368     		ldr	r3, [r2]
 4213 007c 006D     		ldr	r0, [r0, #80]
 4214              	.LVL343:
 4215 007e DC6A     		ldr	r4, [r3, #44]
 4216              	.LVL344:
 4217 0080 A042     		cmp	r0, r4
 4218 0082 2CBF     		ite	cs
 4219 0084 0020     		movcs	r0, #0
 4220 0086 0120     		movcc	r0, #1
 4221 0088 F6E7     		b	.L363
 4222              	.L371:
 4223 008a 00BF     		.align	2
 4224              	.L370:
 4225 008c 00000000 		.word	.LANCHOR5
 4226 0090 00000000 		.word	.LANCHOR11
 4227 0094 00000000 		.word	.LANCHOR6
 4228              		.cfi_endproc
 4229              	.LFE53:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 181


 4231              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4232              		.align	1
 4233              		.global	xTaskPriorityDisinherit
 4234              		.syntax unified
 4235              		.thumb
 4236              		.thumb_func
 4237              		.fpu fpv4-sp-d16
 4239              	xTaskPriorityDisinherit:
 4240              	.LFB54:
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4241              		.loc 1 4105 0
 4242              		.cfi_startproc
 4243              		@ args = 0, pretend = 0, frame = 0
 4244              		@ frame_needed = 0, uses_anonymous_args = 0
 4245              	.LVL345:
 4246 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4247              	.LCFI46:
 4248              		.cfi_def_cfa_offset 24
 4249              		.cfi_offset 3, -24
 4250              		.cfi_offset 4, -20
 4251              		.cfi_offset 5, -16
 4252              		.cfi_offset 6, -12
 4253              		.cfi_offset 7, -8
 4254              		.cfi_offset 14, -4
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4255              		.loc 1 4109 0
 4256 0002 0446     		mov	r4, r0
 4257 0004 08B9     		cbnz	r0, .L373
 4258              	.L379:
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4259              		.loc 1 4107 0
 4260 0006 0020     		movs	r0, #0
 4261              	.LVL346:
 4262              	.L372:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4263              		.loc 1 4177 0
 4264 0008 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4265              	.LVL347:
 4266              	.L373:
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4267              		.loc 1 4115 0
 4268 000a 224B     		ldr	r3, .L381
 4269 000c 1B68     		ldr	r3, [r3]
 4270 000e 8342     		cmp	r3, r0
 4271 0010 08D0     		beq	.L375
 4272              	.LBB296:
 4273              	.LBB297:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4274              		.loc 2 195 0
 4275              		.syntax unified
 4276              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4277 0012 4FF05003 			mov r3, #80												
 4278 0016 83F31188 		msr basepri, r3											
 4279 001a BFF36F8F 		isb														
 4280 001e BFF34F8F 		dsb														
 4281              	
 4282              	@ 0 "" 2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 182


 4283              	.LVL348:
 4284              		.thumb
 4285              		.syntax unified
 4286              	.L376:
 4287 0022 FEE7     		b	.L376
 4288              	.L375:
 4289              	.LBE297:
 4290              	.LBE296:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4291              		.loc 1 4116 0
 4292 0024 5B6D     		ldr	r3, [r3, #84]
 4293 0026 43B9     		cbnz	r3, .L377
 4294              	.LBB298:
 4295              	.LBB299:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4296              		.loc 2 195 0
 4297              		.syntax unified
 4298              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4299 0028 4FF05003 			mov r3, #80												
 4300 002c 83F31188 		msr basepri, r3											
 4301 0030 BFF36F8F 		isb														
 4302 0034 BFF34F8F 		dsb														
 4303              	
 4304              	@ 0 "" 2
 4305              	.LVL349:
 4306              		.thumb
 4307              		.syntax unified
 4308              	.L378:
 4309 0038 FEE7     		b	.L378
 4310              	.L377:
 4311              	.LBE299:
 4312              	.LBE298:
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4313              		.loc 1 4121 0
 4314 003a C16A     		ldr	r1, [r0, #44]
 4315 003c 026D     		ldr	r2, [r0, #80]
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4316              		.loc 1 4117 0
 4317 003e 013B     		subs	r3, r3, #1
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4318              		.loc 1 4121 0
 4319 0040 9142     		cmp	r1, r2
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4320              		.loc 1 4117 0
 4321 0042 4365     		str	r3, [r0, #84]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4322              		.loc 1 4121 0
 4323 0044 DFD0     		beq	.L379
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4324              		.loc 1 4124 0
 4325 0046 002B     		cmp	r3, #0
 4326 0048 DDD1     		bne	.L379
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4327              		.loc 1 4131 0
 4328 004a 051D     		adds	r5, r0, #4
 4329 004c 2846     		mov	r0, r5
 4330              	.LVL350:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 183


 4331 004e FFF7FEFF 		bl	uxListRemove
 4332              	.LVL351:
 4333 0052 114E     		ldr	r6, .L381+4
 4334 0054 114A     		ldr	r2, .L381+8
 4335 0056 50B9     		cbnz	r0, .L380
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4336              		.loc 1 4133 0
 4337 0058 E76A     		ldr	r7, [r4, #44]
 4338 005a 1421     		movs	r1, #20
 4339 005c 7943     		muls	r1, r7, r1
 4340 005e 7358     		ldr	r3, [r6, r1]
 4341 0060 2BB9     		cbnz	r3, .L380
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4342              		.loc 1 4133 0 is_stmt 0 discriminator 1
 4343 0062 1368     		ldr	r3, [r2]
 4344 0064 0120     		movs	r0, #1
 4345 0066 B840     		lsls	r0, r0, r7
 4346 0068 23EA0003 		bic	r3, r3, r0
 4347 006c 1360     		str	r3, [r2]
 4348              	.L380:
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4349              		.loc 1 4143 0 is_stmt 1
 4350 006e 236D     		ldr	r3, [r4, #80]
 4351 0070 E362     		str	r3, [r4, #44]
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4352              		.loc 1 4148 0
 4353 0072 C3F10701 		rsb	r1, r3, #7
 4354 0076 A161     		str	r1, [r4, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4355              		.loc 1 4149 0
 4356 0078 1168     		ldr	r1, [r2]
 4357 007a 0124     		movs	r4, #1
 4358              	.LVL352:
 4359 007c 04FA03F0 		lsl	r0, r4, r3
 4360 0080 0843     		orrs	r0, r0, r1
 4361 0082 1060     		str	r0, [r2]
 4362 0084 1420     		movs	r0, #20
 4363 0086 00FB0360 		mla	r0, r0, r3, r6
 4364 008a 2946     		mov	r1, r5
 4365 008c FFF7FEFF 		bl	vListInsertEnd
 4366              	.LVL353:
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4367              		.loc 1 4159 0
 4368 0090 2046     		mov	r0, r4
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4369              		.loc 1 4176 0
 4370 0092 B9E7     		b	.L372
 4371              	.L382:
 4372              		.align	2
 4373              	.L381:
 4374 0094 00000000 		.word	.LANCHOR5
 4375 0098 00000000 		.word	.LANCHOR11
 4376 009c 00000000 		.word	.LANCHOR6
 4377              		.cfi_endproc
 4378              	.LFE54:
 4380              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4381              		.align	1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 184


 4382              		.global	vTaskPriorityDisinheritAfterTimeout
 4383              		.syntax unified
 4384              		.thumb
 4385              		.thumb_func
 4386              		.fpu fpv4-sp-d16
 4388              	vTaskPriorityDisinheritAfterTimeout:
 4389              	.LFB55:
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4390              		.loc 1 4185 0
 4391              		.cfi_startproc
 4392              		@ args = 0, pretend = 0, frame = 0
 4393              		@ frame_needed = 0, uses_anonymous_args = 0
 4394              	.LVL354:
 4395 0000 70B5     		push	{r4, r5, r6, lr}
 4396              	.LCFI47:
 4397              		.cfi_def_cfa_offset 16
 4398              		.cfi_offset 4, -16
 4399              		.cfi_offset 5, -12
 4400              		.cfi_offset 6, -8
 4401              		.cfi_offset 14, -4
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4402              		.loc 1 4190 0
 4403 0002 0446     		mov	r4, r0
 4404 0004 0028     		cmp	r0, #0
 4405 0006 49D0     		beq	.L383
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4406              		.loc 1 4194 0
 4407 0008 426D     		ldr	r2, [r0, #84]
 4408 000a 42B9     		cbnz	r2, .L386
 4409              	.LBB300:
 4410              	.LBB301:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4411              		.loc 2 195 0
 4412              		.syntax unified
 4413              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4414 000c 4FF05003 			mov r3, #80												
 4415 0010 83F31188 		msr basepri, r3											
 4416 0014 BFF36F8F 		isb														
 4417 0018 BFF34F8F 		dsb														
 4418              	
 4419              	@ 0 "" 2
 4420              	.LVL355:
 4421              		.thumb
 4422              		.syntax unified
 4423              	.L387:
 4424 001c FEE7     		b	.L387
 4425              	.L386:
 4426 001e 036D     		ldr	r3, [r0, #80]
 4427 0020 9942     		cmp	r1, r3
 4428 0022 38BF     		it	cc
 4429 0024 1946     		movcc	r1, r3
 4430              	.LVL356:
 4431              	.LBE301:
 4432              	.LBE300:
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4433              		.loc 1 4210 0
 4434 0026 C36A     		ldr	r3, [r0, #44]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 185


 4435 0028 8B42     		cmp	r3, r1
 4436 002a 37D0     		beq	.L383
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4437              		.loc 1 4216 0
 4438 002c 012A     		cmp	r2, #1
 4439 002e 35D1     		bne	.L383
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4440              		.loc 1 4221 0
 4441 0030 1B4A     		ldr	r2, .L393
 4442 0032 1268     		ldr	r2, [r2]
 4443 0034 8242     		cmp	r2, r0
 4444 0036 08D1     		bne	.L389
 4445              	.LBB302:
 4446              	.LBB303:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4447              		.loc 2 195 0
 4448              		.syntax unified
 4449              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4450 0038 4FF05003 			mov r3, #80												
 4451 003c 83F31188 		msr basepri, r3											
 4452 0040 BFF36F8F 		isb														
 4453 0044 BFF34F8F 		dsb														
 4454              	
 4455              	@ 0 "" 2
 4456              	.LVL357:
 4457              		.thumb
 4458              		.syntax unified
 4459              	.L390:
 4460 0048 FEE7     		b	.L390
 4461              	.L389:
 4462              	.LVL358:
 4463              	.LBE303:
 4464              	.LBE302:
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4465              		.loc 1 4232 0
 4466 004a 8269     		ldr	r2, [r0, #24]
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4467              		.loc 1 4247 0
 4468 004c 154D     		ldr	r5, .L393+4
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4469              		.loc 1 4228 0
 4470 004e C162     		str	r1, [r0, #44]
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4471              		.loc 1 4232 0
 4472 0050 002A     		cmp	r2, #0
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4473              		.loc 1 4247 0
 4474 0052 4FF01402 		mov	r2, #20
 4475 0056 02FB0353 		mla	r3, r2, r3, r5
 4476              	.LVL359:
 4477 005a 4269     		ldr	r2, [r0, #20]
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4478              		.loc 1 4234 0
 4479 005c A4BF     		itt	ge
 4480 005e C1F10701 		rsbge	r1, r1, #7
 4481              	.LVL360:
 4482 0062 8161     		strge	r1, [r0, #24]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 186


4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4483              		.loc 1 4247 0
 4484 0064 9A42     		cmp	r2, r3
 4485 0066 19D1     		bne	.L383
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4486              		.loc 1 4249 0
 4487 0068 061D     		adds	r6, r0, #4
 4488 006a 3046     		mov	r0, r6
 4489              	.LVL361:
 4490 006c FFF7FEFF 		bl	uxListRemove
 4491              	.LVL362:
 4492 0070 E46A     		ldr	r4, [r4, #44]
 4493              	.LVL363:
 4494 0072 0D4A     		ldr	r2, .L393+8
 4495 0074 28B9     		cbnz	r0, .L392
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4496              		.loc 1 4254 0
 4497 0076 1368     		ldr	r3, [r2]
 4498 0078 0120     		movs	r0, #1
 4499 007a A040     		lsls	r0, r0, r4
 4500 007c 23EA0003 		bic	r3, r3, r0
 4501 0080 1360     		str	r3, [r2]
 4502              	.L392:
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4503              		.loc 1 4261 0
 4504 0082 1168     		ldr	r1, [r2]
 4505 0084 0123     		movs	r3, #1
 4506 0086 A340     		lsls	r3, r3, r4
 4507 0088 1420     		movs	r0, #20
 4508 008a 0B43     		orrs	r3, r3, r1
 4509 008c 00FB0450 		mla	r0, r0, r4, r5
 4510 0090 3146     		mov	r1, r6
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4511              		.loc 1 4282 0
 4512 0092 BDE87040 		pop	{r4, r5, r6, lr}
 4513              	.LCFI48:
 4514              		.cfi_remember_state
 4515              		.cfi_restore 14
 4516              		.cfi_restore 6
 4517              		.cfi_restore 5
 4518              		.cfi_restore 4
 4519              		.cfi_def_cfa_offset 0
 4520              	.LVL364:
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4521              		.loc 1 4261 0
 4522 0096 1360     		str	r3, [r2]
 4523 0098 FFF7FEBF 		b	vListInsertEnd
 4524              	.LVL365:
 4525              	.L383:
 4526              	.LCFI49:
 4527              		.cfi_restore_state
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4528              		.loc 1 4282 0
 4529 009c 70BD     		pop	{r4, r5, r6, pc}
 4530              	.L394:
 4531 009e 00BF     		.align	2
 4532              	.L393:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 187


 4533 00a0 00000000 		.word	.LANCHOR5
 4534 00a4 00000000 		.word	.LANCHOR11
 4535 00a8 00000000 		.word	.LANCHOR6
 4536              		.cfi_endproc
 4537              	.LFE55:
 4539              		.section	.text.vTaskList,"ax",%progbits
 4540              		.align	1
 4541              		.global	vTaskList
 4542              		.syntax unified
 4543              		.thumb
 4544              		.thumb_func
 4545              		.fpu fpv4-sp-d16
 4547              	vTaskList:
 4548              	.LFB57:
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4549              		.loc 1 4379 0
 4550              		.cfi_startproc
 4551              		@ args = 0, pretend = 0, frame = 0
 4552              		@ frame_needed = 0, uses_anonymous_args = 0
 4553              	.LVL366:
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4554              		.loc 1 4414 0
 4555 0000 1F4B     		ldr	r3, .L401
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4556              		.loc 1 4379 0
 4557 0002 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 4558              	.LCFI50:
 4559              		.cfi_def_cfa_offset 40
 4560              		.cfi_offset 4, -32
 4561              		.cfi_offset 5, -28
 4562              		.cfi_offset 6, -24
 4563              		.cfi_offset 7, -20
 4564              		.cfi_offset 8, -16
 4565              		.cfi_offset 9, -12
 4566              		.cfi_offset 10, -8
 4567              		.cfi_offset 14, -4
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4568              		.loc 1 4410 0
 4569 0006 0024     		movs	r4, #0
 4570 0008 0470     		strb	r4, [r0]
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4571              		.loc 1 4414 0
 4572 000a D3F80080 		ldr	r8, [r3]
 4573              	.LVL367:
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4574              		.loc 1 4379 0
 4575 000e 0546     		mov	r5, r0
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4576              		.loc 1 4419 0
 4577 0010 1868     		ldr	r0, [r3]
 4578              	.LVL368:
 4579 0012 2426     		movs	r6, #36
 4580 0014 7043     		muls	r0, r6, r0
 4581 0016 FFF7FEFF 		bl	pvPortMalloc
 4582              	.LVL369:
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4583              		.loc 1 4421 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 188


 4584 001a 0746     		mov	r7, r0
 4585 001c 68B3     		cbz	r0, .L395
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4586              		.loc 1 4424 0
 4587 001e 2246     		mov	r2, r4
 4588 0020 4146     		mov	r1, r8
 4589 0022 FFF7FEFF 		bl	uxTaskGetSystemState
 4590              	.LVL370:
 4591 0026 DFF85C90 		ldr	r9, .L401+4
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
 4592              		.loc 1 4458 0
 4593 002a DFF85CA0 		ldr	r10, .L401+8
 4594 002e 3C46     		mov	r4, r7
 4595 0030 06FB0076 		mla	r6, r6, r0, r7
 4596              	.LVL371:
 4597              	.L397:
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4598              		.loc 1 4427 0 discriminator 1
 4599 0034 A642     		cmp	r6, r4
 4600 0036 05D1     		bne	.L399
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4601              		.loc 1 4464 0
 4602 0038 3846     		mov	r0, r7
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4603              		.loc 1 4470 0
 4604 003a 02B0     		add	sp, sp, #8
 4605              	.LCFI51:
 4606              		.cfi_remember_state
 4607              		.cfi_def_cfa_offset 32
 4608              		@ sp needed
 4609 003c BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4610              	.LCFI52:
 4611              		.cfi_restore 14
 4612              		.cfi_restore 10
 4613              		.cfi_restore 9
 4614              		.cfi_restore 8
 4615              		.cfi_restore 7
 4616              		.cfi_restore 6
 4617              		.cfi_restore 5
 4618              		.cfi_restore 4
 4619              		.cfi_def_cfa_offset 0
 4620              	.LVL372:
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4621              		.loc 1 4464 0
 4622 0040 FFF7FEBF 		b	vPortFree
 4623              	.LVL373:
 4624              	.L399:
 4625              	.LCFI53:
 4626              		.cfi_restore_state
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4627              		.loc 1 4429 0
 4628 0044 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4629              		.loc 1 4455 0
 4630 0046 6168     		ldr	r1, [r4, #4]
 4631 0048 042B     		cmp	r3, #4
 4632 004a 2846     		mov	r0, r5
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 189


 4633 004c 94BF     		ite	ls
 4634 004e 19F80380 		ldrbls	r8, [r9, r3]	@ zero_extendqisi2
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4635              		.loc 1 4429 0
 4636 0052 4FF00008 		movhi	r8, #0
 4637              	.LVL374:
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4638              		.loc 1 4455 0
 4639 0056 FFF7FEFF 		bl	prvWriteNameToBuffer
 4640              	.LVL375:
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
 4641              		.loc 1 4458 0
 4642 005a A368     		ldr	r3, [r4, #8]
 4643 005c 0193     		str	r3, [sp, #4]
 4644 005e 238C     		ldrh	r3, [r4, #32]
 4645 0060 0093     		str	r3, [sp]
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4646              		.loc 1 4455 0
 4647 0062 0546     		mov	r5, r0
 4648              	.LVL376:
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
 4649              		.loc 1 4458 0
 4650 0064 2369     		ldr	r3, [r4, #16]
 4651 0066 4246     		mov	r2, r8
 4652 0068 5146     		mov	r1, r10
 4653 006a FFF7FEFF 		bl	sprintf
 4654              	.LVL377:
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4655              		.loc 1 4459 0
 4656 006e 2846     		mov	r0, r5
 4657 0070 FFF7FEFF 		bl	strlen
 4658              	.LVL378:
 4659 0074 2434     		adds	r4, r4, #36
 4660 0076 0544     		add	r5, r5, r0
 4661              	.LVL379:
 4662 0078 DCE7     		b	.L397
 4663              	.LVL380:
 4664              	.L395:
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4665              		.loc 1 4470 0
 4666 007a 02B0     		add	sp, sp, #8
 4667              	.LCFI54:
 4668              		.cfi_def_cfa_offset 32
 4669              		@ sp needed
 4670 007c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4671              	.LVL381:
 4672              	.L402:
 4673              		.align	2
 4674              	.L401:
 4675 0080 00000000 		.word	.LANCHOR9
 4676 0084 00000000 		.word	.LANCHOR22
 4677 0088 00000000 		.word	.LC1
 4678              		.cfi_endproc
 4679              	.LFE57:
 4681              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
 4682              		.align	1
 4683              		.global	vTaskGetRunTimeStats
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 190


 4684              		.syntax unified
 4685              		.thumb
 4686              		.thumb_func
 4687              		.fpu fpv4-sp-d16
 4689              	vTaskGetRunTimeStats:
 4690              	.LFB58:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4691              		.loc 1 4478 0
 4692              		.cfi_startproc
 4693              		@ args = 0, pretend = 0, frame = 8
 4694              		@ frame_needed = 0, uses_anonymous_args = 0
 4695              	.LVL382:
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4696              		.loc 1 4515 0
 4697 0000 0023     		movs	r3, #0
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4698              		.loc 1 4478 0
 4699 0002 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 4700              	.LCFI55:
 4701              		.cfi_def_cfa_offset 40
 4702              		.cfi_offset 4, -32
 4703              		.cfi_offset 5, -28
 4704              		.cfi_offset 6, -24
 4705              		.cfi_offset 7, -20
 4706              		.cfi_offset 8, -16
 4707              		.cfi_offset 9, -12
 4708              		.cfi_offset 10, -8
 4709              		.cfi_offset 14, -4
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4710              		.loc 1 4515 0
 4711 0006 0370     		strb	r3, [r0]
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4712              		.loc 1 4519 0
 4713 0008 1F4B     		ldr	r3, .L416
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4714              		.loc 1 4478 0
 4715 000a 0546     		mov	r5, r0
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4716              		.loc 1 4519 0
 4717 000c 1C68     		ldr	r4, [r3]
 4718              	.LVL383:
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4719              		.loc 1 4524 0
 4720 000e 1868     		ldr	r0, [r3]
 4721              	.LVL384:
 4722 0010 4FF02408 		mov	r8, #36
 4723 0014 08FB00F0 		mul	r0, r8, r0
 4724 0018 FFF7FEFF 		bl	pvPortMalloc
 4725              	.LVL385:
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4726              		.loc 1 4526 0
 4727 001c 0746     		mov	r7, r0
 4728 001e A8B1     		cbz	r0, .L403
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4729              		.loc 1 4529 0
 4730 0020 01AA     		add	r2, sp, #4
 4731 0022 2146     		mov	r1, r4
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 191


 4732 0024 FFF7FEFF 		bl	uxTaskGetSystemState
 4733              	.LVL386:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4734              		.loc 1 4532 0
 4735 0028 019B     		ldr	r3, [sp, #4]
 4736 002a 6422     		movs	r2, #100
 4737 002c B3FBF2F3 		udiv	r3, r3, r2
 4738 0030 0193     		str	r3, [sp, #4]
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4739              		.loc 1 4535 0
 4740 0032 43B1     		cbz	r3, .L405
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4741              		.loc 1 4576 0
 4742 0034 DFF85490 		ldr	r9, .L416+4
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4743              		.loc 1 4560 0
 4744 0038 DFF854A0 		ldr	r10, .L416+8
 4745 003c 3C46     		mov	r4, r7
 4746 003e 08FB0078 		mla	r8, r8, r0, r7
 4747              	.LVL387:
 4748              	.L406:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4749              		.loc 1 4538 0 discriminator 1
 4750 0042 4445     		cmp	r4, r8
 4751 0044 05D1     		bne	.L409
 4752              	.L405:
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4753              		.loc 1 4591 0
 4754 0046 3846     		mov	r0, r7
 4755 0048 FFF7FEFF 		bl	vPortFree
 4756              	.LVL388:
 4757              	.L403:
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4758              		.loc 1 4597 0
 4759 004c 02B0     		add	sp, sp, #8
 4760              	.LCFI56:
 4761              		.cfi_remember_state
 4762              		.cfi_def_cfa_offset 32
 4763              		@ sp needed
 4764 004e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4765              	.LVL389:
 4766              	.L409:
 4767              	.LCFI57:
 4768              		.cfi_restore_state
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4769              		.loc 1 4548 0
 4770 0052 2846     		mov	r0, r5
 4771 0054 6168     		ldr	r1, [r4, #4]
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4772              		.loc 1 4543 0
 4773 0056 A669     		ldr	r6, [r4, #24]
 4774 0058 019B     		ldr	r3, [sp, #4]
 4775 005a B6FBF3F6 		udiv	r6, r6, r3
 4776              	.LVL390:
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4777              		.loc 1 4548 0
 4778 005e FFF7FEFF 		bl	prvWriteNameToBuffer
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 192


 4779              	.LVL391:
 4780 0062 0546     		mov	r5, r0
 4781              	.LVL392:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4782              		.loc 1 4550 0
 4783 0064 56B1     		cbz	r6, .L407
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4784              		.loc 1 4560 0
 4785 0066 3346     		mov	r3, r6
 4786 0068 A269     		ldr	r2, [r4, #24]
 4787 006a 5146     		mov	r1, r10
 4788 006c FFF7FEFF 		bl	sprintf
 4789              	.LVL393:
 4790              	.L408:
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4791              		.loc 1 4581 0 discriminator 2
 4792 0070 2846     		mov	r0, r5
 4793 0072 FFF7FEFF 		bl	strlen
 4794              	.LVL394:
 4795 0076 2434     		adds	r4, r4, #36
 4796 0078 0544     		add	r5, r5, r0
 4797              	.LVL395:
 4798 007a E2E7     		b	.L406
 4799              	.LVL396:
 4800              	.L407:
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4801              		.loc 1 4576 0
 4802 007c A269     		ldr	r2, [r4, #24]
 4803 007e 4946     		mov	r1, r9
 4804 0080 FFF7FEFF 		bl	sprintf
 4805              	.LVL397:
 4806 0084 F4E7     		b	.L408
 4807              	.L417:
 4808 0086 00BF     		.align	2
 4809              	.L416:
 4810 0088 00000000 		.word	.LANCHOR9
 4811 008c 0C000000 		.word	.LC3
 4812 0090 00000000 		.word	.LC2
 4813              		.cfi_endproc
 4814              	.LFE58:
 4816              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4817              		.align	1
 4818              		.global	uxTaskResetEventItemValue
 4819              		.syntax unified
 4820              		.thumb
 4821              		.thumb_func
 4822              		.fpu fpv4-sp-d16
 4824              	uxTaskResetEventItemValue:
 4825              	.LFB59:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4826              		.loc 1 4603 0
 4827              		.cfi_startproc
 4828              		@ args = 0, pretend = 0, frame = 0
 4829              		@ frame_needed = 0, uses_anonymous_args = 0
 4830              		@ link register save eliminated.
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4831              		.loc 1 4606 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 193


 4832 0000 044B     		ldr	r3, .L419
 4833 0002 1A68     		ldr	r2, [r3]
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4834              		.loc 1 4610 0
 4835 0004 1968     		ldr	r1, [r3]
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4836              		.loc 1 4606 0
 4837 0006 9069     		ldr	r0, [r2, #24]
 4838              	.LVL398:
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4839              		.loc 1 4610 0
 4840 0008 1A68     		ldr	r2, [r3]
 4841 000a CB6A     		ldr	r3, [r1, #44]
 4842 000c C3F10703 		rsb	r3, r3, #7
 4843 0010 9361     		str	r3, [r2, #24]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4844              		.loc 1 4613 0
 4845 0012 7047     		bx	lr
 4846              	.L420:
 4847              		.align	2
 4848              	.L419:
 4849 0014 00000000 		.word	.LANCHOR5
 4850              		.cfi_endproc
 4851              	.LFE59:
 4853              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4854              		.align	1
 4855              		.global	pvTaskIncrementMutexHeldCount
 4856              		.syntax unified
 4857              		.thumb
 4858              		.thumb_func
 4859              		.fpu fpv4-sp-d16
 4861              	pvTaskIncrementMutexHeldCount:
 4862              	.LFB60:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4863              		.loc 1 4619 0
 4864              		.cfi_startproc
 4865              		@ args = 0, pretend = 0, frame = 0
 4866              		@ frame_needed = 0, uses_anonymous_args = 0
 4867              		@ link register save eliminated.
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4868              		.loc 1 4622 0
 4869 0000 044B     		ldr	r3, .L426
 4870 0002 1A68     		ldr	r2, [r3]
 4871 0004 1AB1     		cbz	r2, .L422
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4872              		.loc 1 4624 0
 4873 0006 1968     		ldr	r1, [r3]
 4874 0008 4A6D     		ldr	r2, [r1, #84]
 4875 000a 0132     		adds	r2, r2, #1
 4876 000c 4A65     		str	r2, [r1, #84]
 4877              	.L422:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4878              		.loc 1 4627 0
 4879 000e 1868     		ldr	r0, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4880              		.loc 1 4628 0
 4881 0010 7047     		bx	lr
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 194


 4882              	.L427:
 4883 0012 00BF     		.align	2
 4884              	.L426:
 4885 0014 00000000 		.word	.LANCHOR5
 4886              		.cfi_endproc
 4887              	.LFE60:
 4889              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4890              		.align	1
 4891              		.global	ulTaskNotifyTake
 4892              		.syntax unified
 4893              		.thumb
 4894              		.thumb_func
 4895              		.fpu fpv4-sp-d16
 4897              	ulTaskNotifyTake:
 4898              	.LFB61:
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4899              		.loc 1 4636 0
 4900              		.cfi_startproc
 4901              		@ args = 0, pretend = 0, frame = 0
 4902              		@ frame_needed = 0, uses_anonymous_args = 0
 4903              	.LVL399:
 4904 0000 70B5     		push	{r4, r5, r6, lr}
 4905              	.LCFI58:
 4906              		.cfi_def_cfa_offset 16
 4907              		.cfi_offset 4, -16
 4908              		.cfi_offset 5, -12
 4909              		.cfi_offset 6, -8
 4910              		.cfi_offset 14, -4
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4911              		.loc 1 4642 0
 4912 0002 164C     		ldr	r4, .L441
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4913              		.loc 1 4636 0
 4914 0004 0646     		mov	r6, r0
 4915 0006 0D46     		mov	r5, r1
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4916              		.loc 1 4639 0
 4917 0008 FFF7FEFF 		bl	vPortEnterCritical
 4918              	.LVL400:
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4919              		.loc 1 4642 0
 4920 000c 2368     		ldr	r3, [r4]
 4921 000e DB6D     		ldr	r3, [r3, #92]
 4922 0010 7BB9     		cbnz	r3, .L430
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4923              		.loc 1 4645 0
 4924 0012 2368     		ldr	r3, [r4]
 4925 0014 0121     		movs	r1, #1
 4926 0016 83F86010 		strb	r1, [r3, #96]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4927              		.loc 1 4647 0
 4928 001a 55B1     		cbz	r5, .L430
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4929              		.loc 1 4649 0
 4930 001c 2846     		mov	r0, r5
 4931 001e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4932              	.LVL401:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 195


4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4933              		.loc 1 4656 0
 4934 0022 0F4B     		ldr	r3, .L441+4
 4935 0024 4FF08052 		mov	r2, #268435456
 4936 0028 1A60     		str	r2, [r3]
 4937              		.syntax unified
 4938              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4939 002a BFF34F8F 		dsb
 4940              	@ 0 "" 2
 4941              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4942 002e BFF36F8F 		isb
 4943              	@ 0 "" 2
 4944              		.thumb
 4945              		.syntax unified
 4946              	.L430:
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4947              		.loc 1 4668 0
 4948 0032 FFF7FEFF 		bl	vPortExitCritical
 4949              	.LVL402:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4950              		.loc 1 4670 0
 4951 0036 FFF7FEFF 		bl	vPortEnterCritical
 4952              	.LVL403:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4953              		.loc 1 4673 0
 4954 003a 2368     		ldr	r3, [r4]
 4955 003c DD6D     		ldr	r5, [r3, #92]
 4956              	.LVL404:
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4957              		.loc 1 4675 0
 4958 003e 1DB1     		cbz	r5, .L432
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4959              		.loc 1 4679 0
 4960 0040 2368     		ldr	r3, [r4]
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4961              		.loc 1 4677 0
 4962 0042 4EB1     		cbz	r6, .L433
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4963              		.loc 1 4679 0
 4964 0044 0022     		movs	r2, #0
 4965              	.L440:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4966              		.loc 1 4683 0
 4967 0046 DA65     		str	r2, [r3, #92]
 4968              	.L432:
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4969              		.loc 1 4691 0
 4970 0048 2368     		ldr	r3, [r4]
 4971 004a 0022     		movs	r2, #0
 4972 004c 83F86020 		strb	r2, [r3, #96]
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4973              		.loc 1 4693 0
 4974 0050 FFF7FEFF 		bl	vPortExitCritical
 4975              	.LVL405:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4976              		.loc 1 4696 0
 4977 0054 2846     		mov	r0, r5
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 196


 4978 0056 70BD     		pop	{r4, r5, r6, pc}
 4979              	.LVL406:
 4980              	.L433:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4981              		.loc 1 4683 0
 4982 0058 6A1E     		subs	r2, r5, #1
 4983 005a F4E7     		b	.L440
 4984              	.L442:
 4985              		.align	2
 4986              	.L441:
 4987 005c 00000000 		.word	.LANCHOR5
 4988 0060 04ED00E0 		.word	-536810236
 4989              		.cfi_endproc
 4990              	.LFE61:
 4992              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4993              		.align	1
 4994              		.global	xTaskNotifyWait
 4995              		.syntax unified
 4996              		.thumb
 4997              		.thumb_func
 4998              		.fpu fpv4-sp-d16
 5000              	xTaskNotifyWait:
 5001              	.LFB62:
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5002              		.loc 1 4704 0
 5003              		.cfi_startproc
 5004              		@ args = 0, pretend = 0, frame = 0
 5005              		@ frame_needed = 0, uses_anonymous_args = 0
 5006              	.LVL407:
 5007 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 5008              	.LCFI59:
 5009              		.cfi_def_cfa_offset 24
 5010              		.cfi_offset 4, -24
 5011              		.cfi_offset 5, -20
 5012              		.cfi_offset 6, -16
 5013              		.cfi_offset 7, -12
 5014              		.cfi_offset 8, -8
 5015              		.cfi_offset 14, -4
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5016              		.loc 1 4710 0
 5017 0004 1F4C     		ldr	r4, .L456
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5018              		.loc 1 4704 0
 5019 0006 1E46     		mov	r6, r3
 5020 0008 8046     		mov	r8, r0
 5021 000a 0F46     		mov	r7, r1
 5022 000c 1546     		mov	r5, r2
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5023              		.loc 1 4707 0
 5024 000e FFF7FEFF 		bl	vPortEnterCritical
 5025              	.LVL408:
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5026              		.loc 1 4710 0
 5027 0012 2368     		ldr	r3, [r4]
 5028 0014 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 5029 0018 022B     		cmp	r3, #2
 5030 001a 14D0     		beq	.L445
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 197


4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5031              		.loc 1 4715 0
 5032 001c 2368     		ldr	r3, [r4]
 5033 001e DA6D     		ldr	r2, [r3, #92]
 5034 0020 22EA0802 		bic	r2, r2, r8
 5035 0024 DA65     		str	r2, [r3, #92]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5036              		.loc 1 4718 0
 5037 0026 2368     		ldr	r3, [r4]
 5038 0028 0121     		movs	r1, #1
 5039 002a 83F86010 		strb	r1, [r3, #96]
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5040              		.loc 1 4720 0
 5041 002e 56B1     		cbz	r6, .L445
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5042              		.loc 1 4722 0
 5043 0030 3046     		mov	r0, r6
 5044 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5045              	.LVL409:
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5046              		.loc 1 4729 0
 5047 0036 144B     		ldr	r3, .L456+4
 5048 0038 4FF08052 		mov	r2, #268435456
 5049 003c 1A60     		str	r2, [r3]
 5050              		.syntax unified
 5051              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5052 003e BFF34F8F 		dsb
 5053              	@ 0 "" 2
 5054              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5055 0042 BFF36F8F 		isb
 5056              	@ 0 "" 2
 5057              		.thumb
 5058              		.syntax unified
 5059              	.L445:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5060              		.loc 1 4741 0
 5061 0046 FFF7FEFF 		bl	vPortExitCritical
 5062              	.LVL410:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5063              		.loc 1 4743 0
 5064 004a FFF7FEFF 		bl	vPortEnterCritical
 5065              	.LVL411:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5066              		.loc 1 4747 0
 5067 004e 15B1     		cbz	r5, .L447
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5068              		.loc 1 4751 0
 5069 0050 2368     		ldr	r3, [r4]
 5070 0052 DB6D     		ldr	r3, [r3, #92]
 5071 0054 2B60     		str	r3, [r5]
 5072              	.L447:
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5073              		.loc 1 4758 0
 5074 0056 2368     		ldr	r3, [r4]
 5075 0058 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 5076 005c 022B     		cmp	r3, #2
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 198


 5077              		.loc 1 4767 0
 5078 005e 01BF     		itttt	eq
 5079 0060 2368     		ldreq	r3, [r4]
 5080 0062 D96D     		ldreq	r1, [r3, #92]
 5081 0064 B943     		biceq	r1, r1, r7
 5082 0066 D965     		streq	r1, [r3, #92]
 5083              	.LVL412:
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5084              		.loc 1 4771 0
 5085 0068 2368     		ldr	r3, [r4]
 5086 006a 4FF00002 		mov	r2, #0
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5087              		.loc 1 4768 0
 5088 006e 0CBF     		ite	eq
 5089 0070 0125     		moveq	r5, #1
 5090              	.LVL413:
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5091              		.loc 1 4761 0
 5092 0072 0025     		movne	r5, #0
 5093              	.LVL414:
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5094              		.loc 1 4771 0
 5095 0074 83F86020 		strb	r2, [r3, #96]
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5096              		.loc 1 4773 0
 5097 0078 FFF7FEFF 		bl	vPortExitCritical
 5098              	.LVL415:
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5099              		.loc 1 4776 0
 5100 007c 2846     		mov	r0, r5
 5101 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 5102              	.LVL416:
 5103              	.L457:
 5104 0082 00BF     		.align	2
 5105              	.L456:
 5106 0084 00000000 		.word	.LANCHOR5
 5107 0088 04ED00E0 		.word	-536810236
 5108              		.cfi_endproc
 5109              	.LFE62:
 5111              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5112              		.align	1
 5113              		.global	xTaskGenericNotify
 5114              		.syntax unified
 5115              		.thumb
 5116              		.thumb_func
 5117              		.fpu fpv4-sp-d16
 5119              	xTaskGenericNotify:
 5120              	.LFB63:
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5121              		.loc 1 4784 0
 5122              		.cfi_startproc
 5123              		@ args = 0, pretend = 0, frame = 0
 5124              		@ frame_needed = 0, uses_anonymous_args = 0
 5125              	.LVL417:
 5126 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5127              	.LCFI60:
 5128              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 199


 5129              		.cfi_offset 3, -24
 5130              		.cfi_offset 4, -20
 5131              		.cfi_offset 5, -16
 5132              		.cfi_offset 6, -12
 5133              		.cfi_offset 7, -8
 5134              		.cfi_offset 14, -4
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5135              		.loc 1 4784 0
 5136 0002 0E46     		mov	r6, r1
 5137 0004 1746     		mov	r7, r2
 5138 0006 1D46     		mov	r5, r3
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5139              		.loc 1 4789 0
 5140 0008 0446     		mov	r4, r0
 5141 000a 40B9     		cbnz	r0, .L459
 5142              	.LBB304:
 5143              	.LBB305:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5144              		.loc 2 195 0
 5145              		.syntax unified
 5146              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5147 000c 4FF05003 			mov r3, #80												
 5148 0010 83F31188 		msr basepri, r3											
 5149 0014 BFF36F8F 		isb														
 5150 0018 BFF34F8F 		dsb														
 5151              	
 5152              	@ 0 "" 2
 5153              	.LVL418:
 5154              		.thumb
 5155              		.syntax unified
 5156              	.L460:
 5157 001c FEE7     		b	.L460
 5158              	.LVL419:
 5159              	.L459:
 5160              	.LBE305:
 5161              	.LBE304:
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5162              		.loc 1 4792 0
 5163 001e FFF7FEFF 		bl	vPortEnterCritical
 5164              	.LVL420:
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5165              		.loc 1 4794 0
 5166 0022 0DB1     		cbz	r5, .L461
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5167              		.loc 1 4796 0
 5168 0024 E36D     		ldr	r3, [r4, #92]
 5169 0026 2B60     		str	r3, [r5]
 5170              	.L461:
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5171              		.loc 1 4799 0
 5172 0028 94F86050 		ldrb	r5, [r4, #96]	@ zero_extendqisi2
 5173              	.LVL421:
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5174              		.loc 1 4801 0
 5175 002c 0223     		movs	r3, #2
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5176              		.loc 1 4799 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 200


 5177 002e EDB2     		uxtb	r5, r5
 5178              	.LVL422:
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5179              		.loc 1 4801 0
 5180 0030 84F86030 		strb	r3, [r4, #96]
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5181              		.loc 1 4803 0
 5182 0034 042F     		cmp	r7, #4
 5183 0036 16D8     		bhi	.L462
 5184 0038 DFE807F0 		tbb	[pc, r7]
 5185              	.L464:
 5186 003c 0A       		.byte	(.L463-.L464)/2
 5187 003d 03       		.byte	(.L465-.L464)/2
 5188 003e 07       		.byte	(.L466-.L464)/2
 5189 003f 05       		.byte	(.L482-.L464)/2
 5190 0040 11       		.byte	(.L468-.L464)/2
 5191 0041 00       		.p2align 1
 5192              	.L465:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5193              		.loc 1 4806 0
 5194 0042 E16D     		ldr	r1, [r4, #92]
 5195 0044 0E43     		orrs	r6, r6, r1
 5196              	.LVL423:
 5197              	.L482:
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5198              		.loc 1 4820 0
 5199 0046 E665     		str	r6, [r4, #92]
 5200 0048 02E0     		b	.L463
 5201              	.LVL424:
 5202              	.L466:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5203              		.loc 1 4810 0
 5204 004a E36D     		ldr	r3, [r4, #92]
 5205 004c 0133     		adds	r3, r3, #1
 5206 004e E365     		str	r3, [r4, #92]
 5207              	.LVL425:
 5208              	.L463:
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5209              		.loc 1 4847 0
 5210 0050 012D     		cmp	r5, #1
 5211 0052 14D0     		beq	.L471
 5212              	.L474:
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5213              		.loc 1 4784 0
 5214 0054 0125     		movs	r5, #1
 5215              	.LVL426:
 5216              	.L469:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5217              		.loc 1 4887 0
 5218 0056 FFF7FEFF 		bl	vPortExitCritical
 5219              	.LVL427:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5220              		.loc 1 4890 0
 5221 005a 2846     		mov	r0, r5
 5222 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5223              	.LVL428:
 5224              	.L468:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 201


4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5225              		.loc 1 4818 0
 5226 005e 022D     		cmp	r5, #2
 5227 0060 F1D1     		bne	.L482
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5228              		.loc 1 4825 0
 5229 0062 0025     		movs	r5, #0
 5230              	.LVL429:
 5231 0064 F7E7     		b	.L469
 5232              	.LVL430:
 5233              	.L462:
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5234              		.loc 1 4838 0
 5235 0066 E36D     		ldr	r3, [r4, #92]
 5236 0068 0133     		adds	r3, r3, #1
 5237 006a F1D0     		beq	.L463
 5238              	.LBB306:
 5239              	.LBB307:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5240              		.loc 2 195 0
 5241              		.syntax unified
 5242              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5243 006c 4FF05003 			mov r3, #80												
 5244 0070 83F31188 		msr basepri, r3											
 5245 0074 BFF36F8F 		isb														
 5246 0078 BFF34F8F 		dsb														
 5247              	
 5248              	@ 0 "" 2
 5249              	.LVL431:
 5250              		.thumb
 5251              		.syntax unified
 5252              	.L470:
 5253 007c FEE7     		b	.L470
 5254              	.LVL432:
 5255              	.L471:
 5256              	.LBE307:
 5257              	.LBE306:
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5258              		.loc 1 4849 0
 5259 007e 261D     		adds	r6, r4, #4
 5260 0080 3046     		mov	r0, r6
 5261 0082 FFF7FEFF 		bl	uxListRemove
 5262              	.LVL433:
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5263              		.loc 1 4850 0
 5264 0086 1449     		ldr	r1, .L483
 5265 0088 E26A     		ldr	r2, [r4, #44]
 5266 008a 0868     		ldr	r0, [r1]
 5267 008c 05FA02F3 		lsl	r3, r5, r2
 5268 0090 0343     		orrs	r3, r3, r0
 5269 0092 0B60     		str	r3, [r1]
 5270 0094 114B     		ldr	r3, .L483+4
 5271 0096 1420     		movs	r0, #20
 5272 0098 00FB0230 		mla	r0, r0, r2, r3
 5273 009c 3146     		mov	r1, r6
 5274 009e FFF7FEFF 		bl	vListInsertEnd
 5275              	.LVL434:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 202


4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5276              		.loc 1 4853 0
 5277 00a2 A36A     		ldr	r3, [r4, #40]
 5278 00a4 43B1     		cbz	r3, .L472
 5279              	.LBB308:
 5280              	.LBB309:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5281              		.loc 2 195 0
 5282              		.syntax unified
 5283              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5284 00a6 4FF05003 			mov r3, #80												
 5285 00aa 83F31188 		msr basepri, r3											
 5286 00ae BFF36F8F 		isb														
 5287 00b2 BFF34F8F 		dsb														
 5288              	
 5289              	@ 0 "" 2
 5290              	.LVL435:
 5291              		.thumb
 5292              		.syntax unified
 5293              	.L473:
 5294 00b6 FEE7     		b	.L473
 5295              	.L472:
 5296              	.LBE309:
 5297              	.LBE308:
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5298              		.loc 1 4871 0
 5299 00b8 094B     		ldr	r3, .L483+8
 5300 00ba E26A     		ldr	r2, [r4, #44]
 5301 00bc 1B68     		ldr	r3, [r3]
 5302 00be DB6A     		ldr	r3, [r3, #44]
 5303 00c0 9A42     		cmp	r2, r3
 5304 00c2 C7D9     		bls	.L474
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5305              		.loc 1 4875 0
 5306 00c4 074B     		ldr	r3, .L483+12
 5307 00c6 4FF08052 		mov	r2, #268435456
 5308 00ca 1A60     		str	r2, [r3]
 5309              		.syntax unified
 5310              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5311 00cc BFF34F8F 		dsb
 5312              	@ 0 "" 2
 5313              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5314 00d0 BFF36F8F 		isb
 5315              	@ 0 "" 2
 5316              		.thumb
 5317              		.syntax unified
 5318 00d4 BFE7     		b	.L469
 5319              	.L484:
 5320 00d6 00BF     		.align	2
 5321              	.L483:
 5322 00d8 00000000 		.word	.LANCHOR6
 5323 00dc 00000000 		.word	.LANCHOR11
 5324 00e0 00000000 		.word	.LANCHOR5
 5325 00e4 04ED00E0 		.word	-536810236
 5326              		.cfi_endproc
 5327              	.LFE63:
 5329              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 203


 5330              		.align	1
 5331              		.global	xTaskGenericNotifyFromISR
 5332              		.syntax unified
 5333              		.thumb
 5334              		.thumb_func
 5335              		.fpu fpv4-sp-d16
 5337              	xTaskGenericNotifyFromISR:
 5338              	.LFB64:
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5339              		.loc 1 4898 0
 5340              		.cfi_startproc
 5341              		@ args = 4, pretend = 0, frame = 0
 5342              		@ frame_needed = 0, uses_anonymous_args = 0
 5343              	.LVL436:
 5344 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5345              	.LCFI61:
 5346              		.cfi_def_cfa_offset 32
 5347              		.cfi_offset 3, -32
 5348              		.cfi_offset 4, -28
 5349              		.cfi_offset 5, -24
 5350              		.cfi_offset 6, -20
 5351              		.cfi_offset 7, -16
 5352              		.cfi_offset 8, -12
 5353              		.cfi_offset 9, -8
 5354              		.cfi_offset 14, -4
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5355              		.loc 1 4898 0
 5356 0004 DDF82080 		ldr	r8, [sp, #32]
 5357 0008 0E46     		mov	r6, r1
 5358 000a 9146     		mov	r9, r2
 5359 000c 1D46     		mov	r5, r3
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5360              		.loc 1 4904 0
 5361 000e 0446     		mov	r4, r0
 5362 0010 40B9     		cbnz	r0, .L486
 5363              	.LBB310:
 5364              	.LBB311:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5365              		.loc 2 195 0
 5366              		.syntax unified
 5367              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5368 0012 4FF05003 			mov r3, #80												
 5369 0016 83F31188 		msr basepri, r3											
 5370 001a BFF36F8F 		isb														
 5371 001e BFF34F8F 		dsb														
 5372              	
 5373              	@ 0 "" 2
 5374              	.LVL437:
 5375              		.thumb
 5376              		.syntax unified
 5377              	.L487:
 5378 0022 FEE7     		b	.L487
 5379              	.LVL438:
 5380              	.L486:
 5381              	.LBE311:
 5382              	.LBE310:
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 204


 5383              		.loc 1 4922 0
 5384 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5385              	.LVL439:
 5386              	.LBB312:
 5387              	.LBB313:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5388              		.loc 2 211 0
 5389              		.syntax unified
 5390              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5391 0028 EFF31187 			mrs r7, basepri											
 5392 002c 4FF05003 		mov r3, #80												
 5393 0030 83F31188 		msr basepri, r3											
 5394 0034 BFF36F8F 		isb														
 5395 0038 BFF34F8F 		dsb														
 5396              	
 5397              	@ 0 "" 2
 5398              		.thumb
 5399              		.syntax unified
 5400              	.LBE313:
 5401              	.LBE312:
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5402              		.loc 1 4928 0
 5403 003c 0DB1     		cbz	r5, .L488
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5404              		.loc 1 4930 0
 5405 003e E36D     		ldr	r3, [r4, #92]
 5406 0040 2B60     		str	r3, [r5]
 5407              	.L488:
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5408              		.loc 1 4933 0
 5409 0042 94F86050 		ldrb	r5, [r4, #96]	@ zero_extendqisi2
 5410              	.LVL440:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5411              		.loc 1 4934 0
 5412 0046 0223     		movs	r3, #2
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5413              		.loc 1 4933 0
 5414 0048 EDB2     		uxtb	r5, r5
 5415              	.LVL441:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5416              		.loc 1 4934 0
 5417 004a 84F86030 		strb	r3, [r4, #96]
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5418              		.loc 1 4936 0
 5419 004e B9F1040F 		cmp	r9, #4
 5420 0052 16D8     		bhi	.L489
 5421 0054 DFE809F0 		tbb	[pc, r9]
 5422              	.L491:
 5423 0058 0A       		.byte	(.L490-.L491)/2
 5424 0059 03       		.byte	(.L492-.L491)/2
 5425 005a 07       		.byte	(.L493-.L491)/2
 5426 005b 05       		.byte	(.L515-.L491)/2
 5427 005c 11       		.byte	(.L495-.L491)/2
 5428 005d 00       		.p2align 1
 5429              	.L492:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5430              		.loc 1 4939 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 205


 5431 005e E16D     		ldr	r1, [r4, #92]
 5432 0060 0E43     		orrs	r6, r6, r1
 5433              	.LVL442:
 5434              	.L515:
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5435              		.loc 1 4953 0
 5436 0062 E665     		str	r6, [r4, #92]
 5437 0064 02E0     		b	.L490
 5438              	.LVL443:
 5439              	.L493:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5440              		.loc 1 4943 0
 5441 0066 E36D     		ldr	r3, [r4, #92]
 5442 0068 0133     		adds	r3, r3, #1
 5443 006a E365     		str	r3, [r4, #92]
 5444              	.LVL444:
 5445              	.L490:
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5446              		.loc 1 4979 0
 5447 006c 012D     		cmp	r5, #1
 5448 006e 14D0     		beq	.L498
 5449              	.LVL445:
 5450              	.L517:
 5451 0070 0120     		movs	r0, #1
 5452              	.L496:
 5453              	.LVL446:
 5454              	.LBB314:
 5455              	.LBB315:
 5456              		.loc 2 229 0
 5457              		.syntax unified
 5458              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5459 0072 87F31188 			msr basepri, r7	
 5460              	@ 0 "" 2
 5461              	.LVL447:
 5462              		.thumb
 5463              		.syntax unified
 5464              	.LBE315:
 5465              	.LBE314:
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5466              		.loc 1 5019 0
 5467 0076 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5468              	.LVL448:
 5469              	.L495:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5470              		.loc 1 4951 0
 5471 007a 022D     		cmp	r5, #2
 5472 007c F1D1     		bne	.L515
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5473              		.loc 1 4958 0
 5474 007e 0020     		movs	r0, #0
 5475 0080 F7E7     		b	.L496
 5476              	.L489:
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5477              		.loc 1 4971 0
 5478 0082 E36D     		ldr	r3, [r4, #92]
 5479 0084 0133     		adds	r3, r3, #1
 5480 0086 F1D0     		beq	.L490
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 206


 5481              	.LBB316:
 5482              	.LBB317:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5483              		.loc 2 195 0
 5484              		.syntax unified
 5485              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5486 0088 4FF05003 			mov r3, #80												
 5487 008c 83F31188 		msr basepri, r3											
 5488 0090 BFF36F8F 		isb														
 5489 0094 BFF34F8F 		dsb														
 5490              	
 5491              	@ 0 "" 2
 5492              	.LVL449:
 5493              		.thumb
 5494              		.syntax unified
 5495              	.L497:
 5496 0098 FEE7     		b	.L497
 5497              	.LVL450:
 5498              	.L498:
 5499              	.LBE317:
 5500              	.LBE316:
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5501              		.loc 1 4982 0
 5502 009a A36A     		ldr	r3, [r4, #40]
 5503 009c 43B1     		cbz	r3, .L499
 5504              	.LBB318:
 5505              	.LBB319:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5506              		.loc 2 195 0
 5507              		.syntax unified
 5508              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5509 009e 4FF05003 			mov r3, #80												
 5510 00a2 83F31188 		msr basepri, r3											
 5511 00a6 BFF36F8F 		isb														
 5512 00aa BFF34F8F 		dsb														
 5513              	
 5514              	@ 0 "" 2
 5515              	.LVL451:
 5516              		.thumb
 5517              		.syntax unified
 5518              	.L500:
 5519 00ae FEE7     		b	.L500
 5520              	.L499:
 5521              	.LBE319:
 5522              	.LBE318:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5523              		.loc 1 4984 0
 5524 00b0 134B     		ldr	r3, .L518
 5525 00b2 1B68     		ldr	r3, [r3]
 5526 00b4 FBB9     		cbnz	r3, .L501
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5527              		.loc 1 4986 0
 5528 00b6 261D     		adds	r6, r4, #4
 5529 00b8 3046     		mov	r0, r6
 5530 00ba FFF7FEFF 		bl	uxListRemove
 5531              	.LVL452:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 207


 5532              		.loc 1 4987 0
 5533 00be 114A     		ldr	r2, .L518+4
 5534 00c0 E36A     		ldr	r3, [r4, #44]
 5535 00c2 1168     		ldr	r1, [r2]
 5536 00c4 9D40     		lsls	r5, r5, r3
 5537              	.LVL453:
 5538 00c6 0D43     		orrs	r5, r5, r1
 5539 00c8 1560     		str	r5, [r2]
 5540 00ca 0F4A     		ldr	r2, .L518+8
 5541 00cc 1420     		movs	r0, #20
 5542 00ce 3146     		mov	r1, r6
 5543 00d0 00FB0320 		mla	r0, r0, r3, r2
 5544              	.L516:
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5545              		.loc 1 4993 0
 5546 00d4 FFF7FEFF 		bl	vListInsertEnd
 5547              	.LVL454:
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5548              		.loc 1 4996 0
 5549 00d8 0C4B     		ldr	r3, .L518+12
 5550 00da E26A     		ldr	r2, [r4, #44]
 5551 00dc 1B68     		ldr	r3, [r3]
 5552 00de DB6A     		ldr	r3, [r3, #44]
 5553 00e0 9A42     		cmp	r2, r3
 5554 00e2 C5D9     		bls	.L517
 5555 00e4 0123     		movs	r3, #1
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5556              		.loc 1 5000 0
 5557 00e6 B8F1000F 		cmp	r8, #0
 5558 00ea 01D0     		beq	.L504
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5559              		.loc 1 5002 0
 5560 00ec C8F80030 		str	r3, [r8]
 5561              	.L504:
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5562              		.loc 1 5008 0
 5563 00f0 074A     		ldr	r2, .L518+16
 5564 00f2 1360     		str	r3, [r2]
 5565 00f4 BCE7     		b	.L517
 5566              	.LVL455:
 5567              	.L501:
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5568              		.loc 1 4993 0
 5569 00f6 04F11801 		add	r1, r4, #24
 5570 00fa 0648     		ldr	r0, .L518+20
 5571 00fc EAE7     		b	.L516
 5572              	.L519:
 5573 00fe 00BF     		.align	2
 5574              	.L518:
 5575 0100 00000000 		.word	.LANCHOR16
 5576 0104 00000000 		.word	.LANCHOR6
 5577 0108 00000000 		.word	.LANCHOR11
 5578 010c 00000000 		.word	.LANCHOR5
 5579 0110 00000000 		.word	.LANCHOR19
 5580 0114 00000000 		.word	.LANCHOR1
 5581              		.cfi_endproc
 5582              	.LFE64:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 208


 5584              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5585              		.align	1
 5586              		.global	vTaskNotifyGiveFromISR
 5587              		.syntax unified
 5588              		.thumb
 5589              		.thumb_func
 5590              		.fpu fpv4-sp-d16
 5592              	vTaskNotifyGiveFromISR:
 5593              	.LFB65:
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5594              		.loc 1 5027 0
 5595              		.cfi_startproc
 5596              		@ args = 0, pretend = 0, frame = 0
 5597              		@ frame_needed = 0, uses_anonymous_args = 0
 5598              	.LVL456:
 5599 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 5600              	.LCFI62:
 5601              		.cfi_def_cfa_offset 24
 5602              		.cfi_offset 4, -24
 5603              		.cfi_offset 5, -20
 5604              		.cfi_offset 6, -16
 5605              		.cfi_offset 7, -12
 5606              		.cfi_offset 8, -8
 5607              		.cfi_offset 14, -4
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5608              		.loc 1 5027 0
 5609 0004 0E46     		mov	r6, r1
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5610              		.loc 1 5032 0
 5611 0006 0446     		mov	r4, r0
 5612 0008 40B9     		cbnz	r0, .L521
 5613              	.LBB320:
 5614              	.LBB321:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5615              		.loc 2 195 0
 5616              		.syntax unified
 5617              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5618 000a 4FF05003 			mov r3, #80												
 5619 000e 83F31188 		msr basepri, r3											
 5620 0012 BFF36F8F 		isb														
 5621 0016 BFF34F8F 		dsb														
 5622              	
 5623              	@ 0 "" 2
 5624              	.LVL457:
 5625              		.thumb
 5626              		.syntax unified
 5627              	.L522:
 5628 001a FEE7     		b	.L522
 5629              	.L521:
 5630              	.LBE321:
 5631              	.LBE320:
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5632              		.loc 1 5050 0
 5633 001c FFF7FEFF 		bl	vPortValidateInterruptPriority
 5634              	.LVL458:
 5635              	.LBB322:
 5636              	.LBB323:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 209


 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5637              		.loc 2 211 0
 5638              		.syntax unified
 5639              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5640 0020 EFF31187 			mrs r7, basepri											
 5641 0024 4FF05003 		mov r3, #80												
 5642 0028 83F31188 		msr basepri, r3											
 5643 002c BFF36F8F 		isb														
 5644 0030 BFF34F8F 		dsb														
 5645              	
 5646              	@ 0 "" 2
 5647              		.thumb
 5648              		.syntax unified
 5649              	.LBE323:
 5650              	.LBE322:
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5651              		.loc 1 5057 0
 5652 0034 0223     		movs	r3, #2
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5653              		.loc 1 5056 0
 5654 0036 94F86050 		ldrb	r5, [r4, #96]	@ zero_extendqisi2
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5655              		.loc 1 5057 0
 5656 003a 84F86030 		strb	r3, [r4, #96]
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5657              		.loc 1 5061 0
 5658 003e E36D     		ldr	r3, [r4, #92]
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5659              		.loc 1 5056 0
 5660 0040 EDB2     		uxtb	r5, r5
 5661              	.LVL459:
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5662              		.loc 1 5061 0
 5663 0042 0133     		adds	r3, r3, #1
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5664              		.loc 1 5067 0
 5665 0044 012D     		cmp	r5, #1
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5666              		.loc 1 5061 0
 5667 0046 E365     		str	r3, [r4, #92]
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5668              		.loc 1 5067 0
 5669 0048 2AD1     		bne	.L524
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5670              		.loc 1 5070 0
 5671 004a A36A     		ldr	r3, [r4, #40]
 5672 004c 43B1     		cbz	r3, .L525
 5673              	.LBB324:
 5674              	.LBB325:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5675              		.loc 2 195 0
 5676              		.syntax unified
 5677              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5678 004e 4FF05003 			mov r3, #80												
 5679 0052 83F31188 		msr basepri, r3											
 5680 0056 BFF36F8F 		isb														
 5681 005a BFF34F8F 		dsb														
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 210


 5682              	
 5683              	@ 0 "" 2
 5684              	.LVL460:
 5685              		.thumb
 5686              		.syntax unified
 5687              	.L526:
 5688 005e FEE7     		b	.L526
 5689              	.L525:
 5690              	.LBE325:
 5691              	.LBE324:
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5692              		.loc 1 5072 0
 5693 0060 134B     		ldr	r3, .L535
 5694 0062 1B68     		ldr	r3, [r3]
 5695 0064 03BB     		cbnz	r3, .L527
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5696              		.loc 1 5074 0
 5697 0066 04F10408 		add	r8, r4, #4
 5698 006a 4046     		mov	r0, r8
 5699 006c FFF7FEFF 		bl	uxListRemove
 5700              	.LVL461:
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5701              		.loc 1 5075 0
 5702 0070 104A     		ldr	r2, .L535+4
 5703 0072 E36A     		ldr	r3, [r4, #44]
 5704 0074 1168     		ldr	r1, [r2]
 5705 0076 9D40     		lsls	r5, r5, r3
 5706              	.LVL462:
 5707 0078 0D43     		orrs	r5, r5, r1
 5708 007a 1560     		str	r5, [r2]
 5709 007c 0E4A     		ldr	r2, .L535+8
 5710 007e 1420     		movs	r0, #20
 5711 0080 4146     		mov	r1, r8
 5712 0082 00FB0320 		mla	r0, r0, r3, r2
 5713              	.L534:
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5714              		.loc 1 5081 0
 5715 0086 FFF7FEFF 		bl	vListInsertEnd
 5716              	.LVL463:
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5717              		.loc 1 5084 0
 5718 008a 0C4B     		ldr	r3, .L535+12
 5719 008c E26A     		ldr	r2, [r4, #44]
 5720 008e 1B68     		ldr	r3, [r3]
 5721 0090 DB6A     		ldr	r3, [r3, #44]
 5722 0092 9A42     		cmp	r2, r3
 5723 0094 04D9     		bls	.L524
 5724 0096 0123     		movs	r3, #1
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5725              		.loc 1 5088 0
 5726 0098 06B1     		cbz	r6, .L530
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5727              		.loc 1 5090 0
 5728 009a 3360     		str	r3, [r6]
 5729              	.L530:
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5730              		.loc 1 5096 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 211


 5731 009c 084A     		ldr	r2, .L535+16
 5732 009e 1360     		str	r3, [r2]
 5733              	.L524:
 5734              	.LVL464:
 5735              	.LBB326:
 5736              	.LBB327:
 5737              		.loc 2 229 0
 5738              		.syntax unified
 5739              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5740 00a0 87F31188 			msr basepri, r7	
 5741              	@ 0 "" 2
 5742              	.LVL465:
 5743              		.thumb
 5744              		.syntax unified
 5745              	.LBE327:
 5746              	.LBE326:
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5747              		.loc 1 5105 0
 5748 00a4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 5749              	.LVL466:
 5750              	.L527:
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5751              		.loc 1 5081 0
 5752 00a8 04F11801 		add	r1, r4, #24
 5753 00ac 0548     		ldr	r0, .L535+20
 5754 00ae EAE7     		b	.L534
 5755              	.L536:
 5756              		.align	2
 5757              	.L535:
 5758 00b0 00000000 		.word	.LANCHOR16
 5759 00b4 00000000 		.word	.LANCHOR6
 5760 00b8 00000000 		.word	.LANCHOR11
 5761 00bc 00000000 		.word	.LANCHOR5
 5762 00c0 00000000 		.word	.LANCHOR19
 5763 00c4 00000000 		.word	.LANCHOR1
 5764              		.cfi_endproc
 5765              	.LFE65:
 5767              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5768              		.align	1
 5769              		.global	xTaskNotifyStateClear
 5770              		.syntax unified
 5771              		.thumb
 5772              		.thumb_func
 5773              		.fpu fpv4-sp-d16
 5775              	xTaskNotifyStateClear:
 5776              	.LFB66:
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5777              		.loc 1 5113 0
 5778              		.cfi_startproc
 5779              		@ args = 0, pretend = 0, frame = 0
 5780              		@ frame_needed = 0, uses_anonymous_args = 0
 5781              	.LVL467:
 5782 0000 38B5     		push	{r3, r4, r5, lr}
 5783              	.LCFI63:
 5784              		.cfi_def_cfa_offset 16
 5785              		.cfi_offset 3, -16
 5786              		.cfi_offset 4, -12
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 212


 5787              		.cfi_offset 5, -8
 5788              		.cfi_offset 14, -4
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5789              		.loc 1 5119 0
 5790 0002 0546     		mov	r5, r0
 5791 0004 08B9     		cbnz	r0, .L538
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5792              		.loc 1 5119 0 is_stmt 0 discriminator 1
 5793 0006 084B     		ldr	r3, .L541
 5794 0008 1D68     		ldr	r5, [r3]
 5795              	.LVL468:
 5796              	.L538:
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5797              		.loc 1 5121 0 is_stmt 1 discriminator 4
 5798 000a FFF7FEFF 		bl	vPortEnterCritical
 5799              	.LVL469:
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5800              		.loc 1 5123 0 discriminator 4
 5801 000e 95F86030 		ldrb	r3, [r5, #96]	@ zero_extendqisi2
 5802 0012 0024     		movs	r4, #0
 5803 0014 022B     		cmp	r3, #2
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5804              		.loc 1 5125 0 discriminator 4
 5805 0016 04BF     		itt	eq
 5806 0018 85F86040 		strbeq	r4, [r5, #96]
 5807              	.LVL470:
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5808              		.loc 1 5126 0 discriminator 4
 5809 001c 0124     		moveq	r4, #1
 5810              	.LVL471:
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5811              		.loc 1 5133 0 discriminator 4
 5812 001e FFF7FEFF 		bl	vPortExitCritical
 5813              	.LVL472:
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5814              		.loc 1 5136 0 discriminator 4
 5815 0022 2046     		mov	r0, r4
 5816 0024 38BD     		pop	{r3, r4, r5, pc}
 5817              	.LVL473:
 5818              	.L542:
 5819 0026 00BF     		.align	2
 5820              	.L541:
 5821 0028 00000000 		.word	.LANCHOR5
 5822              		.cfi_endproc
 5823              	.LFE66:
 5825              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 5826              		.align	1
 5827              		.global	ulTaskNotifyValueClear
 5828              		.syntax unified
 5829              		.thumb
 5830              		.thumb_func
 5831              		.fpu fpv4-sp-d16
 5833              	ulTaskNotifyValueClear:
 5834              	.LFB67:
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5835              		.loc 1 5144 0
 5836              		.cfi_startproc
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 213


 5837              		@ args = 0, pretend = 0, frame = 0
 5838              		@ frame_needed = 0, uses_anonymous_args = 0
 5839              	.LVL474:
 5840 0000 70B5     		push	{r4, r5, r6, lr}
 5841              	.LCFI64:
 5842              		.cfi_def_cfa_offset 16
 5843              		.cfi_offset 4, -16
 5844              		.cfi_offset 5, -12
 5845              		.cfi_offset 6, -8
 5846              		.cfi_offset 14, -4
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5847              		.loc 1 5144 0
 5848 0002 0E46     		mov	r6, r1
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5849              		.loc 1 5150 0
 5850 0004 0446     		mov	r4, r0
 5851 0006 074D     		ldr	r5, .L545
 5852 0008 00B9     		cbnz	r0, .L544
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5853              		.loc 1 5150 0 is_stmt 0 discriminator 1
 5854 000a 2C68     		ldr	r4, [r5]
 5855              	.LVL475:
 5856              	.L544:
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5857              		.loc 1 5152 0 is_stmt 1 discriminator 4
 5858 000c FFF7FEFF 		bl	vPortEnterCritical
 5859              	.LVL476:
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 5860              		.loc 1 5156 0 discriminator 4
 5861 0010 2B68     		ldr	r3, [r5]
 5862 0012 DD6D     		ldr	r5, [r3, #92]
 5863              	.LVL477:
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5864              		.loc 1 5157 0 discriminator 4
 5865 0014 E36D     		ldr	r3, [r4, #92]
 5866 0016 23EA0603 		bic	r3, r3, r6
 5867 001a E365     		str	r3, [r4, #92]
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5868              		.loc 1 5159 0 discriminator 4
 5869 001c FFF7FEFF 		bl	vPortExitCritical
 5870              	.LVL478:
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5871              		.loc 1 5162 0 discriminator 4
 5872 0020 2846     		mov	r0, r5
 5873 0022 70BD     		pop	{r4, r5, r6, pc}
 5874              	.LVL479:
 5875              	.L546:
 5876              		.align	2
 5877              	.L545:
 5878 0024 00000000 		.word	.LANCHOR5
 5879              		.cfi_endproc
 5880              	.LFE67:
 5882              		.global	pxCurrentTCB
 5883              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5884              		.align	2
 5885              		.set	.LANCHOR5,. + 0
 5888              	pxCurrentTCB:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 214


 5889 0000 00000000 		.space	4
 5890              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5891              		.align	2
 5892              		.set	.LANCHOR2,. + 0
 5895              	pxDelayedTaskList:
 5896 0000 00000000 		.space	4
 5897              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5898              		.align	2
 5899              		.set	.LANCHOR7,. + 0
 5902              	pxOverflowDelayedTaskList:
 5903 0000 00000000 		.space	4
 5904              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5905              		.align	2
 5906              		.set	.LANCHOR11,. + 0
 5909              	pxReadyTasksLists:
 5910 0000 00000000 		.space	140
 5910      00000000 
 5910      00000000 
 5910      00000000 
 5910      00000000 
 5911              		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 5912              		.align	2
 5913              		.set	.LANCHOR21,. + 0
 5916              	ulTaskSwitchedInTime:
 5917 0000 00000000 		.space	4
 5918              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5919              		.align	2
 5920              		.set	.LANCHOR9,. + 0
 5923              	uxCurrentNumberOfTasks:
 5924 0000 00000000 		.space	4
 5925              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5926              		.align	2
 5927              		.set	.LANCHOR10,. + 0
 5930              	uxDeletedTasksWaitingCleanUp:
 5931 0000 00000000 		.space	4
 5932              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5933              		.align	2
 5934              		.set	.LANCHOR16,. + 0
 5937              	uxSchedulerSuspended:
 5938 0000 00000000 		.space	4
 5939              		.section	.bss.uxTaskNumber,"aw",%nobits
 5940              		.align	2
 5941              		.set	.LANCHOR15,. + 0
 5944              	uxTaskNumber:
 5945 0000 00000000 		.space	4
 5946              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5947              		.align	2
 5948              		.set	.LANCHOR6,. + 0
 5951              	uxTopReadyPriority:
 5952 0000 00000000 		.space	4
 5953              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5954              		.align	2
 5955              		.set	.LANCHOR12,. + 0
 5958              	xDelayedTaskList1:
 5959 0000 00000000 		.space	20
 5959      00000000 
 5959      00000000 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 215


 5959      00000000 
 5959      00000000 
 5960              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5961              		.align	2
 5962              		.set	.LANCHOR13,. + 0
 5965              	xDelayedTaskList2:
 5966 0000 00000000 		.space	20
 5966      00000000 
 5966      00000000 
 5966      00000000 
 5966      00000000 
 5967              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5968              		.align	2
 5969              		.set	.LANCHOR17,. + 0
 5972              	xIdleTaskHandle:
 5973 0000 00000000 		.space	4
 5974              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5975              		.align	2
 5976              		.set	.LANCHOR3,. + 0
 5979              	xNextTaskUnblockTime:
 5980 0000 00000000 		.space	4
 5981              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5982              		.align	2
 5983              		.set	.LANCHOR18,. + 0
 5986              	xNumOfOverflows:
 5987 0000 00000000 		.space	4
 5988              		.section	.bss.xPendedTicks,"aw",%nobits
 5989              		.align	2
 5990              		.set	.LANCHOR20,. + 0
 5993              	xPendedTicks:
 5994 0000 00000000 		.space	4
 5995              		.section	.bss.xPendingReadyList,"aw",%nobits
 5996              		.align	2
 5997              		.set	.LANCHOR1,. + 0
 6000              	xPendingReadyList:
 6001 0000 00000000 		.space	20
 6001      00000000 
 6001      00000000 
 6001      00000000 
 6001      00000000 
 6002              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6003              		.align	2
 6004              		.set	.LANCHOR14,. + 0
 6007              	xSchedulerRunning:
 6008 0000 00000000 		.space	4
 6009              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6010              		.align	2
 6011              		.set	.LANCHOR0,. + 0
 6014              	xSuspendedTaskList:
 6015 0000 00000000 		.space	20
 6015      00000000 
 6015      00000000 
 6015      00000000 
 6015      00000000 
 6016              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6017              		.align	2
 6018              		.set	.LANCHOR8,. + 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 216


 6021              	xTasksWaitingTermination:
 6022 0000 00000000 		.space	20
 6022      00000000 
 6022      00000000 
 6022      00000000 
 6022      00000000 
 6023              		.section	.bss.xTickCount,"aw",%nobits
 6024              		.align	2
 6025              		.set	.LANCHOR4,. + 0
 6028              	xTickCount:
 6029 0000 00000000 		.space	4
 6030              		.section	.bss.xYieldPending,"aw",%nobits
 6031              		.align	2
 6032              		.set	.LANCHOR19,. + 0
 6035              	xYieldPending:
 6036 0000 00000000 		.space	4
 6037              		.section	.rodata.CSWTCH.215,"a",%progbits
 6038              		.set	.LANCHOR22,. + 0
 6041              	CSWTCH.215:
 6042 0000 58       		.byte	88
 6043 0001 52       		.byte	82
 6044 0002 42       		.byte	66
 6045 0003 53       		.byte	83
 6046 0004 44       		.byte	68
 6047              		.section	.rodata.vTaskGetRunTimeStats.str1.1,"aMS",%progbits,1
 6048              	.LC2:
 6049 0000 09257509 		.ascii	"\011%u\011\011%u%%\015\012\000"
 6049      09257525 
 6049      250D0A00 
 6050              	.LC3:
 6051 000c 09257509 		.ascii	"\011%u\011\011<1%%\015\012\000"
 6051      093C3125 
 6051      250D0A00 
 6052              		.section	.rodata.vTaskList.str1.1,"aMS",%progbits,1
 6053              	.LC1:
 6054 0000 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 6054      25750925 
 6054      75092575 
 6054      0D0A00
 6055              		.section	.rodata.vTaskStartScheduler.str1.1,"aMS",%progbits,1
 6056              	.LC0:
 6057 0000 49444C45 		.ascii	"IDLE\000"
 6057      00
 6058              		.text
 6059              	.Letext0:
 6060              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 6061              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6062              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6063              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6064              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6065              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6066              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 6067              		.file 10 "Inc/FreeRTOSConfig.h"
 6068              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6069              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6070              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6071              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 217


 6072              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 6073              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 218


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:18     .text.prvWriteNameToBuffer:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:24     .text.prvWriteNameToBuffer:00000000 prvWriteNameToBuffer
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:72     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:78     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:137    .text.prvTaskIsTaskSuspended:00000030 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:143    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:149    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:190    .text.prvResetNextTaskUnblockTime:0000001c $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:198    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:204    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:336    .text.prvAddCurrentTaskToDelayedList:00000070 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:347    .text.prvIdleTask:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:353    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:427    .text.prvIdleTask:00000040 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:438    .text.xTaskCreate:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:445    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:777    .text.xTaskCreate:00000184 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:797    .text.vTaskDelete:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:804    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:962    .text.vTaskDelete:000000b0 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:976    .text.eTaskGetState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:983    .text.eTaskGetState:00000000 eTaskGetState
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1103   .text.eTaskGetState:00000070 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1112   .text.uxTaskPriorityGet:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1119   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1156   .text.uxTaskPriorityGet:00000018 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1161   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1168   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1229   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1234   .text.vTaskPrioritySet:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1241   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1418   .text.vTaskPrioritySet:000000c4 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1426   .text.vTaskResume:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1433   .text.vTaskResume:00000000 vTaskResume
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1542   .text.vTaskResume:00000074 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1550   .text.xTaskResumeFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1557   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1688   .text.xTaskResumeFromISR:0000008c $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1697   .text.vTaskStartScheduler:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1704   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1806   .text.vTaskStartScheduler:00000064 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1816   .text.vTaskEndScheduler:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1823   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1855   .text.vTaskEndScheduler:0000001c $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1860   .text.vTaskSuspendAll:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1867   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1885   .text.vTaskSuspendAll:0000000c $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1890   .text.xTaskGetTickCount:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1897   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1913   .text.xTaskGetTickCount:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1918   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1925   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1948   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1953   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1960   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 219


C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1975   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1980   .text.pcTaskGetName:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:1987   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2030   .text.pcTaskGetName:00000020 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2035   .text.xTaskIncrementTick:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2042   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2248   .text.xTaskIncrementTick:000000fc $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2263   .text.xTaskResumeAll:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2270   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2449   .text.xTaskResumeAll:000000c8 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2462   .text.vTaskDelay:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2469   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2542   .text.vTaskDelay:00000040 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2548   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2555   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2612   .text.xTaskCatchUpTicks:00000030 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2618   .text.vTaskSwitchContext:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2625   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2750   .text.vTaskSwitchContext:00000078 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2762   .text.vTaskSuspend:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2769   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2929   .text.vTaskSuspend:000000b8 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2941   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:2948   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3006   .text.vTaskPlaceOnEventList:00000030 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3011   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3018   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3104   .text.vTaskPlaceOnUnorderedEventList:00000050 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3110   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3117   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3213   .text.xTaskRemoveFromEventList:0000006c $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3223   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3230   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3336   .text.vTaskRemoveFromUnorderedEventList:00000074 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3345   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3352   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3410   .text.vTaskSetTimeOutState:00000030 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3416   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3423   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3444   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3450   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3457   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3584   .text.xTaskCheckForTimeOut:00000070 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3591   .text.vTaskMissedYield:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3598   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3614   .text.vTaskMissedYield:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3619   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3626   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3647   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3654   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3675   .text.vTaskGetInfo:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3682   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3808   .text.vTaskGetInfo:00000078 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3813   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3819   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3908   .text.uxTaskGetSystemState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:3915   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 220


C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4025   .text.uxTaskGetSystemState:0000008c $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4035   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4042   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4058   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4063   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4070   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4098   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4104   .text.xTaskPriorityInherit:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4111   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4225   .text.xTaskPriorityInherit:0000008c $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4232   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4239   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4374   .text.xTaskPriorityDisinherit:00000094 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4381   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4388   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4533   .text.vTaskPriorityDisinheritAfterTimeout:000000a0 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4540   .text.vTaskList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4547   .text.vTaskList:00000000 vTaskList
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4675   .text.vTaskList:00000080 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4682   .text.vTaskGetRunTimeStats:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4689   .text.vTaskGetRunTimeStats:00000000 vTaskGetRunTimeStats
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4810   .text.vTaskGetRunTimeStats:00000088 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4817   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4824   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4849   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4854   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4861   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4885   .text.pvTaskIncrementMutexHeldCount:00000014 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4890   .text.ulTaskNotifyTake:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4897   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4987   .text.ulTaskNotifyTake:0000005c $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:4993   .text.xTaskNotifyWait:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5000   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5106   .text.xTaskNotifyWait:00000084 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5112   .text.xTaskGenericNotify:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5119   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5186   .text.xTaskGenericNotify:0000003c $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5322   .text.xTaskGenericNotify:000000d8 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5330   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5337   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5423   .text.xTaskGenericNotifyFromISR:00000058 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5575   .text.xTaskGenericNotifyFromISR:00000100 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5585   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5592   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5758   .text.vTaskNotifyGiveFromISR:000000b0 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5768   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5775   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5821   .text.xTaskNotifyStateClear:00000028 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5826   .text.ulTaskNotifyValueClear:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5833   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5878   .text.ulTaskNotifyValueClear:00000024 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5888   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5884   .bss.pxCurrentTCB:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5891   .bss.pxDelayedTaskList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5895   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5898   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5902   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 221


C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5905   .bss.pxReadyTasksLists:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5909   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5912   .bss.ulTaskSwitchedInTime:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5916   .bss.ulTaskSwitchedInTime:00000000 ulTaskSwitchedInTime
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5919   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5923   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5926   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5930   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5933   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5937   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5940   .bss.uxTaskNumber:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5944   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5947   .bss.uxTopReadyPriority:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5951   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5954   .bss.xDelayedTaskList1:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5958   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5961   .bss.xDelayedTaskList2:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5965   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5968   .bss.xIdleTaskHandle:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5972   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5975   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5979   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5982   .bss.xNumOfOverflows:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5986   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5989   .bss.xPendedTicks:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5993   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5996   .bss.xPendingReadyList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6000   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6003   .bss.xSchedulerRunning:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6007   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6010   .bss.xSuspendedTaskList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6014   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6017   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6021   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6024   .bss.xTickCount:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6028   .bss.xTickCount:00000000 xTickCount
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6031   .bss.xYieldPending:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6035   .bss.xYieldPending:00000000 xYieldPending
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:6041   .rodata.CSWTCH.215:00000000 CSWTCH.215
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5191   .text.xTaskGenericNotify:00000041 $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5191   .text.xTaskGenericNotify:00000042 $t
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5428   .text.xTaskGenericNotifyFromISR:0000005d $d
C:\Users\82057\AppData\Local\Temp\ccapWSUT.s:5428   .text.xTaskGenericNotifyFromISR:0000005e $t

UNDEFINED SYMBOLS
strcpy
strlen
uxListRemove
vListInsertEnd
vListInsert
vApplicationIdleHook
vPortEnterCritical
vPortExitCritical
vPortFree
pvPortMalloc
memset
vListInitialiseItem
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccapWSUT.s 			page 222


pxPortInitialiseStack
vListInitialise
vPortValidateInterruptPriority
configureTimerForRunTimeStats
xPortStartScheduler
vPortEndScheduler
getRunTimeCounterValue
sprintf
